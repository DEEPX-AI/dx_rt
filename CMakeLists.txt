cmake_minimum_required(VERSION 3.14)
project(dxrt DESCRIPTION "DEEPX Runtime SDK")
set(CMAKE_CXX_STANDARD_REQUIRED "ON")
set(CMAKE_CXX_STANDARD "11")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/release" CACHE PATH "Default install path" FORCE)
endif()
# set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib ${CMAKE_SOURCE_DIR}/lib/lib)
set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib ${CMAKE_BINARY_DIR}/lib)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if(NOT "${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "${CMAKE_SYSTEM_PROCESSOR}")
    set(CROSS_COMPILE TRUE)
else()
    set(CROSS_COMPILE FALSE)
endif()
if(CROSS_COMPILE)
    set(USE_PYTHON OFF)
    message(STATUS "  USE_PYTHON is disabled for cross compile case in current version.")
endif()

# cmake options
include(dxrt.cfg)

# functions
include(dxrt.function)

# global compile options
if (USE_SHARED_DXRT_LIB)
    add_compile_options(-W -Wall -pthread -fstrict-volatile-bitfields -fPIC)
else()
    add_compile_options(-W -Wall -pthread -fstrict-volatile-bitfields)
endif()
if (ENABLE_DEBUG_INFO)
add_compile_options(-g -rdynamic)
endif()
add_link_options(-pthread)
file(STRINGS build.cfg build_cfg_contents REGEX "^[^/]*[^/].*")
set(build_cfg_contents "${build_cfg_contents}" CACHE STRING "global compile def.")
file(STRINGS release.ver release_ver)
foreach(cfg ${build_cfg_contents})
    add_compile_definitions(${cfg})
endforeach()

if(USE_ORT)
    add_onnxruntime()
    set(USE_ORT_DEFINE "#define USE_ORT")
else()
    set(USE_ORT_DEFINE "")
# add_compile_definitions(USE_ORT)
endif()

if(USE_PYTHON)
    set(PYBIND_INCLUDE_DIR extern/pybind11/include)
    set(PYBIND_TARGET_DIR extern/pybind11)
    get_pybind11()
    find_package(PythonInterp ${PYBIND11_PYTHON_VERSION} REQUIRED)
    set(PYTHON_EXECUTABLE ${Python_EXECUTABLE})
    include_directories(${PYBIND_INCLUDE_DIR})
    add_subdirectory(${PYBIND_TARGET_DIR} EXCLUDE_FROM_ALL)
    # find python library
    find_package(PythonLibs REQUIRED)
    include_directories(${PYTHON_INCLUDE_DIRS})
    # include_directories(/usr/include/eigen3)
    add_compile_definitions(USE_PYTHON)
endif()

# sub-directories
add_subdirectory(lib)
add_subdirectory(cli)
if(EXISTS "${CMAKE_SOURCE_DIR}/test")
    add_subdirectory(test)
endif()

if(NOT TARGET uninstall)
  configure_file(
    "${CMAKE_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)

  add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
endif()

# show messages
message(STATUS "  Compiler : ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} (${CMAKE_CXX_COMPILER})")
message(STATUS "  Using compiler flags: ${CMAKE_CXX_FLAGS}")
message(STATUS "  Using c++ standard required: ${CMAKE_CXX_STANDARD_REQUIRED}")
message(STATUS "  Using c++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Using static linker flags: ${CMAKE_STATIC_LINKER_FLAGS}")
message(STATUS "  Using shared linker flags: ${CMAKE_SHARED_LINKER_FLAGS}")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  CMAKE_C_COMPILER_ID: ${CMAKE_C_COMPILER_ID}")
message(STATUS "  CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "  CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "  CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
message(STATUS "  CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}")
message(STATUS "  CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
message(STATUS "  CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
message(STATUS "  CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message(STATUS "  CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "  CMAKE_CURRENT_LIST_DIR: ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "  CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "  USE_SHARED_DXRT_LIB: ${USE_SHARED_DXRT_LIB}")
message(STATUS "  CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
message(STATUS "  CMAKE_HOST_SYSTEM_NAME: ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "  DXRT version : ${release_ver}")

if(CROSS_COMPILE)
    message("Cross compiling")
else()
    message("Not cross compiling")
endif()

get_cmake_property(variables VARIABLES)
foreach(variable ${variables})
    if(variable MATCHES "^USE_" OR variable MATCHES "^ENABLE_")
        message(STATUS "    ${variable}: ${${variable}}")
    endif()
endforeach()
