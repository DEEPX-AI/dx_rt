/* Automatically generated from DX_L2.xlsx
 * by Deepx Neural Network Generator v1.0
 */
#include "dxrt/common.h"
#include "dxrt/npuif/npuif.h"
#include <cassert>
#include <sstream>

using namespace std;

namespace dxrt {
int DX_L2_VerifyGeneratedStruct(void)
{
    int cnt = 0;
    if(sizeof(DX_L2_SYSTEM_ID_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_ID_t)==4);
    if(sizeof(DX_L2_SYSTEM_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_STATUS_t)==4);
    if(sizeof(DX_L2_SYSTEM_MODE_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_MODE_t)==4);
    if(sizeof(DX_L2_SYSTEM_CMD_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_CMD_t)==4);
    if(sizeof(DX_L2_SYSTEM_SWREG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_SWREG0_t)==4);
    if(sizeof(DX_L2_SYSTEM_SWREG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_SWREG1_t)==4);
    if(sizeof(DX_L2_SYSTEM_SWREG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_SWREG2_t)==4);
    if(sizeof(DX_L2_SYSTEM_SWREG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_SYSTEM_SWREG3_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP0_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP1_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP2_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP3_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP4_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP5_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP5_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP6_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP6_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP7_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP7_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP8_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP8_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP9_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP9_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP10_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP10_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP11_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP11_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP12_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP12_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP13_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP13_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP14_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP14_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP15_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP15_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP16_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP16_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP17_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP17_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP18_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP18_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP19_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP19_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP20_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP20_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP21_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP21_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP22_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP22_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP23_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP23_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP24_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP24_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP25_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP25_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP26_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP26_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP27_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP27_t)==4);
    if(sizeof(DX_L2_DEBUG_STAMP28_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_STAMP28_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM0_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM1_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM2_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM3_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM4_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM5_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM5_t)==4);
    if(sizeof(DX_L2_DEBUG_CKSUM6_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DEBUG_CKSUM6_t)==4);
    if(sizeof(DX_L2_DMA_AXI_BASE_ADDR_LOW_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_BASE_ADDR_LOW_t)==4);
    if(sizeof(DX_L2_DMA_AXI_BASE_ADDR_HIGH_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_BASE_ADDR_HIGH_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_AXI4_RADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_AXI4_RADDR_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_AXI4_WADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_AXI4_WADDR_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_AXI4_RADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_AXI4_RADDR_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_AXI4_WADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_AXI4_WADDR_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_SRAM_DST_ADDR0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_SRAM_DST_ADDR0_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_SRAM_DST_ADDR1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_SRAM_DST_ADDR1_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_SRAM_SRC_ADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_SRAM_SRC_ADDR_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_READ_SIZE_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_READ_SIZE_t)==4);
    if(sizeof(DX_L2_DMA_DMA0_WRITE_SIZE_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA0_WRITE_SIZE_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_SRAM_DST_ADDR0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_SRAM_DST_ADDR0_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_SRAM_DST_ADDR1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_SRAM_DST_ADDR1_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_SRAM_SRC_ADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_SRAM_SRC_ADDR_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_READ_SIZE_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_READ_SIZE_t)==4);
    if(sizeof(DX_L2_DMA_DMA1_WRITE_SIZE_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA1_WRITE_SIZE_t)==4);
    if(sizeof(DX_L2_DMA_DMA_CMD_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA_CMD_t)==4);
    if(sizeof(DX_L2_DMA_DMA_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_DMA_STATUS_t)==4);
    if(sizeof(DX_L2_DMA_SFR_BASE_ADDR_LOW_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_BASE_ADDR_LOW_t)==4);
    if(sizeof(DX_L2_DMA_SFR_BASE_ADDR_HIGH_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_BASE_ADDR_HIGH_t)==4);
    if(sizeof(DX_L2_DMA_SFR_ADDR_OFFS_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_ADDR_OFFS_t)==4);
    if(sizeof(DX_L2_DMA_SFR_START_ADDR_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_START_ADDR_t)==4);
    if(sizeof(DX_L2_DMA_SFR_MOVE_CNT_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_MOVE_CNT_t)==4);
    if(sizeof(DX_L2_DMA_SFR_ID_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_ID_t)==4);
    if(sizeof(DX_L2_DMA_SFR_DMA_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_SFR_DMA_STATUS_t)==4);
    if(sizeof(DX_L2_DMA_MISC_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_MISC_t)==4);
    if(sizeof(DX_L2_DMA_FLUSH_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_FLUSH_STATUS_t)==4);
    if(sizeof(DX_L2_DMA_AXI_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_CFG0_t)==4);
    if(sizeof(DX_L2_DMA_AXI_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_CFG1_t)==4);
    if(sizeof(DX_L2_DMA_AXI_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_CFG2_t)==4);
    if(sizeof(DX_L2_DMA_AXI_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_CFG3_t)==4);
    if(sizeof(DX_L2_DMA_AXI_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_DMA_AXI_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_DATA_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_DATA_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_DATA_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_DATA_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_IM2COL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_IM2COL_t)==4);
    if(sizeof(DX_L2_NPU0_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_CTRL_t)==4);
    if(sizeof(DX_L2_NPU0_MISC_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_MISC_t)==4);
    if(sizeof(DX_L2_NPU0_ACTIVE_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_ACTIVE_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD0_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_CTRL_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_CLIP_MAX_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_CLIP_MAX_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_CLIP_MIN_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_CLIP_MIN_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF0_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF1_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF2_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF3_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF4_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF5_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF5_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF6_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF6_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF7_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF7_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF8_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF8_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF9_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF9_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF10_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF10_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF11_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF11_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF12_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF12_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF13_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF13_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF14_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF14_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF15_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF15_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF16_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF16_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF17_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF17_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF18_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF18_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF19_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF19_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF20_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF20_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF21_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF21_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF22_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF22_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF23_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF23_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF24_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF24_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF25_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF25_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF26_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF26_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF27_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF27_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF28_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF28_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF29_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF29_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF30_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF30_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF31_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF31_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF32_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF32_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF33_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF33_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF34_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF34_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF35_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF35_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF36_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF36_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF37_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF37_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF38_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF38_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF39_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF39_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF40_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF40_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF41_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF41_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF42_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF42_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF43_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF43_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF44_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF44_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF45_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF45_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF46_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF46_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF47_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF47_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF48_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF48_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF49_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF49_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF50_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF50_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF51_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF51_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF52_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF52_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF53_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF53_t)==4);
    if(sizeof(DX_L2_NPU0_SFU_COEFF54_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_SFU_COEFF54_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD1_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_IMG2COL0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_IMG2COL0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_IMG2COL1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_IMG2COL1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_FMT_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_FMT_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_FMT_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_FMT_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_ADDR_GEN0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_ADDR_GEN0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_ADDR_GEN1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_ADDR_GEN1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_ADDR_GEN2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_ADDR_GEN2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_ADDR_GEN3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_ADDR_GEN3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CTRL_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG5_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG5_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG6_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG6_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG7_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG7_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG8_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG8_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG9_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG9_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG10_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG10_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG11_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG11_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG12_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG12_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG13_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG13_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG14_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG14_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG15_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG15_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG16_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG16_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG17_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG17_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG18_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG18_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG19_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG19_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG20_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG20_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG21_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG21_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG22_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG22_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG23_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG23_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG24_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG24_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_CFG25_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_CFG25_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_VMEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_VMEM_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_SMEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_SMEM_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_IMG2COL0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_IMG2COL0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_IMG2COL1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_IMG2COL1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_FMT_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_FMT_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_FMT_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_FMT_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_ADDR_GEN0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_ADDR_GEN0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_ADDR_GEN1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_ADDR_GEN1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_ADDR_GEN2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_ADDR_GEN2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_ADDR_GEN3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_ADDR_GEN3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CTRL_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG5_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG5_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG6_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG6_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG7_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG7_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG8_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG8_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG9_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG9_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG10_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG10_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG11_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG11_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG12_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG12_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG13_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG13_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG14_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG14_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG15_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG15_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG16_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG16_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG17_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG17_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG18_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG18_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG19_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG19_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG20_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG20_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG21_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG21_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG22_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG22_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG23_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG23_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG24_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG24_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_CFG25_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_CFG25_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_VMEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_VMEM_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_SMEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_SMEM_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_CTRL_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_BN_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_B_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_MUL_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_ELEM_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_W_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_INF_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE0_DMA_OUTF_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD5_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD5_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD6_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD6_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_CTRL_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_BN_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_B_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_MUL_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_ELEM_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_W_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_INF_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG0_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG1_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG2_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG3_t)==4);
    if(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_PE1_DMA_OUTF_CFG4_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD7_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD7_t)==4);
    if(sizeof(DX_L2_NPU0_RSVD8_t)!=4) cnt--;
    //assert(sizeof(DX_L2_NPU0_RSVD8_t)==4);
    LOG_DBG(cnt);
    return cnt;
}

/* Register access API */
/* DX_L2_SYSTEM.ID (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Id(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_SYSTEM.ID : " << ((dxDX_L2_SYSTEM_t*) base)->ID.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->ID.U;
}
void Write_Dx_l2_system_Id(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_SYSTEM.ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->ID.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->ID.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.ID.DEVICE_ID (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Id_DEVICE_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_SYSTEM.ID.DEVICE_ID : " << ((dxDX_L2_SYSTEM_t*) base)->ID.DEVICE_ID << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->ID.DEVICE_ID;
}
void Write_Dx_l2_system_Id_DEVICE_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_SYSTEM.ID.DEVICE_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->ID.DEVICE_ID = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.STATUS (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS : " << ((dxDX_L2_SYSTEM_t*) base)->STATUS.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->STATUS.U;
}
void Write_Dx_l2_system_Status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.STATUS.IRQ_STEP (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Status_IRQ_STEP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.IRQ_STEP : " << ((dxDX_L2_SYSTEM_t*) base)->STATUS.IRQ_STEP << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->STATUS.IRQ_STEP;
}
void Write_Dx_l2_system_Status_IRQ_STEP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.IRQ_STEP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->STATUS.IRQ_STEP = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.STATUS.IRQ_INF (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Status_IRQ_INF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.IRQ_INF : " << ((dxDX_L2_SYSTEM_t*) base)->STATUS.IRQ_INF << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->STATUS.IRQ_INF;
}
void Write_Dx_l2_system_Status_IRQ_INF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.IRQ_INF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->STATUS.IRQ_INF = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.STATUS.BUSY (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Status_BUSY(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.BUSY : " << ((dxDX_L2_SYSTEM_t*) base)->STATUS.BUSY << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->STATUS.BUSY;
}
void Write_Dx_l2_system_Status_BUSY(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.BUSY : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->STATUS.BUSY = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.STATUS.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.RESERVED0 : " << ((dxDX_L2_SYSTEM_t*) base)->STATUS.RESERVED0 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->STATUS.RESERVED0;
}
void Write_Dx_l2_system_Status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.STATUS.ARGMAX_ID (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Status_ARGMAX_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.ARGMAX_ID : " << ((dxDX_L2_SYSTEM_t*) base)->STATUS.ARGMAX_ID << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->STATUS.ARGMAX_ID;
}
void Write_Dx_l2_system_Status_ARGMAX_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_SYSTEM.STATUS.ARGMAX_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->STATUS.ARGMAX_ID = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.MODE (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Mode(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE : " << ((dxDX_L2_SYSTEM_t*) base)->MODE.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->MODE.U;
}
void Write_Dx_l2_system_Mode(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->MODE.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->MODE.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.MODE.LAST_CMD_NUM (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Mode_LAST_CMD_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.LAST_CMD_NUM : " << ((dxDX_L2_SYSTEM_t*) base)->MODE.LAST_CMD_NUM << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->MODE.LAST_CMD_NUM;
}
void Write_Dx_l2_system_Mode_LAST_CMD_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.LAST_CMD_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->MODE.LAST_CMD_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.MODE.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Mode_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.RESERVED0 : " << ((dxDX_L2_SYSTEM_t*) base)->MODE.RESERVED0 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->MODE.RESERVED0;
}
void Write_Dx_l2_system_Mode_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->MODE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.MODE.AUTORUN_EN (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Mode_AUTORUN_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.AUTORUN_EN : " << ((dxDX_L2_SYSTEM_t*) base)->MODE.AUTORUN_EN << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->MODE.AUTORUN_EN;
}
void Write_Dx_l2_system_Mode_AUTORUN_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.AUTORUN_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->MODE.AUTORUN_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.MODE.IRQ_STEP_EN (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Mode_IRQ_STEP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.IRQ_STEP_EN : " << ((dxDX_L2_SYSTEM_t*) base)->MODE.IRQ_STEP_EN << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->MODE.IRQ_STEP_EN;
}
void Write_Dx_l2_system_Mode_IRQ_STEP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.IRQ_STEP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->MODE.IRQ_STEP_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.MODE.IRQ_INF_EN (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Mode_IRQ_INF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.IRQ_INF_EN : " << ((dxDX_L2_SYSTEM_t*) base)->MODE.IRQ_INF_EN << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->MODE.IRQ_INF_EN;
}
void Write_Dx_l2_system_Mode_IRQ_INF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_SYSTEM.MODE.IRQ_INF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->MODE.IRQ_INF_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.CMD (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Cmd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_SYSTEM.CMD : " << ((dxDX_L2_SYSTEM_t*) base)->CMD.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->CMD.U;
}
void Write_Dx_l2_system_Cmd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_SYSTEM.CMD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->CMD.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->CMD.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.CMD.START (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Cmd_START(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_SYSTEM.CMD.START : " << ((dxDX_L2_SYSTEM_t*) base)->CMD.START << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->CMD.START;
}
void Write_Dx_l2_system_Cmd_START(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_SYSTEM.CMD.START : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->CMD.START = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.CMD.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Cmd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_SYSTEM.CMD.RESERVED0 : " << ((dxDX_L2_SYSTEM_t*) base)->CMD.RESERVED0 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->CMD.RESERVED0;
}
void Write_Dx_l2_system_Cmd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_SYSTEM.CMD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->CMD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.SWREG0 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_SYSTEM.SWREG0 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG0.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG0.U;
}
void Write_Dx_l2_system_Swreg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_SYSTEM.SWREG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->SWREG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.SWREG0.SWREG0 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg0_SWREG0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_SYSTEM.SWREG0.SWREG0 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG0.SWREG0 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG0.SWREG0;
}
void Write_Dx_l2_system_Swreg0_SWREG0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_SYSTEM.SWREG0.SWREG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG0.SWREG0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.SWREG1 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_SYSTEM.SWREG1 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG1.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG1.U;
}
void Write_Dx_l2_system_Swreg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_SYSTEM.SWREG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->SWREG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.SWREG1.SWREG1 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg1_SWREG1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_SYSTEM.SWREG1.SWREG1 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG1.SWREG1 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG1.SWREG1;
}
void Write_Dx_l2_system_Swreg1_SWREG1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_SYSTEM.SWREG1.SWREG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG1.SWREG1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.SWREG2 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_SYSTEM.SWREG2 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG2.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG2.U;
}
void Write_Dx_l2_system_Swreg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_SYSTEM.SWREG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->SWREG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.SWREG2.SWREG2 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg2_SWREG2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_SYSTEM.SWREG2.SWREG2 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG2.SWREG2 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG2.SWREG2;
}
void Write_Dx_l2_system_Swreg2_SWREG2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_SYSTEM.SWREG2.SWREG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG2.SWREG2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_SYSTEM.SWREG3 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_SYSTEM.SWREG3 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG3.U << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG3.U;
}
void Write_Dx_l2_system_Swreg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_SYSTEM.SWREG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_SYSTEM_t*) base)->SWREG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_SYSTEM.SWREG3.SWREG3 (Category: SYSTEM) */
uint32_t Read_Dx_l2_system_Swreg3_SWREG3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_SYSTEM.SWREG3.SWREG3 : " << ((dxDX_L2_SYSTEM_t*) base)->SWREG3.SWREG3 << std::endl;
    return ((dxDX_L2_SYSTEM_t*) base)->SWREG3.SWREG3;
}
void Write_Dx_l2_system_Swreg3_SWREG3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_SYSTEM.SWREG3.SWREG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_SYSTEM_t*) base)->SWREG3.SWREG3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP0.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP0.U;
}
void Write_Dx_l2_debug_Stamp0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP0.LAYER_IDX (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp0_LAYER_IDX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0.LAYER_IDX : " << ((dxDX_L2_DEBUG_t*) base)->STAMP0.LAYER_IDX << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP0.LAYER_IDX;
}
void Write_Dx_l2_debug_Stamp0_LAYER_IDX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0.LAYER_IDX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP0.LAYER_IDX = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP0.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP0.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP0.RESERVED0;
}
void Write_Dx_l2_debug_Stamp0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP0.STAMP_EN (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp0_STAMP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0.STAMP_EN : " << ((dxDX_L2_DEBUG_t*) base)->STAMP0.STAMP_EN << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP0.STAMP_EN;
}
void Write_Dx_l2_debug_Stamp0_STAMP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DEBUG.STAMP0.STAMP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP0.STAMP_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP1 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DEBUG.STAMP1 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP1.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP1.U;
}
void Write_Dx_l2_debug_Stamp1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DEBUG.STAMP1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP1.CLK_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp1_CLK_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DEBUG.STAMP1.CLK_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP1.CLK_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP1.CLK_CNT;
}
void Write_Dx_l2_debug_Stamp1_CLK_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DEBUG.STAMP1.CLK_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP1.CLK_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP2 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DEBUG.STAMP2 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP2.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP2.U;
}
void Write_Dx_l2_debug_Stamp2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DEBUG.STAMP2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP2.DDR_RD_CNT_IN (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp2_DDR_RD_CNT_IN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DEBUG.STAMP2.DDR_RD_CNT_IN : " << ((dxDX_L2_DEBUG_t*) base)->STAMP2.DDR_RD_CNT_IN << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP2.DDR_RD_CNT_IN;
}
void Write_Dx_l2_debug_Stamp2_DDR_RD_CNT_IN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DEBUG.STAMP2.DDR_RD_CNT_IN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP2.DDR_RD_CNT_IN = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP3 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DEBUG.STAMP3 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP3.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP3.U;
}
void Write_Dx_l2_debug_Stamp3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DEBUG.STAMP3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP3.DDR_RD_CNT_W (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp3_DDR_RD_CNT_W(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DEBUG.STAMP3.DDR_RD_CNT_W : " << ((dxDX_L2_DEBUG_t*) base)->STAMP3.DDR_RD_CNT_W << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP3.DDR_RD_CNT_W;
}
void Write_Dx_l2_debug_Stamp3_DDR_RD_CNT_W(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DEBUG.STAMP3.DDR_RD_CNT_W : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP3.DDR_RD_CNT_W = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP4 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DEBUG.STAMP4 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP4.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP4.U;
}
void Write_Dx_l2_debug_Stamp4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DEBUG.STAMP4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP4.DDR_WR_CNT_OUT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp4_DDR_WR_CNT_OUT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DEBUG.STAMP4.DDR_WR_CNT_OUT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP4.DDR_WR_CNT_OUT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP4.DDR_WR_CNT_OUT;
}
void Write_Dx_l2_debug_Stamp4_DDR_WR_CNT_OUT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DEBUG.STAMP4.DDR_WR_CNT_OUT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP4.DDR_WR_CNT_OUT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP5 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DEBUG.STAMP5 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP5.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP5.U;
}
void Write_Dx_l2_debug_Stamp5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DEBUG.STAMP5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP5.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP5.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP5.CONV_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp5_CONV_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DEBUG.STAMP5.CONV_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP5.CONV_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP5.CONV_CNT;
}
void Write_Dx_l2_debug_Stamp5_CONV_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DEBUG.STAMP5.CONV_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP5.CONV_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP6 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DEBUG.STAMP6 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP6.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP6.U;
}
void Write_Dx_l2_debug_Stamp6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DEBUG.STAMP6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP6.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP6.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP6.IDLE_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp6_IDLE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DEBUG.STAMP6.IDLE_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP6.IDLE_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP6.IDLE_CNT;
}
void Write_Dx_l2_debug_Stamp6_IDLE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DEBUG.STAMP6.IDLE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP6.IDLE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP7 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DEBUG.STAMP7 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP7.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP7.U;
}
void Write_Dx_l2_debug_Stamp7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DEBUG.STAMP7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP7.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP7.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP7.WAIT_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp7_WAIT_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DEBUG.STAMP7.WAIT_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP7.WAIT_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP7.WAIT_CNT;
}
void Write_Dx_l2_debug_Stamp7_WAIT_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DEBUG.STAMP7.WAIT_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP7.WAIT_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP8 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DEBUG.STAMP8 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP8.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP8.U;
}
void Write_Dx_l2_debug_Stamp8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DEBUG.STAMP8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP8.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP8.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP8.BN_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp8_BN_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DEBUG.STAMP8.BN_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP8.BN_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP8.BN_CNT;
}
void Write_Dx_l2_debug_Stamp8_BN_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DEBUG.STAMP8.BN_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP8.BN_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP9 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DEBUG.STAMP9 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP9.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP9.U;
}
void Write_Dx_l2_debug_Stamp9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DEBUG.STAMP9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP9.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP9.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP9.BIAS_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp9_BIAS_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DEBUG.STAMP9.BIAS_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP9.BIAS_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP9.BIAS_CNT;
}
void Write_Dx_l2_debug_Stamp9_BIAS_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DEBUG.STAMP9.BIAS_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP9.BIAS_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP10 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DEBUG.STAMP10 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP10.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP10.U;
}
void Write_Dx_l2_debug_Stamp10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DEBUG.STAMP10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP10.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP10.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP10.MUL_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp10_MUL_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DEBUG.STAMP10.MUL_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP10.MUL_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP10.MUL_CNT;
}
void Write_Dx_l2_debug_Stamp10_MUL_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DEBUG.STAMP10.MUL_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP10.MUL_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP11 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DEBUG.STAMP11 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP11.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP11.U;
}
void Write_Dx_l2_debug_Stamp11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DEBUG.STAMP11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP11.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP11.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP11.ELEMENT_ADD_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp11_ELEMENT_ADD_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DEBUG.STAMP11.ELEMENT_ADD_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP11.ELEMENT_ADD_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP11.ELEMENT_ADD_CNT;
}
void Write_Dx_l2_debug_Stamp11_ELEMENT_ADD_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DEBUG.STAMP11.ELEMENT_ADD_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP11.ELEMENT_ADD_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP12 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DEBUG.STAMP12 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP12.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP12.U;
}
void Write_Dx_l2_debug_Stamp12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DEBUG.STAMP12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP12.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP12.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP12.CLK_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp12_CLK_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DEBUG.STAMP12.CLK_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP12.CLK_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP12.CLK_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp12_CLK_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DEBUG.STAMP12.CLK_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP12.CLK_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP12.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp12_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DEBUG.STAMP12.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP12.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP12.RESERVED0;
}
void Write_Dx_l2_debug_Stamp12_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DEBUG.STAMP12.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP12.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP13 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DEBUG.STAMP13 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP13.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP13.U;
}
void Write_Dx_l2_debug_Stamp13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DEBUG.STAMP13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP13.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP13.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP13.DDR_RD_CNT_IN_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp13_DDR_RD_CNT_IN_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DEBUG.STAMP13.DDR_RD_CNT_IN_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP13.DDR_RD_CNT_IN_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP13.DDR_RD_CNT_IN_SEL;
}
void Write_Dx_l2_debug_Stamp13_DDR_RD_CNT_IN_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DEBUG.STAMP13.DDR_RD_CNT_IN_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP13.DDR_RD_CNT_IN_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP13.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp13_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DEBUG.STAMP13.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP13.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP13.RESERVED0;
}
void Write_Dx_l2_debug_Stamp13_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DEBUG.STAMP13.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP13.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP14 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DEBUG.STAMP14 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP14.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP14.U;
}
void Write_Dx_l2_debug_Stamp14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DEBUG.STAMP14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP14.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP14.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP14.DDR_RD_CNT_W_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp14_DDR_RD_CNT_W_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DEBUG.STAMP14.DDR_RD_CNT_W_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP14.DDR_RD_CNT_W_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP14.DDR_RD_CNT_W_SEL;
}
void Write_Dx_l2_debug_Stamp14_DDR_RD_CNT_W_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DEBUG.STAMP14.DDR_RD_CNT_W_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP14.DDR_RD_CNT_W_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP14.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp14_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DEBUG.STAMP14.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP14.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP14.RESERVED0;
}
void Write_Dx_l2_debug_Stamp14_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DEBUG.STAMP14.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP14.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP15 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DEBUG.STAMP15 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP15.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP15.U;
}
void Write_Dx_l2_debug_Stamp15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DEBUG.STAMP15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP15.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP15.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP15.DDR_WR_CNT_OUT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp15_DDR_WR_CNT_OUT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DEBUG.STAMP15.DDR_WR_CNT_OUT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP15.DDR_WR_CNT_OUT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP15.DDR_WR_CNT_OUT_SEL;
}
void Write_Dx_l2_debug_Stamp15_DDR_WR_CNT_OUT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DEBUG.STAMP15.DDR_WR_CNT_OUT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP15.DDR_WR_CNT_OUT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP15.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp15_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DEBUG.STAMP15.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP15.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP15.RESERVED0;
}
void Write_Dx_l2_debug_Stamp15_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DEBUG.STAMP15.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP15.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP16 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DEBUG.STAMP16 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP16.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP16.U;
}
void Write_Dx_l2_debug_Stamp16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DEBUG.STAMP16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP16.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP16.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP16.CONV_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp16_CONV_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DEBUG.STAMP16.CONV_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP16.CONV_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP16.CONV_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp16_CONV_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DEBUG.STAMP16.CONV_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP16.CONV_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP16.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp16_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DEBUG.STAMP16.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP16.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP16.RESERVED0;
}
void Write_Dx_l2_debug_Stamp16_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DEBUG.STAMP16.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP16.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP17 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DEBUG.STAMP17 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP17.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP17.U;
}
void Write_Dx_l2_debug_Stamp17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DEBUG.STAMP17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP17.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP17.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP17.IDLE_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp17_IDLE_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DEBUG.STAMP17.IDLE_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP17.IDLE_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP17.IDLE_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp17_IDLE_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DEBUG.STAMP17.IDLE_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP17.IDLE_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP17.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp17_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DEBUG.STAMP17.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP17.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP17.RESERVED0;
}
void Write_Dx_l2_debug_Stamp17_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DEBUG.STAMP17.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP17.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP18 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DEBUG.STAMP18 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP18.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP18.U;
}
void Write_Dx_l2_debug_Stamp18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DEBUG.STAMP18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP18.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP18.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP18.WAIT_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp18_WAIT_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DEBUG.STAMP18.WAIT_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP18.WAIT_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP18.WAIT_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp18_WAIT_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DEBUG.STAMP18.WAIT_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP18.WAIT_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP18.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp18_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DEBUG.STAMP18.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP18.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP18.RESERVED0;
}
void Write_Dx_l2_debug_Stamp18_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DEBUG.STAMP18.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP18.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP19 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DEBUG.STAMP19 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP19.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP19.U;
}
void Write_Dx_l2_debug_Stamp19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DEBUG.STAMP19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP19.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP19.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP19.BN_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp19_BN_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DEBUG.STAMP19.BN_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP19.BN_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP19.BN_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp19_BN_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DEBUG.STAMP19.BN_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP19.BN_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP19.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp19_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DEBUG.STAMP19.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP19.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP19.RESERVED0;
}
void Write_Dx_l2_debug_Stamp19_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DEBUG.STAMP19.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP19.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP20 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DEBUG.STAMP20 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP20.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP20.U;
}
void Write_Dx_l2_debug_Stamp20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DEBUG.STAMP20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP20.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP20.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP20.BIAS_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp20_BIAS_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DEBUG.STAMP20.BIAS_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP20.BIAS_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP20.BIAS_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp20_BIAS_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DEBUG.STAMP20.BIAS_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP20.BIAS_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP20.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp20_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DEBUG.STAMP20.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP20.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP20.RESERVED0;
}
void Write_Dx_l2_debug_Stamp20_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DEBUG.STAMP20.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP20.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP21 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DEBUG.STAMP21 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP21.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP21.U;
}
void Write_Dx_l2_debug_Stamp21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DEBUG.STAMP21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP21.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP21.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP21.MUL_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp21_MUL_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DEBUG.STAMP21.MUL_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP21.MUL_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP21.MUL_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp21_MUL_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DEBUG.STAMP21.MUL_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP21.MUL_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP21.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp21_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DEBUG.STAMP21.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP21.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP21.RESERVED0;
}
void Write_Dx_l2_debug_Stamp21_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DEBUG.STAMP21.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP21.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP22 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DEBUG.STAMP22 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP22.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP22.U;
}
void Write_Dx_l2_debug_Stamp22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DEBUG.STAMP22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP22.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP22.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP22.ELEMENT_ADD_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp22_ELEMENT_ADD_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DEBUG.STAMP22.ELEMENT_ADD_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP22.ELEMENT_ADD_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP22.ELEMENT_ADD_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp22_ELEMENT_ADD_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DEBUG.STAMP22.ELEMENT_ADD_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP22.ELEMENT_ADD_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP22.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp22_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DEBUG.STAMP22.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP22.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP22.RESERVED0;
}
void Write_Dx_l2_debug_Stamp22_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DEBUG.STAMP22.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP22.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP23 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DEBUG.STAMP23 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP23.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP23.U;
}
void Write_Dx_l2_debug_Stamp23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DEBUG.STAMP23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP23.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP23.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP23.DMA_RD_WR_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp23_DMA_RD_WR_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DEBUG.STAMP23.DMA_RD_WR_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP23.DMA_RD_WR_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP23.DMA_RD_WR_CNT;
}
void Write_Dx_l2_debug_Stamp23_DMA_RD_WR_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DEBUG.STAMP23.DMA_RD_WR_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP23.DMA_RD_WR_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP24 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DEBUG.STAMP24 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP24.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP24.U;
}
void Write_Dx_l2_debug_Stamp24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DEBUG.STAMP24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP24.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP24.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP24.DMA_RD_ONLY_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp24_DMA_RD_ONLY_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DEBUG.STAMP24.DMA_RD_ONLY_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP24.DMA_RD_ONLY_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP24.DMA_RD_ONLY_CNT;
}
void Write_Dx_l2_debug_Stamp24_DMA_RD_ONLY_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DEBUG.STAMP24.DMA_RD_ONLY_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP24.DMA_RD_ONLY_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP25 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DEBUG.STAMP25 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP25.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP25.U;
}
void Write_Dx_l2_debug_Stamp25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DEBUG.STAMP25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP25.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP25.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP25.DMA_WR_ONLY_CNT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp25_DMA_WR_ONLY_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DEBUG.STAMP25.DMA_WR_ONLY_CNT : " << ((dxDX_L2_DEBUG_t*) base)->STAMP25.DMA_WR_ONLY_CNT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP25.DMA_WR_ONLY_CNT;
}
void Write_Dx_l2_debug_Stamp25_DMA_WR_ONLY_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DEBUG.STAMP25.DMA_WR_ONLY_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP25.DMA_WR_ONLY_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP26 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp26(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DEBUG.STAMP26 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP26.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP26.U;
}
void Write_Dx_l2_debug_Stamp26(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DEBUG.STAMP26 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP26.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP26.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP26.DMA_RD_WR_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp26_DMA_RD_WR_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DEBUG.STAMP26.DMA_RD_WR_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP26.DMA_RD_WR_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP26.DMA_RD_WR_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp26_DMA_RD_WR_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DEBUG.STAMP26.DMA_RD_WR_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP26.DMA_RD_WR_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP26.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp26_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DEBUG.STAMP26.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP26.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP26.RESERVED0;
}
void Write_Dx_l2_debug_Stamp26_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DEBUG.STAMP26.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP26.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP27 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp27(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DEBUG.STAMP27 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP27.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP27.U;
}
void Write_Dx_l2_debug_Stamp27(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DEBUG.STAMP27 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP27.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP27.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP27.DMA_RD_ONLY_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp27_DMA_RD_ONLY_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DEBUG.STAMP27.DMA_RD_ONLY_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP27.DMA_RD_ONLY_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP27.DMA_RD_ONLY_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp27_DMA_RD_ONLY_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DEBUG.STAMP27.DMA_RD_ONLY_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP27.DMA_RD_ONLY_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP27.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp27_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DEBUG.STAMP27.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP27.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP27.RESERVED0;
}
void Write_Dx_l2_debug_Stamp27_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DEBUG.STAMP27.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP27.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP28 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp28(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DEBUG.STAMP28 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP28.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP28.U;
}
void Write_Dx_l2_debug_Stamp28(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DEBUG.STAMP28 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP28.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->STAMP28.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.STAMP28.DMA_WR_ONLY_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp28_DMA_WR_ONLY_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DEBUG.STAMP28.DMA_WR_ONLY_CNT_SEL : " << ((dxDX_L2_DEBUG_t*) base)->STAMP28.DMA_WR_ONLY_CNT_SEL << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP28.DMA_WR_ONLY_CNT_SEL;
}
void Write_Dx_l2_debug_Stamp28_DMA_WR_ONLY_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DEBUG.STAMP28.DMA_WR_ONLY_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP28.DMA_WR_ONLY_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.STAMP28.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Stamp28_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DEBUG.STAMP28.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->STAMP28.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->STAMP28.RESERVED0;
}
void Write_Dx_l2_debug_Stamp28_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DEBUG.STAMP28.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->STAMP28.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DEBUG.CKSUM0 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM0.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM0.U;
}
void Write_Dx_l2_debug_Cksum0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DEBUG.CKSUM0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM0.CKSUM_PE0_SFU_IN (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum0_CKSUM_PE0_SFU_IN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DEBUG.CKSUM0.CKSUM_PE0_SFU_IN : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM0.CKSUM_PE0_SFU_IN << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM0.CKSUM_PE0_SFU_IN;
}
void Write_Dx_l2_debug_Cksum0_CKSUM_PE0_SFU_IN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DEBUG.CKSUM0.CKSUM_PE0_SFU_IN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM0.CKSUM_PE0_SFU_IN = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM1 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DEBUG.CKSUM1 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM1.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM1.U;
}
void Write_Dx_l2_debug_Cksum1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DEBUG.CKSUM1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM1.CKSUM_PE1_SFU_IN (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum1_CKSUM_PE1_SFU_IN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DEBUG.CKSUM1.CKSUM_PE1_SFU_IN : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM1.CKSUM_PE1_SFU_IN << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM1.CKSUM_PE1_SFU_IN;
}
void Write_Dx_l2_debug_Cksum1_CKSUM_PE1_SFU_IN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DEBUG.CKSUM1.CKSUM_PE1_SFU_IN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM1.CKSUM_PE1_SFU_IN = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM2 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM2.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM2.U;
}
void Write_Dx_l2_debug_Cksum2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM2.CKSUM_PE1_SFU_OUT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum2_CKSUM_PE1_SFU_OUT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2.CKSUM_PE1_SFU_OUT : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM2.CKSUM_PE1_SFU_OUT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM2.CKSUM_PE1_SFU_OUT;
}
void Write_Dx_l2_debug_Cksum2_CKSUM_PE1_SFU_OUT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2.CKSUM_PE1_SFU_OUT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM2.CKSUM_PE1_SFU_OUT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM2.CKSUM_PE0_SFU_OUT (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum2_CKSUM_PE0_SFU_OUT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2.CKSUM_PE0_SFU_OUT : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM2.CKSUM_PE0_SFU_OUT << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM2.CKSUM_PE0_SFU_OUT;
}
void Write_Dx_l2_debug_Cksum2_CKSUM_PE0_SFU_OUT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2.CKSUM_PE0_SFU_OUT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM2.CKSUM_PE0_SFU_OUT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM2.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM2.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM2.RESERVED0;
}
void Write_Dx_l2_debug_Cksum2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DEBUG.CKSUM2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM3 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM3.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM3.U;
}
void Write_Dx_l2_debug_Cksum3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM3.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM3.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM3.RESERVED0;
}
void Write_Dx_l2_debug_Cksum3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM3.CKSUM_ACC_RST (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum3_CKSUM_ACC_RST(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3.CKSUM_ACC_RST : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM3.CKSUM_ACC_RST << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM3.CKSUM_ACC_RST;
}
void Write_Dx_l2_debug_Cksum3_CKSUM_ACC_RST(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3.CKSUM_ACC_RST : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM3.CKSUM_ACC_RST = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM3.CKSUM_EN (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum3_CKSUM_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3.CKSUM_EN : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM3.CKSUM_EN << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM3.CKSUM_EN;
}
void Write_Dx_l2_debug_Cksum3_CKSUM_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_DEBUG.CKSUM3.CKSUM_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM3.CKSUM_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM4 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_DEBUG.CKSUM4 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM4.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM4.U;
}
void Write_Dx_l2_debug_Cksum4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_DEBUG.CKSUM4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM4.CKSUM_PE0_SFU_IN_ACC (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum4_CKSUM_PE0_SFU_IN_ACC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_DEBUG.CKSUM4.CKSUM_PE0_SFU_IN_ACC : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM4.CKSUM_PE0_SFU_IN_ACC << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM4.CKSUM_PE0_SFU_IN_ACC;
}
void Write_Dx_l2_debug_Cksum4_CKSUM_PE0_SFU_IN_ACC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_DEBUG.CKSUM4.CKSUM_PE0_SFU_IN_ACC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM4.CKSUM_PE0_SFU_IN_ACC = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM5 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_DEBUG.CKSUM5 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM5.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM5.U;
}
void Write_Dx_l2_debug_Cksum5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_DEBUG.CKSUM5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM5.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM5.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM5.CKSUM_PE1_SFU_IN_ACC (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum5_CKSUM_PE1_SFU_IN_ACC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_DEBUG.CKSUM5.CKSUM_PE1_SFU_IN_ACC : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM5.CKSUM_PE1_SFU_IN_ACC << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM5.CKSUM_PE1_SFU_IN_ACC;
}
void Write_Dx_l2_debug_Cksum5_CKSUM_PE1_SFU_IN_ACC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_DEBUG.CKSUM5.CKSUM_PE1_SFU_IN_ACC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM5.CKSUM_PE1_SFU_IN_ACC = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM6 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM6.U << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM6.U;
}
void Write_Dx_l2_debug_Cksum6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM6.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DEBUG_t*) base)->CKSUM6.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DEBUG.CKSUM6.CKSUM_PE1_SFU_OUT_ACC (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum6_CKSUM_PE1_SFU_OUT_ACC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6.CKSUM_PE1_SFU_OUT_ACC : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM6.CKSUM_PE1_SFU_OUT_ACC << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM6.CKSUM_PE1_SFU_OUT_ACC;
}
void Write_Dx_l2_debug_Cksum6_CKSUM_PE1_SFU_OUT_ACC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6.CKSUM_PE1_SFU_OUT_ACC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM6.CKSUM_PE1_SFU_OUT_ACC = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM6.CKSUM_PE0_SFU_OUT_ACC (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum6_CKSUM_PE0_SFU_OUT_ACC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6.CKSUM_PE0_SFU_OUT_ACC : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM6.CKSUM_PE0_SFU_OUT_ACC << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM6.CKSUM_PE0_SFU_OUT_ACC;
}
void Write_Dx_l2_debug_Cksum6_CKSUM_PE0_SFU_OUT_ACC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6.CKSUM_PE0_SFU_OUT_ACC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM6.CKSUM_PE0_SFU_OUT_ACC = val;
    IOMEM_BARRIER();
}

/* DX_L2_DEBUG.CKSUM6.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_l2_debug_Cksum6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6.RESERVED0 : " << ((dxDX_L2_DEBUG_t*) base)->CKSUM6.RESERVED0 << std::endl;
    return ((dxDX_L2_DEBUG_t*) base)->CKSUM6.RESERVED0;
}
void Write_Dx_l2_debug_Cksum6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_DEBUG.CKSUM6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DEBUG_t*) base)->CKSUM6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_base_addr_low(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DMA.AXI_BASE_ADDR_LOW : " << ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.U;
}
void Write_Dx_l2_dma_Axi_base_addr_low(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DMA.AXI_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW : " << ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW;
}
void Write_Dx_l2_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_base_addr_high(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DMA.AXI_BASE_ADDR_HIGH : " << ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U;
}
void Write_Dx_l2_dma_Axi_base_addr_high(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DMA.AXI_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH : " << ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH;
}
void Write_Dx_l2_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_AXI4_RADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_axi4_raddr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DMA.DMA0_AXI4_RADDR : " << ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.U;
}
void Write_Dx_l2_dma_Dma0_axi4_raddr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DMA.DMA0_AXI4_RADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_AXI4_RADDR.DMA0_AXI4_RADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_axi4_raddr_DMA0_AXI4_RADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DMA.DMA0_AXI4_RADDR.DMA0_AXI4_RADDR : " << ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.DMA0_AXI4_RADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.DMA0_AXI4_RADDR;
}
void Write_Dx_l2_dma_Dma0_axi4_raddr_DMA0_AXI4_RADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_DMA.DMA0_AXI4_RADDR.DMA0_AXI4_RADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_RADDR.DMA0_AXI4_RADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_AXI4_WADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_axi4_waddr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DMA.DMA0_AXI4_WADDR : " << ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.U;
}
void Write_Dx_l2_dma_Dma0_axi4_waddr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DMA.DMA0_AXI4_WADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_AXI4_WADDR.DMA0_AXI4_WADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_axi4_waddr_DMA0_AXI4_WADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DMA.DMA0_AXI4_WADDR.DMA0_AXI4_WADDR : " << ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.DMA0_AXI4_WADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.DMA0_AXI4_WADDR;
}
void Write_Dx_l2_dma_Dma0_axi4_waddr_DMA0_AXI4_WADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_DMA.DMA0_AXI4_WADDR.DMA0_AXI4_WADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_AXI4_WADDR.DMA0_AXI4_WADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_AXI4_RADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_axi4_raddr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DMA.DMA1_AXI4_RADDR : " << ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.U;
}
void Write_Dx_l2_dma_Dma1_axi4_raddr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DMA.DMA1_AXI4_RADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_AXI4_RADDR.DMA1_AXI4_RADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_axi4_raddr_DMA1_AXI4_RADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DMA.DMA1_AXI4_RADDR.DMA1_AXI4_RADDR : " << ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.DMA1_AXI4_RADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.DMA1_AXI4_RADDR;
}
void Write_Dx_l2_dma_Dma1_axi4_raddr_DMA1_AXI4_RADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_DMA.DMA1_AXI4_RADDR.DMA1_AXI4_RADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_RADDR.DMA1_AXI4_RADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_AXI4_WADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_axi4_waddr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DMA.DMA1_AXI4_WADDR : " << ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.U;
}
void Write_Dx_l2_dma_Dma1_axi4_waddr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DMA.DMA1_AXI4_WADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_AXI4_WADDR.DMA1_AXI4_WADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_axi4_waddr_DMA1_AXI4_WADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DMA.DMA1_AXI4_WADDR.DMA1_AXI4_WADDR : " << ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.DMA1_AXI4_WADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.DMA1_AXI4_WADDR;
}
void Write_Dx_l2_dma_Dma1_axi4_waddr_DMA1_AXI4_WADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_DMA.DMA1_AXI4_WADDR.DMA1_AXI4_WADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_AXI4_WADDR.DMA1_AXI4_WADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_SRAM_DST_ADDR0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_sram_dst_addr0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR0 : " << ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.U;
}
void Write_Dx_l2_dma_Dma0_sram_dst_addr0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_sram_dst_addr0_DMA0_SRAM_DST_ADDR0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 : " << ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0;
}
void Write_Dx_l2_dma_Dma0_sram_dst_addr0_DMA0_SRAM_DST_ADDR0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_SRAM_DST_ADDR1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_sram_dst_addr1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR1 : " << ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.U;
}
void Write_Dx_l2_dma_Dma0_sram_dst_addr1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_sram_dst_addr1_DMA0_SRAM_DST_ADDR1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 : " << ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1;
}
void Write_Dx_l2_dma_Dma0_sram_dst_addr1_DMA0_SRAM_DST_ADDR1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_DMA.DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_SRAM_SRC_ADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_sram_src_addr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DMA.DMA0_SRAM_SRC_ADDR : " << ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.U;
}
void Write_Dx_l2_dma_Dma0_sram_src_addr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DMA.DMA0_SRAM_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_sram_src_addr_DMA0_SRAM_SRC_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DMA.DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR : " << ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR;
}
void Write_Dx_l2_dma_Dma0_sram_src_addr_DMA0_SRAM_SRC_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_DMA.DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_READ_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_read_size(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.U;
}
void Write_Dx_l2_dma_Dma0_read_size(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_READ_SIZE.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_read_size_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE.RESERVED1 : " << ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.RESERVED1 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.RESERVED1;
}
void Write_Dx_l2_dma_Dma0_read_size_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_READ_SIZE.DMA0_READ_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_read_size_DMA0_READ_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE.DMA0_READ_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.DMA0_READ_SIZE << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.DMA0_READ_SIZE;
}
void Write_Dx_l2_dma_Dma0_read_size_DMA0_READ_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE.DMA0_READ_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.DMA0_READ_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_READ_SIZE.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_read_size_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.RESERVED0;
}
void Write_Dx_l2_dma_Dma0_read_size_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_DMA.DMA0_READ_SIZE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_READ_SIZE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_WRITE_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_write_size(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.U;
}
void Write_Dx_l2_dma_Dma0_write_size(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_write_size_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED1 : " << ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.RESERVED1 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.RESERVED1;
}
void Write_Dx_l2_dma_Dma0_write_size_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_WRITE_SIZE.DMA0_WRITE_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_write_size_DMA0_WRITE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE.DMA0_WRITE_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.DMA0_WRITE_SIZE << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.DMA0_WRITE_SIZE;
}
void Write_Dx_l2_dma_Dma0_write_size_DMA0_WRITE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE.DMA0_WRITE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.DMA0_WRITE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma0_write_size_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.RESERVED0;
}
void Write_Dx_l2_dma_Dma0_write_size_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA0_WRITE_SIZE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_SRAM_DST_ADDR0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_sram_dst_addr0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR0 : " << ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.U;
}
void Write_Dx_l2_dma_Dma1_sram_dst_addr0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_sram_dst_addr0_DMA1_SRAM_DST_ADDR0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0 : " << ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0;
}
void Write_Dx_l2_dma_Dma1_sram_dst_addr0_DMA1_SRAM_DST_ADDR0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_SRAM_DST_ADDR1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_sram_dst_addr1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR1 : " << ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.U;
}
void Write_Dx_l2_dma_Dma1_sram_dst_addr1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_sram_dst_addr1_DMA1_SRAM_DST_ADDR1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1 : " << ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1;
}
void Write_Dx_l2_dma_Dma1_sram_dst_addr1_DMA1_SRAM_DST_ADDR1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_DMA.DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_SRAM_SRC_ADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_sram_src_addr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DMA.DMA1_SRAM_SRC_ADDR : " << ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.U;
}
void Write_Dx_l2_dma_Dma1_sram_src_addr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DMA.DMA1_SRAM_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_sram_src_addr_DMA1_SRAM_SRC_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DMA.DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR : " << ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR;
}
void Write_Dx_l2_dma_Dma1_sram_src_addr_DMA1_SRAM_SRC_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_DMA.DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_READ_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_read_size(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.U;
}
void Write_Dx_l2_dma_Dma1_read_size(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_READ_SIZE.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_read_size_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE.RESERVED1 : " << ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.RESERVED1 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.RESERVED1;
}
void Write_Dx_l2_dma_Dma1_read_size_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_READ_SIZE.DMA1_READ_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_read_size_DMA1_READ_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE.DMA1_READ_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.DMA1_READ_SIZE << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.DMA1_READ_SIZE;
}
void Write_Dx_l2_dma_Dma1_read_size_DMA1_READ_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE.DMA1_READ_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.DMA1_READ_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_READ_SIZE.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_read_size_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.RESERVED0;
}
void Write_Dx_l2_dma_Dma1_read_size_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_DMA.DMA1_READ_SIZE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_READ_SIZE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_WRITE_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_write_size(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.U;
}
void Write_Dx_l2_dma_Dma1_write_size(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_write_size_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED1 : " << ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.RESERVED1 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.RESERVED1;
}
void Write_Dx_l2_dma_Dma1_write_size_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_WRITE_SIZE.DMA1_WRITE_SIZE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_write_size_DMA1_WRITE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE.DMA1_WRITE_SIZE : " << ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.DMA1_WRITE_SIZE << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.DMA1_WRITE_SIZE;
}
void Write_Dx_l2_dma_Dma1_write_size_DMA1_WRITE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE.DMA1_WRITE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.DMA1_WRITE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma1_write_size_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.RESERVED0;
}
void Write_Dx_l2_dma_Dma1_write_size_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA1_WRITE_SIZE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA_CMD (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma_cmd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DMA.DMA_CMD : " << ((dxDX_L2_DMA_t*) base)->DMA_CMD.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA_CMD.U;
}
void Write_Dx_l2_dma_Dma_cmd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DMA.DMA_CMD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA_CMD.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA_CMD.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA_CMD.DMA_START_CMD (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma_cmd_DMA_START_CMD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DMA.DMA_CMD.DMA_START_CMD : " << ((dxDX_L2_DMA_t*) base)->DMA_CMD.DMA_START_CMD << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA_CMD.DMA_START_CMD;
}
void Write_Dx_l2_dma_Dma_cmd_DMA_START_CMD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DMA.DMA_CMD.DMA_START_CMD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA_CMD.DMA_START_CMD = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA_CMD.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma_cmd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DMA.DMA_CMD.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->DMA_CMD.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA_CMD.RESERVED0;
}
void Write_Dx_l2_dma_Dma_cmd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_DMA.DMA_CMD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA_CMD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA_STATUS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DMA.DMA_STATUS : " << ((dxDX_L2_DMA_t*) base)->DMA_STATUS.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA_STATUS.U;
}
void Write_Dx_l2_dma_Dma_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DMA.DMA_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->DMA_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.DMA_STATUS.DMA_DONE_STATUS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma_status_DMA_DONE_STATUS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DMA.DMA_STATUS.DMA_DONE_STATUS : " << ((dxDX_L2_DMA_t*) base)->DMA_STATUS.DMA_DONE_STATUS << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA_STATUS.DMA_DONE_STATUS;
}
void Write_Dx_l2_dma_Dma_status_DMA_DONE_STATUS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DMA.DMA_STATUS.DMA_DONE_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA_STATUS.DMA_DONE_STATUS = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.DMA_STATUS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Dma_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DMA.DMA_STATUS.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->DMA_STATUS.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->DMA_STATUS.RESERVED0;
}
void Write_Dx_l2_dma_Dma_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_DMA.DMA_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->DMA_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_base_addr_low(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DMA.SFR_BASE_ADDR_LOW : " << ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.U;
}
void Write_Dx_l2_dma_Sfr_base_addr_low(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DMA.SFR_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW : " << ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW;
}
void Write_Dx_l2_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_base_addr_high(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DMA.SFR_BASE_ADDR_HIGH : " << ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U;
}
void Write_Dx_l2_dma_Sfr_base_addr_high(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DMA.SFR_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH : " << ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH;
}
void Write_Dx_l2_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_ADDR_OFFS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_addr_offs(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DMA.SFR_ADDR_OFFS : " << ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.U;
}
void Write_Dx_l2_dma_Sfr_addr_offs(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DMA.SFR_ADDR_OFFS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_ADDR_OFFS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_addr_offs_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DMA.SFR_ADDR_OFFS.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.RESERVED0;
}
void Write_Dx_l2_dma_Sfr_addr_offs_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DMA.SFR_ADDR_OFFS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_addr_offs_SFR_ADDR_OFFS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS : " << ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.SFR_ADDR_OFFS << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.SFR_ADDR_OFFS;
}
void Write_Dx_l2_dma_Sfr_addr_offs_SFR_ADDR_OFFS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_ADDR_OFFS.SFR_ADDR_OFFS = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_START_ADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_start_addr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DMA.SFR_START_ADDR : " << ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.U;
}
void Write_Dx_l2_dma_Sfr_start_addr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DMA.SFR_START_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_START_ADDR.SFR_START_ADDR (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_start_addr_SFR_START_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DMA.SFR_START_ADDR.SFR_START_ADDR : " << ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.SFR_START_ADDR << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.SFR_START_ADDR;
}
void Write_Dx_l2_dma_Sfr_start_addr_SFR_START_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DMA.SFR_START_ADDR.SFR_START_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.SFR_START_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_START_ADDR.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_start_addr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DMA.SFR_START_ADDR.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.RESERVED0;
}
void Write_Dx_l2_dma_Sfr_start_addr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_DMA.SFR_START_ADDR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_START_ADDR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_MOVE_CNT (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_move_cnt(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DMA.SFR_MOVE_CNT : " << ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.U;
}
void Write_Dx_l2_dma_Sfr_move_cnt(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DMA.SFR_MOVE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_move_cnt_SFR_MOVE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT : " << ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.SFR_MOVE_CNT << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.SFR_MOVE_CNT;
}
void Write_Dx_l2_dma_Sfr_move_cnt_SFR_MOVE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.SFR_MOVE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_MOVE_CNT.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_move_cnt_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DMA.SFR_MOVE_CNT.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.RESERVED0;
}
void Write_Dx_l2_dma_Sfr_move_cnt_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_DMA.SFR_MOVE_CNT.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_MOVE_CNT.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_ID (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_id(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DMA.SFR_ID : " << ((dxDX_L2_DMA_t*) base)->SFR_ID.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_ID.U;
}
void Write_Dx_l2_dma_Sfr_id(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DMA.SFR_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_ID.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_ID.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_ID.SFR_ID (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_id_SFR_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DMA.SFR_ID.SFR_ID : " << ((dxDX_L2_DMA_t*) base)->SFR_ID.SFR_ID << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_ID.SFR_ID;
}
void Write_Dx_l2_dma_Sfr_id_SFR_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DMA.SFR_ID.SFR_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_ID.SFR_ID = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_ID.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_id_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DMA.SFR_ID.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->SFR_ID.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_ID.RESERVED0;
}
void Write_Dx_l2_dma_Sfr_id_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_DMA.SFR_ID.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_ID.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_DMA_STATUS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_dma_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DMA.SFR_DMA_STATUS : " << ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.U;
}
void Write_Dx_l2_dma_Sfr_dma_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DMA.SFR_DMA_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS : " << ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.SFR_DMA_DONE_STATUS << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.SFR_DMA_DONE_STATUS;
}
void Write_Dx_l2_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.SFR_DMA_DONE_STATUS = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.SFR_DMA_STATUS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Sfr_dma_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DMA.SFR_DMA_STATUS.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.RESERVED0;
}
void Write_Dx_l2_dma_Sfr_dma_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_DMA.SFR_DMA_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->SFR_DMA_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.MISC (Category: DMA) */
uint32_t Read_Dx_l2_dma_Misc(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC : " << ((dxDX_L2_DMA_t*) base)->MISC.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->MISC.U;
}
void Write_Dx_l2_dma_Misc(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->MISC.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->MISC.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.MISC.FLUSH_ENABLE (Category: DMA) */
uint32_t Read_Dx_l2_dma_Misc_FLUSH_ENABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC.FLUSH_ENABLE : " << ((dxDX_L2_DMA_t*) base)->MISC.FLUSH_ENABLE << std::endl;
    return ((dxDX_L2_DMA_t*) base)->MISC.FLUSH_ENABLE;
}
void Write_Dx_l2_dma_Misc_FLUSH_ENABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC.FLUSH_ENABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->MISC.FLUSH_ENABLE = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.MISC.NPU_OP_HALT (Category: DMA) */
uint32_t Read_Dx_l2_dma_Misc_NPU_OP_HALT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC.NPU_OP_HALT : " << ((dxDX_L2_DMA_t*) base)->MISC.NPU_OP_HALT << std::endl;
    return ((dxDX_L2_DMA_t*) base)->MISC.NPU_OP_HALT;
}
void Write_Dx_l2_dma_Misc_NPU_OP_HALT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC.NPU_OP_HALT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->MISC.NPU_OP_HALT = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.MISC.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Misc_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->MISC.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->MISC.RESERVED0;
}
void Write_Dx_l2_dma_Misc_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_DMA.MISC.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->MISC.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.FLUSH_STATUS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Flush_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DMA.FLUSH_STATUS : " << ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.U;
}
void Write_Dx_l2_dma_Flush_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DMA.FLUSH_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.FLUSH_STATUS.FLUSH_STATUS (Category: DMA) */
uint32_t Read_Dx_l2_dma_Flush_status_FLUSH_STATUS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DMA.FLUSH_STATUS.FLUSH_STATUS : " << ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.FLUSH_STATUS << std::endl;
    return ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.FLUSH_STATUS;
}
void Write_Dx_l2_dma_Flush_status_FLUSH_STATUS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DMA.FLUSH_STATUS.FLUSH_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.FLUSH_STATUS = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.FLUSH_STATUS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Flush_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DMA.FLUSH_STATUS.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.RESERVED0;
}
void Write_Dx_l2_dma_Flush_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_DMA.FLUSH_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->FLUSH_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DMA.AXI_CFG0 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG0.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG0.U;
}
void Write_Dx_l2_dma_Axi_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DMA.AXI_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG0.AXI_RDMA_BURST_LENGTH << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG0.AXI_RDMA_BURST_LENGTH;
}
void Write_Dx_l2_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG0.AXI_RDMA_BURST_LENGTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG0.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DMA.AXI_CFG0.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG0.RESERVED0;
}
void Write_Dx_l2_dma_Axi_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_DMA.AXI_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG1 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DMA.AXI_CFG1 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG1.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG1.U;
}
void Write_Dx_l2_dma_Axi_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DMA.AXI_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG1.AXI_WDMA_BURST_LENGTH << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG1.AXI_WDMA_BURST_LENGTH;
}
void Write_Dx_l2_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG1.AXI_WDMA_BURST_LENGTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG1.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DMA.AXI_CFG1.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG1.RESERVED0;
}
void Write_Dx_l2_dma_Axi_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_DMA.AXI_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG2 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DMA.AXI_CFG2 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG2.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG2.U;
}
void Write_Dx_l2_dma_Axi_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DMA.AXI_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_CFG2.AXI_RDMA_MO (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg2_AXI_RDMA_MO(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DMA.AXI_CFG2.AXI_RDMA_MO : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG2.AXI_RDMA_MO << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG2.AXI_RDMA_MO;
}
void Write_Dx_l2_dma_Axi_cfg2_AXI_RDMA_MO(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DMA.AXI_CFG2.AXI_RDMA_MO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG2.AXI_RDMA_MO = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG2.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DMA.AXI_CFG2.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG2.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG2.RESERVED0;
}
void Write_Dx_l2_dma_Axi_cfg2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_DMA.AXI_CFG2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG3 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DMA.AXI_CFG3 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG3.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG3.U;
}
void Write_Dx_l2_dma_Axi_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DMA.AXI_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_CFG3.AXI_WDMA_MO (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg3_AXI_WDMA_MO(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DMA.AXI_CFG3.AXI_WDMA_MO : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG3.AXI_WDMA_MO << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG3.AXI_WDMA_MO;
}
void Write_Dx_l2_dma_Axi_cfg3_AXI_WDMA_MO(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DMA.AXI_CFG3.AXI_WDMA_MO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG3.AXI_WDMA_MO = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG3.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DMA.AXI_CFG3.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG3.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG3.RESERVED0;
}
void Write_Dx_l2_dma_Axi_cfg3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_DMA.AXI_CFG3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG4 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DMA.AXI_CFG4 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG4.U << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG4.U;
}
void Write_Dx_l2_dma_Axi_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DMA.AXI_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_DMA_t*) base)->AXI_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_DMA.AXI_CFG4.AXI_4KB_BOUNDARY (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg4_AXI_4KB_BOUNDARY(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DMA.AXI_CFG4.AXI_4KB_BOUNDARY : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG4.AXI_4KB_BOUNDARY << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG4.AXI_4KB_BOUNDARY;
}
void Write_Dx_l2_dma_Axi_cfg4_AXI_4KB_BOUNDARY(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DMA.AXI_CFG4.AXI_4KB_BOUNDARY : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG4.AXI_4KB_BOUNDARY = val;
    IOMEM_BARRIER();
}

/* DX_L2_DMA.AXI_CFG4.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_l2_dma_Axi_cfg4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DMA.AXI_CFG4.RESERVED0 : " << ((dxDX_L2_DMA_t*) base)->AXI_CFG4.RESERVED0 << std::endl;
    return ((dxDX_L2_DMA_t*) base)->AXI_CFG4.RESERVED0;
}
void Write_Dx_l2_dma_Axi_cfg4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_DMA.AXI_CFG4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_DMA_t*) base)->AXI_CFG4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.U;
}
void Write_Dx_l2_npu0_Data_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->DATA_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg0_FEATURE_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.FEATURE_BIT_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.FEATURE_BIT_WIDTH;
}
void Write_Dx_l2_npu0_Data_cfg0_FEATURE_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.FEATURE_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Data_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG0.FEATURE_DATA_TYPE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg0_FEATURE_DATA_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0.FEATURE_DATA_TYPE : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.FEATURE_DATA_TYPE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.FEATURE_DATA_TYPE;
}
void Write_Dx_l2_npu0_Data_cfg0_FEATURE_DATA_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_L2_NPU0.DATA_CFG0.FEATURE_DATA_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG0.FEATURE_DATA_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.U;
}
void Write_Dx_l2_npu0_Data_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->DATA_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.DATA_CFG1.WEIGHT_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg1_WEIGHT_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.WEIGHT_BIT_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.WEIGHT_BIT_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.WEIGHT_BIT_WIDTH;
}
void Write_Dx_l2_npu0_Data_cfg1_WEIGHT_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.WEIGHT_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.WEIGHT_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG1.BIAS_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg1_BIAS_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.BIAS_BIT_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.BIAS_BIT_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.BIAS_BIT_WIDTH;
}
void Write_Dx_l2_npu0_Data_cfg1_BIAS_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.BIAS_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.BIAS_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG1.BN_COEFF_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg1_BN_COEFF_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.BN_COEFF_BIT_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.BN_COEFF_BIT_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.BN_COEFF_BIT_WIDTH;
}
void Write_Dx_l2_npu0_Data_cfg1_BN_COEFF_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.BN_COEFF_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.BN_COEFF_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.DATA_CFG1.W_FEATURE_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Data_cfg1_W_FEATURE_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.W_FEATURE_BIT_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.W_FEATURE_BIT_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.W_FEATURE_BIT_WIDTH;
}
void Write_Dx_l2_npu0_Data_cfg1_W_FEATURE_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_L2_NPU0.DATA_CFG1.W_FEATURE_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->DATA_CFG1.W_FEATURE_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.IM2COL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Im2col(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL : " << ((dxDX_L2_NPU0_t*) base)->IM2COL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->IM2COL.U;
}
void Write_Dx_l2_npu0_Im2col(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->IM2COL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->IM2COL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.IM2COL.GLB2RF_RF_WSIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Im2col_GLB2RF_RF_WSIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.GLB2RF_RF_WSIZE : " << ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_RF_WSIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_RF_WSIZE;
}
void Write_Dx_l2_npu0_Im2col_GLB2RF_RF_WSIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.GLB2RF_RF_WSIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_RF_WSIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.IM2COL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Im2col_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->IM2COL.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->IM2COL.RESERVED0;
}
void Write_Dx_l2_npu0_Im2col_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->IM2COL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.IM2COL.GLB2RF_WRITE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Im2col_GLB2RF_WRITE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.GLB2RF_WRITE : " << ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_WRITE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_WRITE;
}
void Write_Dx_l2_npu0_Im2col_GLB2RF_WRITE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.GLB2RF_WRITE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_WRITE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.IM2COL.GLB2RF_START (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Im2col_GLB2RF_START(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.GLB2RF_START : " << ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_START << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_START;
}
void Write_Dx_l2_npu0_Im2col_GLB2RF_START(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.GLB2RF_START : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->IM2COL.GLB2RF_START = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.IM2COL.IMG2COL_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Im2col_IMG2COL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.IMG2COL_EN : " << ((dxDX_L2_NPU0_t*) base)->IM2COL.IMG2COL_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->IM2COL.IMG2COL_EN;
}
void Write_Dx_l2_npu0_Im2col_IMG2COL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_L2_NPU0.IM2COL.IMG2COL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->IM2COL.IMG2COL_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL : " << ((dxDX_L2_NPU0_t*) base)->CTRL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.U;
}
void Write_Dx_l2_npu0_Ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.CTRL.WINOGRAD_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_WINOGRAD_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.WINOGRAD_EN : " << ((dxDX_L2_NPU0_t*) base)->CTRL.WINOGRAD_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.WINOGRAD_EN;
}
void Write_Dx_l2_npu0_Ctrl_WINOGRAD_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.WINOGRAD_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.WINOGRAD_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL.FEATURE_COMPRESS_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_FEATURE_COMPRESS_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.FEATURE_COMPRESS_EN : " << ((dxDX_L2_NPU0_t*) base)->CTRL.FEATURE_COMPRESS_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.FEATURE_COMPRESS_EN;
}
void Write_Dx_l2_npu0_Ctrl_FEATURE_COMPRESS_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.FEATURE_COMPRESS_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.FEATURE_COMPRESS_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL.WEIGHT_COMPRESS_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_WEIGHT_COMPRESS_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.WEIGHT_COMPRESS_EN : " << ((dxDX_L2_NPU0_t*) base)->CTRL.WEIGHT_COMPRESS_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.WEIGHT_COMPRESS_EN;
}
void Write_Dx_l2_npu0_Ctrl_WEIGHT_COMPRESS_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.WEIGHT_COMPRESS_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.WEIGHT_COMPRESS_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL.SKIP_CONNECTION_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.SKIP_CONNECTION_EN : " << ((dxDX_L2_NPU0_t*) base)->CTRL.SKIP_CONNECTION_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.SKIP_CONNECTION_EN;
}
void Write_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.SKIP_CONNECTION_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.SKIP_CONNECTION_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL.SKIP_CONNECTION_TYPE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.SKIP_CONNECTION_TYPE : " << ((dxDX_L2_NPU0_t*) base)->CTRL.SKIP_CONNECTION_TYPE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.SKIP_CONNECTION_TYPE;
}
void Write_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.SKIP_CONNECTION_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.SKIP_CONNECTION_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL.RESIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_RESIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.RESIZE : " << ((dxDX_L2_NPU0_t*) base)->CTRL.RESIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.RESIZE;
}
void Write_Dx_l2_npu0_Ctrl_RESIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.RESIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.RESIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->CTRL.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->CTRL.RESERVED0;
}
void Write_Dx_l2_npu0_Ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_L2_NPU0.CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.MISC (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Misc(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_NPU0.MISC : " << ((dxDX_L2_NPU0_t*) base)->MISC.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->MISC.U;
}
void Write_Dx_l2_npu0_Misc(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_NPU0.MISC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->MISC.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->MISC.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.MISC.TILE_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Misc_TILE_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_NPU0.MISC.TILE_NUM : " << ((dxDX_L2_NPU0_t*) base)->MISC.TILE_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->MISC.TILE_NUM;
}
void Write_Dx_l2_npu0_Misc_TILE_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_NPU0.MISC.TILE_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->MISC.TILE_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.MISC.LAYER_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Misc_LAYER_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_NPU0.MISC.LAYER_NUM : " << ((dxDX_L2_NPU0_t*) base)->MISC.LAYER_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->MISC.LAYER_NUM;
}
void Write_Dx_l2_npu0_Misc_LAYER_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_L2_NPU0.MISC.LAYER_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->MISC.LAYER_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.ACTIVE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Active(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE : " << ((dxDX_L2_NPU0_t*) base)->ACTIVE.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->ACTIVE.U;
}
void Write_Dx_l2_npu0_Active(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->ACTIVE.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->ACTIVE.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.ACTIVE.ACTIVE_CNT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Active_ACTIVE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE.ACTIVE_CNT : " << ((dxDX_L2_NPU0_t*) base)->ACTIVE.ACTIVE_CNT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->ACTIVE.ACTIVE_CNT;
}
void Write_Dx_l2_npu0_Active_ACTIVE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE.ACTIVE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->ACTIVE.ACTIVE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.ACTIVE.ACTIVE_PERIOD (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Active_ACTIVE_PERIOD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE.ACTIVE_PERIOD : " << ((dxDX_L2_NPU0_t*) base)->ACTIVE.ACTIVE_PERIOD << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->ACTIVE.ACTIVE_PERIOD;
}
void Write_Dx_l2_npu0_Active_ACTIVE_PERIOD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE.ACTIVE_PERIOD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->ACTIVE.ACTIVE_PERIOD = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.ACTIVE.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Active_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->ACTIVE.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->ACTIVE.RESERVED0;
}
void Write_Dx_l2_npu0_Active_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_L2_NPU0.ACTIVE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->ACTIVE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_NPU0.RSVD0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD0.U;
}
void Write_Dx_l2_npu0_Rsvd0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_NPU0.RSVD0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_NPU0.RSVD0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD0.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_L2_NPU0.RSVD0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.U;
}
void Write_Dx_l2_npu0_Sfu_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_CTRL.PRE_ACT_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_PRE_ACT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.PRE_ACT_MODE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_ACT_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_ACT_MODE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_PRE_ACT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.PRE_ACT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_ACT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.PRE_MULT_COEFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_PRE_MULT_COEFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.PRE_MULT_COEFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_MULT_COEFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_MULT_COEFF_SEL;
}
void Write_Dx_l2_npu0_Sfu_ctrl_PRE_MULT_COEFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.PRE_MULT_COEFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_MULT_COEFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.ACT_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_ACT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ACT_MODE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ACT_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ACT_MODE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_ACT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ACT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ACT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.ACT_INOUT_CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_ACT_INOUT_CTRL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ACT_INOUT_CTRL : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ACT_INOUT_CTRL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ACT_INOUT_CTRL;
}
void Write_Dx_l2_npu0_Sfu_ctrl_ACT_INOUT_CTRL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ACT_INOUT_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ACT_INOUT_CTRL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.POST_ACT_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_POST_ACT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.POST_ACT_MODE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POST_ACT_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POST_ACT_MODE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_POST_ACT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.POST_ACT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POST_ACT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.SKIP_IN_TYPE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_SKIP_IN_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.SKIP_IN_TYPE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SKIP_IN_TYPE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SKIP_IN_TYPE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_SKIP_IN_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.SKIP_IN_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SKIP_IN_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.FLOAT2INT_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_FLOAT2INT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.FLOAT2INT_MODE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.FLOAT2INT_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.FLOAT2INT_MODE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_FLOAT2INT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.FLOAT2INT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.FLOAT2INT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.POOL_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_POOL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.POOL_MODE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POOL_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POOL_MODE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_POOL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.POOL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POOL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.POOL_WINSIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_POOL_WINSIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.POOL_WINSIZE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POOL_WINSIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POOL_WINSIZE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_POOL_WINSIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.POOL_WINSIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.POOL_WINSIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.PRE_ADD_COEFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_PRE_ADD_COEFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.PRE_ADD_COEFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_ADD_COEFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_ADD_COEFF_SEL;
}
void Write_Dx_l2_npu0_Sfu_ctrl_PRE_ADD_COEFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.PRE_ADD_COEFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.PRE_ADD_COEFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.SE_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_SE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.SE_EN : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SE_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SE_EN;
}
void Write_Dx_l2_npu0_Sfu_ctrl_SE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.SE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SE_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.SE_WRITE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_SE_WRITE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.SE_WRITE : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SE_WRITE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SE_WRITE;
}
void Write_Dx_l2_npu0_Sfu_ctrl_SE_WRITE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.SE_WRITE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.SE_WRITE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.ARG_MAX_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_ARG_MAX_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ARG_MAX_EN : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ARG_MAX_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ARG_MAX_EN;
}
void Write_Dx_l2_npu0_Sfu_ctrl_ARG_MAX_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ARG_MAX_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ARG_MAX_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CTRL.ARG_CLASS_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_ctrl_ARG_CLASS_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ARG_CLASS_NUM : " << ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ARG_CLASS_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ARG_CLASS_NUM;
}
void Write_Dx_l2_npu0_Sfu_ctrl_ARG_CLASS_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_L2_NPU0.SFU_CTRL.ARG_CLASS_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CTRL.ARG_CLASS_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CLIP_MAX (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_clip_max(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_NPU0.SFU_CLIP_MAX : " << ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.U;
}
void Write_Dx_l2_npu0_Sfu_clip_max(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_NPU0.SFU_CLIP_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_CLIP_MAX.CLIP_MAX (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_clip_max_CLIP_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_NPU0.SFU_CLIP_MAX.CLIP_MAX : " << ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.CLIP_MAX << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.CLIP_MAX;
}
void Write_Dx_l2_npu0_Sfu_clip_max_CLIP_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_L2_NPU0.SFU_CLIP_MAX.CLIP_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MAX.CLIP_MAX = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_CLIP_MIN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_clip_min(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_NPU0.SFU_CLIP_MIN : " << ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.U;
}
void Write_Dx_l2_npu0_Sfu_clip_min(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_NPU0.SFU_CLIP_MIN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_CLIP_MIN.CLIP_MIN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_clip_min_CLIP_MIN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_NPU0.SFU_CLIP_MIN.CLIP_MIN : " << ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.CLIP_MIN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.CLIP_MIN;
}
void Write_Dx_l2_npu0_Sfu_clip_min_CLIP_MIN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_L2_NPU0.SFU_CLIP_MIN.CLIP_MIN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_CLIP_MIN.CLIP_MIN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_NPU0.SFU_COEFF0 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.U;
}
void Write_Dx_l2_npu0_Sfu_coeff0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_NPU0.SFU_COEFF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_NPU0.SFU_COEFF0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.RESERVED0;
}
void Write_Dx_l2_npu0_Sfu_coeff0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_L2_NPU0.SFU_COEFF0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_NPU0.SFU_COEFF1 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.U;
}
void Write_Dx_l2_npu0_Sfu_coeff1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_NPU0.SFU_COEFF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF1.PRE_ACT_MULT_COEFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff1_PRE_ACT_MULT_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_NPU0.SFU_COEFF1.PRE_ACT_MULT_COEFF : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.PRE_ACT_MULT_COEFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.PRE_ACT_MULT_COEFF;
}
void Write_Dx_l2_npu0_Sfu_coeff1_PRE_ACT_MULT_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_L2_NPU0.SFU_COEFF1.PRE_ACT_MULT_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF1.PRE_ACT_MULT_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_NPU0.SFU_COEFF2 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.U;
}
void Write_Dx_l2_npu0_Sfu_coeff2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_NPU0.SFU_COEFF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF2.PRE_ACT_ADD_COEFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff2_PRE_ACT_ADD_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_NPU0.SFU_COEFF2.PRE_ACT_ADD_COEFF : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.PRE_ACT_ADD_COEFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.PRE_ACT_ADD_COEFF;
}
void Write_Dx_l2_npu0_Sfu_coeff2_PRE_ACT_ADD_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_L2_NPU0.SFU_COEFF2.PRE_ACT_ADD_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF2.PRE_ACT_ADD_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_NPU0.SFU_COEFF3 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.U;
}
void Write_Dx_l2_npu0_Sfu_coeff3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_NPU0.SFU_COEFF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF3.AVG_POOL_MULT_COEFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff3_AVG_POOL_MULT_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_NPU0.SFU_COEFF3.AVG_POOL_MULT_COEFF : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.AVG_POOL_MULT_COEFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.AVG_POOL_MULT_COEFF;
}
void Write_Dx_l2_npu0_Sfu_coeff3_AVG_POOL_MULT_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_L2_NPU0.SFU_COEFF3.AVG_POOL_MULT_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF3.AVG_POOL_MULT_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_NPU0.SFU_COEFF4 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.U;
}
void Write_Dx_l2_npu0_Sfu_coeff4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_NPU0.SFU_COEFF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF4.ACT_OFFSET_VAL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff4_ACT_OFFSET_VAL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_NPU0.SFU_COEFF4.ACT_OFFSET_VAL : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.ACT_OFFSET_VAL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.ACT_OFFSET_VAL;
}
void Write_Dx_l2_npu0_Sfu_coeff4_ACT_OFFSET_VAL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_L2_NPU0.SFU_COEFF4.ACT_OFFSET_VAL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF4.ACT_OFFSET_VAL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_NPU0.SFU_COEFF5 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.U;
}
void Write_Dx_l2_npu0_Sfu_coeff5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_NPU0.SFU_COEFF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF5.SKIP_SCALE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff5_SKIP_SCALE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_NPU0.SFU_COEFF5.SKIP_SCALE : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.SKIP_SCALE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.SKIP_SCALE;
}
void Write_Dx_l2_npu0_Sfu_coeff5_SKIP_SCALE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_L2_NPU0.SFU_COEFF5.SKIP_SCALE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF5.SKIP_SCALE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_NPU0.SFU_COEFF6 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.U;
}
void Write_Dx_l2_npu0_Sfu_coeff6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_NPU0.SFU_COEFF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF6.LEAKY_RELU_SLOPE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff6_LEAKY_RELU_SLOPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_NPU0.SFU_COEFF6.LEAKY_RELU_SLOPE : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.LEAKY_RELU_SLOPE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.LEAKY_RELU_SLOPE;
}
void Write_Dx_l2_npu0_Sfu_coeff6_LEAKY_RELU_SLOPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_L2_NPU0.SFU_COEFF6.LEAKY_RELU_SLOPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF6.LEAKY_RELU_SLOPE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_NPU0.SFU_COEFF7 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.U;
}
void Write_Dx_l2_npu0_Sfu_coeff7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_NPU0.SFU_COEFF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF7.RELU6_CLIP_MAX (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff7_RELU6_CLIP_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_NPU0.SFU_COEFF7.RELU6_CLIP_MAX : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.RELU6_CLIP_MAX << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.RELU6_CLIP_MAX;
}
void Write_Dx_l2_npu0_Sfu_coeff7_RELU6_CLIP_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_L2_NPU0.SFU_COEFF7.RELU6_CLIP_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF7.RELU6_CLIP_MAX = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_NPU0.SFU_COEFF8 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.U;
}
void Write_Dx_l2_npu0_Sfu_coeff8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_NPU0.SFU_COEFF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF8.PAF_BOUNDARY0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff8_PAF_BOUNDARY0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_NPU0.SFU_COEFF8.PAF_BOUNDARY0 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.PAF_BOUNDARY0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.PAF_BOUNDARY0;
}
void Write_Dx_l2_npu0_Sfu_coeff8_PAF_BOUNDARY0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_L2_NPU0.SFU_COEFF8.PAF_BOUNDARY0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF8.PAF_BOUNDARY0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF9 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_NPU0.SFU_COEFF9 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.U;
}
void Write_Dx_l2_npu0_Sfu_coeff9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_NPU0.SFU_COEFF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF9.PAF_BOUNDARY1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff9_PAF_BOUNDARY1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_NPU0.SFU_COEFF9.PAF_BOUNDARY1 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.PAF_BOUNDARY1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.PAF_BOUNDARY1;
}
void Write_Dx_l2_npu0_Sfu_coeff9_PAF_BOUNDARY1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_L2_NPU0.SFU_COEFF9.PAF_BOUNDARY1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF9.PAF_BOUNDARY1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF10 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_NPU0.SFU_COEFF10 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.U;
}
void Write_Dx_l2_npu0_Sfu_coeff10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_NPU0.SFU_COEFF10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF10.PAF_BOUNDARY2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff10_PAF_BOUNDARY2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_NPU0.SFU_COEFF10.PAF_BOUNDARY2 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.PAF_BOUNDARY2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.PAF_BOUNDARY2;
}
void Write_Dx_l2_npu0_Sfu_coeff10_PAF_BOUNDARY2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_L2_NPU0.SFU_COEFF10.PAF_BOUNDARY2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF10.PAF_BOUNDARY2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF11 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_NPU0.SFU_COEFF11 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.U;
}
void Write_Dx_l2_npu0_Sfu_coeff11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_NPU0.SFU_COEFF11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF11.PAF_BOUNDARY3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff11_PAF_BOUNDARY3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_NPU0.SFU_COEFF11.PAF_BOUNDARY3 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.PAF_BOUNDARY3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.PAF_BOUNDARY3;
}
void Write_Dx_l2_npu0_Sfu_coeff11_PAF_BOUNDARY3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_L2_NPU0.SFU_COEFF11.PAF_BOUNDARY3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF11.PAF_BOUNDARY3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF12 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_NPU0.SFU_COEFF12 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.U;
}
void Write_Dx_l2_npu0_Sfu_coeff12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_NPU0.SFU_COEFF12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF12.PAF_BOUNDARY4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff12_PAF_BOUNDARY4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_NPU0.SFU_COEFF12.PAF_BOUNDARY4 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.PAF_BOUNDARY4 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.PAF_BOUNDARY4;
}
void Write_Dx_l2_npu0_Sfu_coeff12_PAF_BOUNDARY4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_L2_NPU0.SFU_COEFF12.PAF_BOUNDARY4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF12.PAF_BOUNDARY4 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF13 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_NPU0.SFU_COEFF13 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.U;
}
void Write_Dx_l2_npu0_Sfu_coeff13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_NPU0.SFU_COEFF13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF13.PAF_BOUNDARY5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff13_PAF_BOUNDARY5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_NPU0.SFU_COEFF13.PAF_BOUNDARY5 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.PAF_BOUNDARY5 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.PAF_BOUNDARY5;
}
void Write_Dx_l2_npu0_Sfu_coeff13_PAF_BOUNDARY5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_L2_NPU0.SFU_COEFF13.PAF_BOUNDARY5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF13.PAF_BOUNDARY5 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF14 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_NPU0.SFU_COEFF14 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.U;
}
void Write_Dx_l2_npu0_Sfu_coeff14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_NPU0.SFU_COEFF14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF14.PAF_BOUNDARY6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff14_PAF_BOUNDARY6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_NPU0.SFU_COEFF14.PAF_BOUNDARY6 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.PAF_BOUNDARY6 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.PAF_BOUNDARY6;
}
void Write_Dx_l2_npu0_Sfu_coeff14_PAF_BOUNDARY6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_L2_NPU0.SFU_COEFF14.PAF_BOUNDARY6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF14.PAF_BOUNDARY6 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF15 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_NPU0.SFU_COEFF15 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.U;
}
void Write_Dx_l2_npu0_Sfu_coeff15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_NPU0.SFU_COEFF15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF15.PAF_BOUNDARY7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff15_PAF_BOUNDARY7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_NPU0.SFU_COEFF15.PAF_BOUNDARY7 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.PAF_BOUNDARY7 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.PAF_BOUNDARY7;
}
void Write_Dx_l2_npu0_Sfu_coeff15_PAF_BOUNDARY7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_L2_NPU0.SFU_COEFF15.PAF_BOUNDARY7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF15.PAF_BOUNDARY7 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF16 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_NPU0.SFU_COEFF16 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.U;
}
void Write_Dx_l2_npu0_Sfu_coeff16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_NPU0.SFU_COEFF16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF16.PAF_BOUNDARY8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff16_PAF_BOUNDARY8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_NPU0.SFU_COEFF16.PAF_BOUNDARY8 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.PAF_BOUNDARY8 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.PAF_BOUNDARY8;
}
void Write_Dx_l2_npu0_Sfu_coeff16_PAF_BOUNDARY8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_L2_NPU0.SFU_COEFF16.PAF_BOUNDARY8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF16.PAF_BOUNDARY8 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF17 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_NPU0.SFU_COEFF17 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.U;
}
void Write_Dx_l2_npu0_Sfu_coeff17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_NPU0.SFU_COEFF17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF17.PAF_BOUNDARY9 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff17_PAF_BOUNDARY9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_NPU0.SFU_COEFF17.PAF_BOUNDARY9 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.PAF_BOUNDARY9 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.PAF_BOUNDARY9;
}
void Write_Dx_l2_npu0_Sfu_coeff17_PAF_BOUNDARY9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_L2_NPU0.SFU_COEFF17.PAF_BOUNDARY9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF17.PAF_BOUNDARY9 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF18 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_NPU0.SFU_COEFF18 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.U;
}
void Write_Dx_l2_npu0_Sfu_coeff18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_NPU0.SFU_COEFF18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF18.PAF_BOUNDARY10 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff18_PAF_BOUNDARY10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_NPU0.SFU_COEFF18.PAF_BOUNDARY10 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.PAF_BOUNDARY10 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.PAF_BOUNDARY10;
}
void Write_Dx_l2_npu0_Sfu_coeff18_PAF_BOUNDARY10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_L2_NPU0.SFU_COEFF18.PAF_BOUNDARY10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF18.PAF_BOUNDARY10 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF19 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_NPU0.SFU_COEFF19 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.U;
}
void Write_Dx_l2_npu0_Sfu_coeff19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_NPU0.SFU_COEFF19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF19.PAF_BOUNDARY11 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff19_PAF_BOUNDARY11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_NPU0.SFU_COEFF19.PAF_BOUNDARY11 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.PAF_BOUNDARY11 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.PAF_BOUNDARY11;
}
void Write_Dx_l2_npu0_Sfu_coeff19_PAF_BOUNDARY11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_L2_NPU0.SFU_COEFF19.PAF_BOUNDARY11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF19.PAF_BOUNDARY11 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF20 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_NPU0.SFU_COEFF20 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.U;
}
void Write_Dx_l2_npu0_Sfu_coeff20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_NPU0.SFU_COEFF20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF20.PAF_BOUNDARY12 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff20_PAF_BOUNDARY12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_NPU0.SFU_COEFF20.PAF_BOUNDARY12 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.PAF_BOUNDARY12 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.PAF_BOUNDARY12;
}
void Write_Dx_l2_npu0_Sfu_coeff20_PAF_BOUNDARY12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_L2_NPU0.SFU_COEFF20.PAF_BOUNDARY12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF20.PAF_BOUNDARY12 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF21 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_NPU0.SFU_COEFF21 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.U;
}
void Write_Dx_l2_npu0_Sfu_coeff21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_NPU0.SFU_COEFF21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF21.PAF_BOUNDARY13 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff21_PAF_BOUNDARY13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_NPU0.SFU_COEFF21.PAF_BOUNDARY13 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.PAF_BOUNDARY13 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.PAF_BOUNDARY13;
}
void Write_Dx_l2_npu0_Sfu_coeff21_PAF_BOUNDARY13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_L2_NPU0.SFU_COEFF21.PAF_BOUNDARY13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF21.PAF_BOUNDARY13 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF22 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_NPU0.SFU_COEFF22 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.U;
}
void Write_Dx_l2_npu0_Sfu_coeff22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_NPU0.SFU_COEFF22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF22.PAF_BOUNDARY14 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff22_PAF_BOUNDARY14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_NPU0.SFU_COEFF22.PAF_BOUNDARY14 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.PAF_BOUNDARY14 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.PAF_BOUNDARY14;
}
void Write_Dx_l2_npu0_Sfu_coeff22_PAF_BOUNDARY14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_L2_NPU0.SFU_COEFF22.PAF_BOUNDARY14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF22.PAF_BOUNDARY14 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF23 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_NPU0.SFU_COEFF23 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.U;
}
void Write_Dx_l2_npu0_Sfu_coeff23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_NPU0.SFU_COEFF23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF23.PAF_MULT_COEFF0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff23_PAF_MULT_COEFF0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_NPU0.SFU_COEFF23.PAF_MULT_COEFF0 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.PAF_MULT_COEFF0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.PAF_MULT_COEFF0;
}
void Write_Dx_l2_npu0_Sfu_coeff23_PAF_MULT_COEFF0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_L2_NPU0.SFU_COEFF23.PAF_MULT_COEFF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF23.PAF_MULT_COEFF0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF24 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_NPU0.SFU_COEFF24 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.U;
}
void Write_Dx_l2_npu0_Sfu_coeff24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_NPU0.SFU_COEFF24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF24.PAF_MULT_COEFF1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff24_PAF_MULT_COEFF1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_NPU0.SFU_COEFF24.PAF_MULT_COEFF1 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.PAF_MULT_COEFF1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.PAF_MULT_COEFF1;
}
void Write_Dx_l2_npu0_Sfu_coeff24_PAF_MULT_COEFF1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_L2_NPU0.SFU_COEFF24.PAF_MULT_COEFF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF24.PAF_MULT_COEFF1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF25 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_NPU0.SFU_COEFF25 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.U;
}
void Write_Dx_l2_npu0_Sfu_coeff25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_NPU0.SFU_COEFF25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF25.PAF_MULT_COEFF2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff25_PAF_MULT_COEFF2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_NPU0.SFU_COEFF25.PAF_MULT_COEFF2 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.PAF_MULT_COEFF2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.PAF_MULT_COEFF2;
}
void Write_Dx_l2_npu0_Sfu_coeff25_PAF_MULT_COEFF2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_L2_NPU0.SFU_COEFF25.PAF_MULT_COEFF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF25.PAF_MULT_COEFF2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF26 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff26(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_L2_NPU0.SFU_COEFF26 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.U;
}
void Write_Dx_l2_npu0_Sfu_coeff26(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_L2_NPU0.SFU_COEFF26 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF26.PAF_MULT_COEFF3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff26_PAF_MULT_COEFF3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_L2_NPU0.SFU_COEFF26.PAF_MULT_COEFF3 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.PAF_MULT_COEFF3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.PAF_MULT_COEFF3;
}
void Write_Dx_l2_npu0_Sfu_coeff26_PAF_MULT_COEFF3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_L2_NPU0.SFU_COEFF26.PAF_MULT_COEFF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF26.PAF_MULT_COEFF3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF27 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff27(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_L2_NPU0.SFU_COEFF27 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.U;
}
void Write_Dx_l2_npu0_Sfu_coeff27(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_L2_NPU0.SFU_COEFF27 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF27.PAF_MULT_COEFF4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff27_PAF_MULT_COEFF4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_L2_NPU0.SFU_COEFF27.PAF_MULT_COEFF4 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.PAF_MULT_COEFF4 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.PAF_MULT_COEFF4;
}
void Write_Dx_l2_npu0_Sfu_coeff27_PAF_MULT_COEFF4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_L2_NPU0.SFU_COEFF27.PAF_MULT_COEFF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF27.PAF_MULT_COEFF4 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF28 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff28(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_L2_NPU0.SFU_COEFF28 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.U;
}
void Write_Dx_l2_npu0_Sfu_coeff28(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_L2_NPU0.SFU_COEFF28 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF28.PAF_MULT_COEFF5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff28_PAF_MULT_COEFF5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_L2_NPU0.SFU_COEFF28.PAF_MULT_COEFF5 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.PAF_MULT_COEFF5 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.PAF_MULT_COEFF5;
}
void Write_Dx_l2_npu0_Sfu_coeff28_PAF_MULT_COEFF5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_L2_NPU0.SFU_COEFF28.PAF_MULT_COEFF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF28.PAF_MULT_COEFF5 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF29 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff29(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_L2_NPU0.SFU_COEFF29 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.U;
}
void Write_Dx_l2_npu0_Sfu_coeff29(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_L2_NPU0.SFU_COEFF29 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF29.PAF_MULT_COEFF6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff29_PAF_MULT_COEFF6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_L2_NPU0.SFU_COEFF29.PAF_MULT_COEFF6 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.PAF_MULT_COEFF6 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.PAF_MULT_COEFF6;
}
void Write_Dx_l2_npu0_Sfu_coeff29_PAF_MULT_COEFF6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_L2_NPU0.SFU_COEFF29.PAF_MULT_COEFF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF29.PAF_MULT_COEFF6 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF30 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff30(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_L2_NPU0.SFU_COEFF30 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.U;
}
void Write_Dx_l2_npu0_Sfu_coeff30(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_L2_NPU0.SFU_COEFF30 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF30.PAF_MULT_COEFF7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff30_PAF_MULT_COEFF7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_L2_NPU0.SFU_COEFF30.PAF_MULT_COEFF7 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.PAF_MULT_COEFF7 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.PAF_MULT_COEFF7;
}
void Write_Dx_l2_npu0_Sfu_coeff30_PAF_MULT_COEFF7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_L2_NPU0.SFU_COEFF30.PAF_MULT_COEFF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF30.PAF_MULT_COEFF7 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF31 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff31(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_L2_NPU0.SFU_COEFF31 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.U;
}
void Write_Dx_l2_npu0_Sfu_coeff31(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_L2_NPU0.SFU_COEFF31 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF31.PAF_MULT_COEFF8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff31_PAF_MULT_COEFF8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_L2_NPU0.SFU_COEFF31.PAF_MULT_COEFF8 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.PAF_MULT_COEFF8 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.PAF_MULT_COEFF8;
}
void Write_Dx_l2_npu0_Sfu_coeff31_PAF_MULT_COEFF8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_L2_NPU0.SFU_COEFF31.PAF_MULT_COEFF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF31.PAF_MULT_COEFF8 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF32 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff32(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_L2_NPU0.SFU_COEFF32 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.U;
}
void Write_Dx_l2_npu0_Sfu_coeff32(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_L2_NPU0.SFU_COEFF32 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF32.PAF_MULT_COEFF9 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff32_PAF_MULT_COEFF9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_L2_NPU0.SFU_COEFF32.PAF_MULT_COEFF9 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.PAF_MULT_COEFF9 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.PAF_MULT_COEFF9;
}
void Write_Dx_l2_npu0_Sfu_coeff32_PAF_MULT_COEFF9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_L2_NPU0.SFU_COEFF32.PAF_MULT_COEFF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF32.PAF_MULT_COEFF9 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF33 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff33(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_L2_NPU0.SFU_COEFF33 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.U;
}
void Write_Dx_l2_npu0_Sfu_coeff33(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_L2_NPU0.SFU_COEFF33 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF33.PAF_MULT_COEFF10 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff33_PAF_MULT_COEFF10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_L2_NPU0.SFU_COEFF33.PAF_MULT_COEFF10 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.PAF_MULT_COEFF10 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.PAF_MULT_COEFF10;
}
void Write_Dx_l2_npu0_Sfu_coeff33_PAF_MULT_COEFF10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_L2_NPU0.SFU_COEFF33.PAF_MULT_COEFF10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF33.PAF_MULT_COEFF10 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF34 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff34(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_L2_NPU0.SFU_COEFF34 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.U;
}
void Write_Dx_l2_npu0_Sfu_coeff34(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_L2_NPU0.SFU_COEFF34 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF34.PAF_MULT_COEFF11 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff34_PAF_MULT_COEFF11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_L2_NPU0.SFU_COEFF34.PAF_MULT_COEFF11 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.PAF_MULT_COEFF11 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.PAF_MULT_COEFF11;
}
void Write_Dx_l2_npu0_Sfu_coeff34_PAF_MULT_COEFF11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_L2_NPU0.SFU_COEFF34.PAF_MULT_COEFF11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF34.PAF_MULT_COEFF11 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF35 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff35(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_L2_NPU0.SFU_COEFF35 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.U;
}
void Write_Dx_l2_npu0_Sfu_coeff35(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_L2_NPU0.SFU_COEFF35 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF35.PAF_MULT_COEFF12 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff35_PAF_MULT_COEFF12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_L2_NPU0.SFU_COEFF35.PAF_MULT_COEFF12 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.PAF_MULT_COEFF12 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.PAF_MULT_COEFF12;
}
void Write_Dx_l2_npu0_Sfu_coeff35_PAF_MULT_COEFF12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_L2_NPU0.SFU_COEFF35.PAF_MULT_COEFF12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF35.PAF_MULT_COEFF12 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF36 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff36(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_L2_NPU0.SFU_COEFF36 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.U;
}
void Write_Dx_l2_npu0_Sfu_coeff36(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_L2_NPU0.SFU_COEFF36 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF36.PAF_MULT_COEFF13 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff36_PAF_MULT_COEFF13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_L2_NPU0.SFU_COEFF36.PAF_MULT_COEFF13 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.PAF_MULT_COEFF13 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.PAF_MULT_COEFF13;
}
void Write_Dx_l2_npu0_Sfu_coeff36_PAF_MULT_COEFF13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_L2_NPU0.SFU_COEFF36.PAF_MULT_COEFF13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF36.PAF_MULT_COEFF13 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF37 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff37(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_L2_NPU0.SFU_COEFF37 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.U;
}
void Write_Dx_l2_npu0_Sfu_coeff37(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_L2_NPU0.SFU_COEFF37 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF37.PAF_MULT_COEFF14 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff37_PAF_MULT_COEFF14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_L2_NPU0.SFU_COEFF37.PAF_MULT_COEFF14 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.PAF_MULT_COEFF14 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.PAF_MULT_COEFF14;
}
void Write_Dx_l2_npu0_Sfu_coeff37_PAF_MULT_COEFF14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_L2_NPU0.SFU_COEFF37.PAF_MULT_COEFF14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF37.PAF_MULT_COEFF14 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF38 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff38(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_L2_NPU0.SFU_COEFF38 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.U;
}
void Write_Dx_l2_npu0_Sfu_coeff38(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_L2_NPU0.SFU_COEFF38 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF38.PAF_MULT_COEFF15 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff38_PAF_MULT_COEFF15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_L2_NPU0.SFU_COEFF38.PAF_MULT_COEFF15 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.PAF_MULT_COEFF15 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.PAF_MULT_COEFF15;
}
void Write_Dx_l2_npu0_Sfu_coeff38_PAF_MULT_COEFF15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_L2_NPU0.SFU_COEFF38.PAF_MULT_COEFF15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF38.PAF_MULT_COEFF15 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF39 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff39(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_L2_NPU0.SFU_COEFF39 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.U;
}
void Write_Dx_l2_npu0_Sfu_coeff39(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_L2_NPU0.SFU_COEFF39 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF39.PAF_ADD_COEFF0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff39_PAF_ADD_COEFF0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_L2_NPU0.SFU_COEFF39.PAF_ADD_COEFF0 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.PAF_ADD_COEFF0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.PAF_ADD_COEFF0;
}
void Write_Dx_l2_npu0_Sfu_coeff39_PAF_ADD_COEFF0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_L2_NPU0.SFU_COEFF39.PAF_ADD_COEFF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF39.PAF_ADD_COEFF0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF40 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff40(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_L2_NPU0.SFU_COEFF40 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.U;
}
void Write_Dx_l2_npu0_Sfu_coeff40(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_L2_NPU0.SFU_COEFF40 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF40.PAF_ADD_COEFF1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff40_PAF_ADD_COEFF1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_L2_NPU0.SFU_COEFF40.PAF_ADD_COEFF1 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.PAF_ADD_COEFF1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.PAF_ADD_COEFF1;
}
void Write_Dx_l2_npu0_Sfu_coeff40_PAF_ADD_COEFF1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_L2_NPU0.SFU_COEFF40.PAF_ADD_COEFF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF40.PAF_ADD_COEFF1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF41 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff41(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_L2_NPU0.SFU_COEFF41 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.U;
}
void Write_Dx_l2_npu0_Sfu_coeff41(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_L2_NPU0.SFU_COEFF41 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF41.PAF_ADD_COEFF2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff41_PAF_ADD_COEFF2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_L2_NPU0.SFU_COEFF41.PAF_ADD_COEFF2 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.PAF_ADD_COEFF2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.PAF_ADD_COEFF2;
}
void Write_Dx_l2_npu0_Sfu_coeff41_PAF_ADD_COEFF2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_L2_NPU0.SFU_COEFF41.PAF_ADD_COEFF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF41.PAF_ADD_COEFF2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF42 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff42(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_L2_NPU0.SFU_COEFF42 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.U;
}
void Write_Dx_l2_npu0_Sfu_coeff42(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_L2_NPU0.SFU_COEFF42 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF42.PAF_ADD_COEFF3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff42_PAF_ADD_COEFF3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_L2_NPU0.SFU_COEFF42.PAF_ADD_COEFF3 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.PAF_ADD_COEFF3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.PAF_ADD_COEFF3;
}
void Write_Dx_l2_npu0_Sfu_coeff42_PAF_ADD_COEFF3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_L2_NPU0.SFU_COEFF42.PAF_ADD_COEFF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF42.PAF_ADD_COEFF3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF43 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff43(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_L2_NPU0.SFU_COEFF43 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.U;
}
void Write_Dx_l2_npu0_Sfu_coeff43(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_L2_NPU0.SFU_COEFF43 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF43.PAF_ADD_COEFF4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff43_PAF_ADD_COEFF4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_L2_NPU0.SFU_COEFF43.PAF_ADD_COEFF4 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.PAF_ADD_COEFF4 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.PAF_ADD_COEFF4;
}
void Write_Dx_l2_npu0_Sfu_coeff43_PAF_ADD_COEFF4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_L2_NPU0.SFU_COEFF43.PAF_ADD_COEFF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF43.PAF_ADD_COEFF4 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF44 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff44(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_L2_NPU0.SFU_COEFF44 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.U;
}
void Write_Dx_l2_npu0_Sfu_coeff44(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_L2_NPU0.SFU_COEFF44 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF44.PAF_ADD_COEFF5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff44_PAF_ADD_COEFF5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_L2_NPU0.SFU_COEFF44.PAF_ADD_COEFF5 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.PAF_ADD_COEFF5 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.PAF_ADD_COEFF5;
}
void Write_Dx_l2_npu0_Sfu_coeff44_PAF_ADD_COEFF5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_L2_NPU0.SFU_COEFF44.PAF_ADD_COEFF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF44.PAF_ADD_COEFF5 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF45 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff45(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_L2_NPU0.SFU_COEFF45 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.U;
}
void Write_Dx_l2_npu0_Sfu_coeff45(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_L2_NPU0.SFU_COEFF45 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF45.PAF_ADD_COEFF6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff45_PAF_ADD_COEFF6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_L2_NPU0.SFU_COEFF45.PAF_ADD_COEFF6 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.PAF_ADD_COEFF6 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.PAF_ADD_COEFF6;
}
void Write_Dx_l2_npu0_Sfu_coeff45_PAF_ADD_COEFF6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_L2_NPU0.SFU_COEFF45.PAF_ADD_COEFF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF45.PAF_ADD_COEFF6 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF46 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff46(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_L2_NPU0.SFU_COEFF46 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.U;
}
void Write_Dx_l2_npu0_Sfu_coeff46(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_L2_NPU0.SFU_COEFF46 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF46.PAF_ADD_COEFF7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff46_PAF_ADD_COEFF7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_L2_NPU0.SFU_COEFF46.PAF_ADD_COEFF7 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.PAF_ADD_COEFF7 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.PAF_ADD_COEFF7;
}
void Write_Dx_l2_npu0_Sfu_coeff46_PAF_ADD_COEFF7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_L2_NPU0.SFU_COEFF46.PAF_ADD_COEFF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF46.PAF_ADD_COEFF7 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF47 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff47(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_L2_NPU0.SFU_COEFF47 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.U;
}
void Write_Dx_l2_npu0_Sfu_coeff47(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_L2_NPU0.SFU_COEFF47 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF47.PAF_ADD_COEFF8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff47_PAF_ADD_COEFF8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_L2_NPU0.SFU_COEFF47.PAF_ADD_COEFF8 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.PAF_ADD_COEFF8 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.PAF_ADD_COEFF8;
}
void Write_Dx_l2_npu0_Sfu_coeff47_PAF_ADD_COEFF8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_L2_NPU0.SFU_COEFF47.PAF_ADD_COEFF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF47.PAF_ADD_COEFF8 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF48 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff48(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_L2_NPU0.SFU_COEFF48 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.U;
}
void Write_Dx_l2_npu0_Sfu_coeff48(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_L2_NPU0.SFU_COEFF48 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF48.PAF_ADD_COEFF9 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff48_PAF_ADD_COEFF9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_L2_NPU0.SFU_COEFF48.PAF_ADD_COEFF9 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.PAF_ADD_COEFF9 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.PAF_ADD_COEFF9;
}
void Write_Dx_l2_npu0_Sfu_coeff48_PAF_ADD_COEFF9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_L2_NPU0.SFU_COEFF48.PAF_ADD_COEFF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF48.PAF_ADD_COEFF9 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF49 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff49(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_L2_NPU0.SFU_COEFF49 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.U;
}
void Write_Dx_l2_npu0_Sfu_coeff49(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_L2_NPU0.SFU_COEFF49 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF49.PAF_ADD_COEFF10 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff49_PAF_ADD_COEFF10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_L2_NPU0.SFU_COEFF49.PAF_ADD_COEFF10 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.PAF_ADD_COEFF10 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.PAF_ADD_COEFF10;
}
void Write_Dx_l2_npu0_Sfu_coeff49_PAF_ADD_COEFF10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_L2_NPU0.SFU_COEFF49.PAF_ADD_COEFF10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF49.PAF_ADD_COEFF10 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF50 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff50(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_L2_NPU0.SFU_COEFF50 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.U;
}
void Write_Dx_l2_npu0_Sfu_coeff50(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_L2_NPU0.SFU_COEFF50 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF50.PAF_ADD_COEFF11 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff50_PAF_ADD_COEFF11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_L2_NPU0.SFU_COEFF50.PAF_ADD_COEFF11 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.PAF_ADD_COEFF11 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.PAF_ADD_COEFF11;
}
void Write_Dx_l2_npu0_Sfu_coeff50_PAF_ADD_COEFF11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_L2_NPU0.SFU_COEFF50.PAF_ADD_COEFF11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF50.PAF_ADD_COEFF11 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF51 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff51(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_L2_NPU0.SFU_COEFF51 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.U;
}
void Write_Dx_l2_npu0_Sfu_coeff51(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_L2_NPU0.SFU_COEFF51 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF51.PAF_ADD_COEFF12 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff51_PAF_ADD_COEFF12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_L2_NPU0.SFU_COEFF51.PAF_ADD_COEFF12 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.PAF_ADD_COEFF12 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.PAF_ADD_COEFF12;
}
void Write_Dx_l2_npu0_Sfu_coeff51_PAF_ADD_COEFF12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_L2_NPU0.SFU_COEFF51.PAF_ADD_COEFF12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF51.PAF_ADD_COEFF12 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF52 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff52(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_L2_NPU0.SFU_COEFF52 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.U;
}
void Write_Dx_l2_npu0_Sfu_coeff52(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_L2_NPU0.SFU_COEFF52 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF52.PAF_ADD_COEFF13 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff52_PAF_ADD_COEFF13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_L2_NPU0.SFU_COEFF52.PAF_ADD_COEFF13 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.PAF_ADD_COEFF13 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.PAF_ADD_COEFF13;
}
void Write_Dx_l2_npu0_Sfu_coeff52_PAF_ADD_COEFF13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_L2_NPU0.SFU_COEFF52.PAF_ADD_COEFF13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF52.PAF_ADD_COEFF13 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF53 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff53(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_L2_NPU0.SFU_COEFF53 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.U;
}
void Write_Dx_l2_npu0_Sfu_coeff53(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_L2_NPU0.SFU_COEFF53 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF53.PAF_ADD_COEFF14 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff53_PAF_ADD_COEFF14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_L2_NPU0.SFU_COEFF53.PAF_ADD_COEFF14 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.PAF_ADD_COEFF14 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.PAF_ADD_COEFF14;
}
void Write_Dx_l2_npu0_Sfu_coeff53_PAF_ADD_COEFF14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_L2_NPU0.SFU_COEFF53.PAF_ADD_COEFF14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF53.PAF_ADD_COEFF14 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.SFU_COEFF54 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff54(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_L2_NPU0.SFU_COEFF54 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.U;
}
void Write_Dx_l2_npu0_Sfu_coeff54(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_L2_NPU0.SFU_COEFF54 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.SFU_COEFF54.PAF_ADD_COEFF15 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Sfu_coeff54_PAF_ADD_COEFF15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_L2_NPU0.SFU_COEFF54.PAF_ADD_COEFF15 : " << ((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.PAF_ADD_COEFF15 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.PAF_ADD_COEFF15;
}
void Write_Dx_l2_npu0_Sfu_coeff54_PAF_ADD_COEFF15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_L2_NPU0.SFU_COEFF54.PAF_ADD_COEFF15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->SFU_COEFF54.PAF_ADD_COEFF15 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD1.U;
}
void Write_Dx_l2_npu0_Rsvd1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD1.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd1_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED3;
}
void Write_Dx_l2_npu0_Rsvd1_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD1.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd1_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED2;
}
void Write_Dx_l2_npu0_Rsvd1_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD1.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd1_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED1;
}
void Write_Dx_l2_npu0_Rsvd1_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_L2_NPU0.RSVD1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD2.U;
}
void Write_Dx_l2_npu0_Rsvd2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD2.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd2_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED3;
}
void Write_Dx_l2_npu0_Rsvd2_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD2.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd2_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED2;
}
void Write_Dx_l2_npu0_Rsvd2_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD2.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd2_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED1;
}
void Write_Dx_l2_npu0_Rsvd2_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD2.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_L2_NPU0.RSVD2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.U;
}
void Write_Dx_l2_npu0_Pe0_img2col0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_CH_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET;
}
void Write_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_CH_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_LINE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET;
}
void Write_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_LINE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_img2col0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_EN;
}
void Write_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL0.PE0_IMG2COL_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.U;
}
void Write_Dx_l2_npu0_Pe0_img2col1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OUT_FEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH;
}
void Write_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OUT_FEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_img2col1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OHEIGHT_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET;
}
void Write_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OHEIGHT_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_FMT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT.U;
}
void Write_Dx_l2_npu0_Pe0_fmt(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_FMT.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_LINE_OPT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_LINE_OPT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_LINE_OPT : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_FIRST_LINE_OPT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_FIRST_LINE_OPT;
}
void Write_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_LINE_OPT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_LINE_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_FIRST_LINE_OPT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_VALID_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_FIRST_VALID_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_FIRST_VALID_NUM;
}
void Write_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_FIRST_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_FMT.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_fmt_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_FMT.PE0_FMT_ENABLE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt_PE0_FMT_ENABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.PE0_FMT_ENABLE : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_ENABLE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_ENABLE;
}
void Write_Dx_l2_npu0_Pe0_fmt_PE0_FMT_ENABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_L2_NPU0.PE0_FMT.PE0_FMT_ENABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT.PE0_FMT_ENABLE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_FMT_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_L2_NPU0.PE0_FMT_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_fmt_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_L2_NPU0.PE0_FMT_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_fmt_cfg0_PE0_FMT_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_L2_NPU0.PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_fmt_cfg0_PE0_FMT_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_L2_NPU0.PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_L2_NPU0.PE0_ADDR_GEN0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.U;
}
void Write_Dx_l2_npu0_Pe0_addr_gen0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_L2_NPU0.PE0_ADDR_GEN0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_L2_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM;
}
void Write_Dx_l2_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_L2_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_L2_NPU0.PE0_ADDR_GEN0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_addr_gen0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_L2_NPU0.PE0_ADDR_GEN0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_L2_NPU0.PE0_ADDR_GEN1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.U;
}
void Write_Dx_l2_npu0_Pe0_addr_gen1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_L2_NPU0.PE0_ADDR_GEN1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_L2_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_L2_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_L2_NPU0.PE0_ADDR_GEN2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.U;
}
void Write_Dx_l2_npu0_Pe0_addr_gen2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_L2_NPU0.PE0_ADDR_GEN2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen2_PE0_BN_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_L2_NPU0.PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE;
}
void Write_Dx_l2_npu0_Pe0_addr_gen2_PE0_BN_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_L2_NPU0.PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN2.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_L2_NPU0.PE0_ADDR_GEN2.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_addr_gen2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_L2_NPU0.PE0_ADDR_GEN2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_L2_NPU0.PE0_ADDR_GEN3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.U;
}
void Write_Dx_l2_npu0_Pe0_addr_gen3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_L2_NPU0.PE0_ADDR_GEN3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET;
}
void Write_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM;
}
void Write_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.U;
}
void Write_Dx_l2_npu0_Pe0_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CTRL.PE0_CONV_TYPE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_CONV_TYPE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_CONV_TYPE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_CONV_TYPE;
}
void Write_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_CONV_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_CONV_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CTRL.PE0_CONV_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_CONV_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_CONV_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_CONV_EN;
}
void Write_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_CONV_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_CONV_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_DEPTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_DEPTH;
}
void Write_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_DEPTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_EN;
}
void Write_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SFUIN_VALID_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SFUIN_VALID_NUM;
}
void Write_Dx_l2_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_L2_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CTRL.PE0_SFUIN_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_NUM;
}
void Write_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_MOD << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_MOD;
}
void Write_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_MOD = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_L2_NPU0.PE0_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_CHANNEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_CHANNEL;
}
void Write_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_NUMBER << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_NUMBER;
}
void Write_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_DISABLE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_DISABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_DISABLE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_DISABLE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_DISABLE;
}
void Write_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_DISABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_DISABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_DISABLE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_WIDTH;
}
void Write_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_HEIGHT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_HEIGHT;
}
void Write_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG2.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_L2_NPU0.PE0_CFG2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_L2_NPU0.PE0_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_L2_NPU0.PE0_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG3.PE0_FEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg3_PE0_FEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_L2_NPU0.PE0_CFG3.PE0_FEATURE_CHANNEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.PE0_FEATURE_CHANNEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.PE0_FEATURE_CHANNEL;
}
void Write_Dx_l2_npu0_Pe0_cfg3_PE0_FEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_L2_NPU0.PE0_CFG3.PE0_FEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.PE0_FEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG3.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_L2_NPU0.PE0_CFG3.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_L2_NPU0.PE0_CFG3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.U;
}
void Write_Dx_l2_npu0_Pe0_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_WIDTH;
}
void Write_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_HEIGHT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_HEIGHT;
}
void Write_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG4.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_L2_NPU0.PE0_CFG4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_L2_NPU0.PE0_CFG5 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.U;
}
void Write_Dx_l2_npu0_Pe0_cfg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_L2_NPU0.PE0_CFG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG5.PE0_FILTER_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_L2_NPU0.PE0_CFG5.PE0_FILTER_CHANNEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_CHANNEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_CHANNEL;
}
void Write_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_L2_NPU0.PE0_CFG5.PE0_FILTER_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG5.PE0_FILTER_NUMBER (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_L2_NPU0.PE0_CFG5.PE0_FILTER_NUMBER : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_NUMBER << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_NUMBER;
}
void Write_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_L2_NPU0.PE0_CFG5.PE0_FILTER_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.U;
}
void Write_Dx_l2_npu0_Pe0_cfg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG6.PE0_FILTER_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6.PE0_FILTER_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_WIDTH;
}
void Write_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6.PE0_FILTER_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_HEIGHT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_HEIGHT;
}
void Write_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG6.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_L2_NPU0.PE0_CFG6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.U;
}
void Write_Dx_l2_npu0_Pe0_cfg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_TOP_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_TOP_SIZE;
}
void Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_TOP_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_BOTTOM_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_BOTTOM_SIZE;
}
void Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_BOTTOM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_LEFT_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_LEFT_SIZE;
}
void Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_LEFT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_RIGHT_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_RIGHT_SIZE;
}
void Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_RIGHT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG7.PE0_PAD_VALUE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_VALUE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_VALUE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_VALUE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_VALUE;
}
void Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_VALUE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.PE0_PAD_VALUE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.PE0_PAD_VALUE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG7.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg7_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg7_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_L2_NPU0.PE0_CFG7.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG7.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.U;
}
void Write_Dx_l2_npu0_Pe0_cfg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_X (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_X : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_X << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_X;
}
void Write_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_X = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_Y (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_Y : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_Y << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_Y;
}
void Write_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_Y = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG8.PE0_DILATION_X (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_DILATION_X : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_DILATION_X << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_DILATION_X;
}
void Write_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_DILATION_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_DILATION_X = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG8.PE0_DILATION_Y (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_DILATION_Y : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_DILATION_Y << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_DILATION_Y;
}
void Write_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_DILATION_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_DILATION_Y = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_CHANNEL_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_CHANNEL_OFFSET;
}
void Write_Dx_l2_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_L2_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG8.PE0_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG9 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_L2_NPU0.PE0_CFG9 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG9.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG9.U;
}
void Write_Dx_l2_npu0_Pe0_cfg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_L2_NPU0.PE0_CFG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg9_PE0_READ_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_L2_NPU0.PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg9_PE0_READ_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_L2_NPU0.PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG10 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_L2_NPU0.PE0_CFG10 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG10.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG10.U;
}
void Write_Dx_l2_npu0_Pe0_cfg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_L2_NPU0.PE0_CFG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg10_PE0_WRITE_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_L2_NPU0.PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg10_PE0_WRITE_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_L2_NPU0.PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG11 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_L2_NPU0.PE0_CFG11 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG11.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG11.U;
}
void Write_Dx_l2_npu0_Pe0_cfg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_L2_NPU0.PE0_CFG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg11_PE0_READ_WEIGHT_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_L2_NPU0.PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg11_PE0_READ_WEIGHT_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_L2_NPU0.PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG12 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_L2_NPU0.PE0_CFG12 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG12.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG12.U;
}
void Write_Dx_l2_npu0_Pe0_cfg12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_L2_NPU0.PE0_CFG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG12.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG12.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg12_PE0_BN_COEFF_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_L2_NPU0.PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg12_PE0_BN_COEFF_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_L2_NPU0.PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG13 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_L2_NPU0.PE0_CFG13 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG13.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG13.U;
}
void Write_Dx_l2_npu0_Pe0_cfg13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_L2_NPU0.PE0_CFG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG13.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG13.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG13.PE0_BIAS_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg13_PE0_BIAS_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_L2_NPU0.PE0_CFG13.PE0_BIAS_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG13.PE0_BIAS_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG13.PE0_BIAS_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg13_PE0_BIAS_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_L2_NPU0.PE0_CFG13.PE0_BIAS_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG13.PE0_BIAS_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG14 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_L2_NPU0.PE0_CFG14 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG14.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG14.U;
}
void Write_Dx_l2_npu0_Pe0_cfg14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_L2_NPU0.PE0_CFG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG14.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG14.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG14.PE0_MUL_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg14_PE0_MUL_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_L2_NPU0.PE0_CFG14.PE0_MUL_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG14.PE0_MUL_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG14.PE0_MUL_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg14_PE0_MUL_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_L2_NPU0.PE0_CFG14.PE0_MUL_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG14.PE0_MUL_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG15 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_L2_NPU0.PE0_CFG15 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG15.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG15.U;
}
void Write_Dx_l2_npu0_Pe0_cfg15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_L2_NPU0.PE0_CFG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG15.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG15.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG15.PE0_ELEM_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg15_PE0_ELEM_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_L2_NPU0.PE0_CFG15.PE0_ELEM_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG15.PE0_ELEM_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG15.PE0_ELEM_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg15_PE0_ELEM_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_L2_NPU0.PE0_CFG15.PE0_ELEM_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG15.PE0_ELEM_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG16 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_L2_NPU0.PE0_CFG16 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.U;
}
void Write_Dx_l2_npu0_Pe0_cfg16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_L2_NPU0.PE0_CFG16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG16.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg16_PE0_ELEM_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_L2_NPU0.PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET;
}
void Write_Dx_l2_npu0_Pe0_cfg16_PE0_ELEM_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_L2_NPU0.PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG16.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg16_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_L2_NPU0.PE0_CFG16.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg16_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_L2_NPU0.PE0_CFG16.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG16.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG17 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.U;
}
void Write_Dx_l2_npu0_Pe0_cfg17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG17.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_MODE1_LINE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE;
}
void Write_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_MODE1_LINE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG17.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg17_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg17_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_GEN_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.PE0_WF_ADDR_GEN_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.PE0_WF_ADDR_GEN_MODE;
}
void Write_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG17.PE0_WF_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG18 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_L2_NPU0.PE0_CFG18 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG18.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG18.U;
}
void Write_Dx_l2_npu0_Pe0_cfg18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_L2_NPU0.PE0_CFG18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG18.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG18.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg18_PE0_WF_ADDR_MODE1_LINE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_L2_NPU0.PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_cfg18_PE0_WF_ADDR_MODE1_LINE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_L2_NPU0.PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG19 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_L2_NPU0.PE0_CFG19 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.U;
}
void Write_Dx_l2_npu0_Pe0_cfg19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_L2_NPU0.PE0_CFG19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG19.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_LINE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_LINE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG20 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.U;
}
void Write_Dx_l2_npu0_Pe0_cfg20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG20.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG20.PE0_WF_WRITE_CNT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg20_PE0_WF_WRITE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20.PE0_WF_WRITE_CNT : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.PE0_WF_WRITE_CNT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.PE0_WF_WRITE_CNT;
}
void Write_Dx_l2_npu0_Pe0_cfg20_PE0_WF_WRITE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20.PE0_WF_WRITE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.PE0_WF_WRITE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG20.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg20_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg20_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG20.PE0_WF_RF2RF_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg20_PE0_WF_RF2RF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20.PE0_WF_RF2RF_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.PE0_WF_RF2RF_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.PE0_WF_RF2RF_TIME;
}
void Write_Dx_l2_npu0_Pe0_cfg20_PE0_WF_RF2RF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_L2_NPU0.PE0_CFG20.PE0_WF_RF2RF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG20.PE0_WF_RF2RF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG21 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_L2_NPU0.PE0_CFG21 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.U;
}
void Write_Dx_l2_npu0_Pe0_cfg21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_L2_NPU0.PE0_CFG21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG21.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.PE0_WF_RF2RF_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.PE0_WF_RF2RF_SIZE;
}
void Write_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.PE0_WF_RF2RF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_ADDR_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_ADDR_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG22 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_L2_NPU0.PE0_CFG22 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG22.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG22.U;
}
void Write_Dx_l2_npu0_Pe0_cfg22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_L2_NPU0.PE0_CFG22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG22.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG22.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg22_PE0_WF_RF2RF_SRC_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_L2_NPU0.PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg22_PE0_WF_RF2RF_SRC_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_L2_NPU0.PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG23 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_L2_NPU0.PE0_CFG23 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG23.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG23.U;
}
void Write_Dx_l2_npu0_Pe0_cfg23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_L2_NPU0.PE0_CFG23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG23.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG23.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG23.PE0_WF_RF2RF_DST_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg23_PE0_WF_RF2RF_DST_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_L2_NPU0.PE0_CFG23.PE0_WF_RF2RF_DST_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG23.PE0_WF_RF2RF_DST_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG23.PE0_WF_RF2RF_DST_ADDR;
}
void Write_Dx_l2_npu0_Pe0_cfg23_PE0_WF_RF2RF_DST_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_L2_NPU0.PE0_CFG23.PE0_WF_RF2RF_DST_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG23.PE0_WF_RF2RF_DST_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG24 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.U;
}
void Write_Dx_l2_npu0_Pe0_cfg24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG24.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg24_PE0_SFU_OUT_DATA_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM;
}
void Write_Dx_l2_npu0_Pe0_cfg24_PE0_SFU_OUT_DATA_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG24.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg24_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.RESERVED1;
}
void Write_Dx_l2_npu0_Pe0_cfg24_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg24_PE0_ST_ADDR_GEN_SHIFT_LEN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN;
}
void Write_Dx_l2_npu0_Pe0_cfg24_PE0_ST_ADDR_GEN_SHIFT_LEN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG24.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg24_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg24_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_L2_NPU0.PE0_CFG24.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG24.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG25 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_L2_NPU0.PE0_CFG25 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.U;
}
void Write_Dx_l2_npu0_Pe0_cfg25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_L2_NPU0.PE0_CFG25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_CFG25.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_MUL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_MUL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_L2_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_MUL : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.PE0_ST_ADDR_GEN_MUL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.PE0_ST_ADDR_GEN_MUL;
}
void Write_Dx_l2_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_MUL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_L2_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_MUL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.PE0_ST_ADDR_GEN_MUL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_CFG25.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_cfg25_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_L2_NPU0.PE0_CFG25.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_cfg25_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_L2_NPU0.PE0_CFG25.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_CFG25.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED3;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED2;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED1;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_SMEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_smem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_smem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_SMEM_CFG0.PE0_BN_BUFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_smem_cfg0_PE0_BN_BUFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.PE0_BN_BUFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_BN_BUFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_BN_BUFF_SEL;
}
void Write_Dx_l2_npu0_Pe0_smem_cfg0_PE0_BN_BUFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.PE0_BN_BUFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_BN_BUFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_SMEM_CFG0.PE0_B_BUFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_smem_cfg0_PE0_B_BUFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.PE0_B_BUFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_B_BUFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_B_BUFF_SEL;
}
void Write_Dx_l2_npu0_Pe0_smem_cfg0_PE0_B_BUFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.PE0_B_BUFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_B_BUFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_smem_cfg0_PE0_MUL_BUFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL;
}
void Write_Dx_l2_npu0_Pe0_smem_cfg0_PE0_MUL_BUFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_SMEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_smem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_smem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_L2_NPU0.PE0_SMEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_SMEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.U;
}
void Write_Dx_l2_npu0_Pe1_img2col0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_CH_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET;
}
void Write_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_CH_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_LINE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET;
}
void Write_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_LINE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_img2col0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_EN;
}
void Write_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL0.PE1_IMG2COL_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.U;
}
void Write_Dx_l2_npu0_Pe1_img2col1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OUT_FEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH;
}
void Write_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OUT_FEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_img2col1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OHEIGHT_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET;
}
void Write_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OHEIGHT_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_FMT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT.U;
}
void Write_Dx_l2_npu0_Pe1_fmt(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_FMT.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_LINE_OPT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_LINE_OPT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_LINE_OPT : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_FIRST_LINE_OPT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_FIRST_LINE_OPT;
}
void Write_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_LINE_OPT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_LINE_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_FIRST_LINE_OPT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_VALID_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_FIRST_VALID_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_FIRST_VALID_NUM;
}
void Write_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_FIRST_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_FMT.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_fmt_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_FMT.PE1_FMT_ENABLE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt_PE1_FMT_ENABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.PE1_FMT_ENABLE : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_ENABLE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_ENABLE;
}
void Write_Dx_l2_npu0_Pe1_fmt_PE1_FMT_ENABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_L2_NPU0.PE1_FMT.PE1_FMT_ENABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT.PE1_FMT_ENABLE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_FMT_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_L2_NPU0.PE1_FMT_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_fmt_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_L2_NPU0.PE1_FMT_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_fmt_cfg0_PE1_FMT_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_L2_NPU0.PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_fmt_cfg0_PE1_FMT_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_L2_NPU0.PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_L2_NPU0.PE1_ADDR_GEN0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.U;
}
void Write_Dx_l2_npu0_Pe1_addr_gen0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_L2_NPU0.PE1_ADDR_GEN0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_L2_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM;
}
void Write_Dx_l2_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_L2_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_L2_NPU0.PE1_ADDR_GEN0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_addr_gen0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_L2_NPU0.PE1_ADDR_GEN0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_L2_NPU0.PE1_ADDR_GEN1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.U;
}
void Write_Dx_l2_npu0_Pe1_addr_gen1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_L2_NPU0.PE1_ADDR_GEN1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_L2_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_L2_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_L2_NPU0.PE1_ADDR_GEN2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.U;
}
void Write_Dx_l2_npu0_Pe1_addr_gen2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_L2_NPU0.PE1_ADDR_GEN2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen2_PE1_BN_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_L2_NPU0.PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE;
}
void Write_Dx_l2_npu0_Pe1_addr_gen2_PE1_BN_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_L2_NPU0.PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN2.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_L2_NPU0.PE1_ADDR_GEN2.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_addr_gen2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_L2_NPU0.PE1_ADDR_GEN2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_L2_NPU0.PE1_ADDR_GEN3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.U;
}
void Write_Dx_l2_npu0_Pe1_addr_gen3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_L2_NPU0.PE1_ADDR_GEN3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET;
}
void Write_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM;
}
void Write_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.U;
}
void Write_Dx_l2_npu0_Pe1_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CTRL.PE1_CONV_TYPE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_CONV_TYPE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_CONV_TYPE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_CONV_TYPE;
}
void Write_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_CONV_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_CONV_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CTRL.PE1_CONV_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_CONV_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_CONV_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_CONV_EN;
}
void Write_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_CONV_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_CONV_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_DEPTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_DEPTH;
}
void Write_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_DEPTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_EN;
}
void Write_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SFUIN_VALID_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SFUIN_VALID_NUM;
}
void Write_Dx_l2_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_L2_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CTRL.PE1_SFUIN_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_NUM;
}
void Write_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_MOD << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_MOD;
}
void Write_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_MOD = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_L2_NPU0.PE1_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_CHANNEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_CHANNEL;
}
void Write_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_NUMBER << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_NUMBER;
}
void Write_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_DISABLE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_DISABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_DISABLE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_DISABLE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_DISABLE;
}
void Write_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_DISABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_DISABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_DISABLE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_WIDTH;
}
void Write_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_HEIGHT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_HEIGHT;
}
void Write_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG2.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_L2_NPU0.PE1_CFG2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_L2_NPU0.PE1_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_L2_NPU0.PE1_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG3.PE1_FEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg3_PE1_FEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_L2_NPU0.PE1_CFG3.PE1_FEATURE_CHANNEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.PE1_FEATURE_CHANNEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.PE1_FEATURE_CHANNEL;
}
void Write_Dx_l2_npu0_Pe1_cfg3_PE1_FEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_L2_NPU0.PE1_CFG3.PE1_FEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.PE1_FEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG3.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_L2_NPU0.PE1_CFG3.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_L2_NPU0.PE1_CFG3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.U;
}
void Write_Dx_l2_npu0_Pe1_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_WIDTH;
}
void Write_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_HEIGHT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_HEIGHT;
}
void Write_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG4.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_L2_NPU0.PE1_CFG4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_L2_NPU0.PE1_CFG5 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.U;
}
void Write_Dx_l2_npu0_Pe1_cfg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_L2_NPU0.PE1_CFG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG5.PE1_FILTER_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_L2_NPU0.PE1_CFG5.PE1_FILTER_CHANNEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_CHANNEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_CHANNEL;
}
void Write_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_L2_NPU0.PE1_CFG5.PE1_FILTER_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG5.PE1_FILTER_NUMBER (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_L2_NPU0.PE1_CFG5.PE1_FILTER_NUMBER : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_NUMBER << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_NUMBER;
}
void Write_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_L2_NPU0.PE1_CFG5.PE1_FILTER_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.U;
}
void Write_Dx_l2_npu0_Pe1_cfg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG6.PE1_FILTER_WIDTH (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6.PE1_FILTER_WIDTH : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_WIDTH << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_WIDTH;
}
void Write_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6.PE1_FILTER_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_HEIGHT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_HEIGHT;
}
void Write_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG6.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_L2_NPU0.PE1_CFG6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.U;
}
void Write_Dx_l2_npu0_Pe1_cfg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_TOP_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_TOP_SIZE;
}
void Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_TOP_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_BOTTOM_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_BOTTOM_SIZE;
}
void Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_BOTTOM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_LEFT_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_LEFT_SIZE;
}
void Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_LEFT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_RIGHT_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_RIGHT_SIZE;
}
void Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_RIGHT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG7.PE1_PAD_VALUE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_VALUE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_VALUE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_VALUE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_VALUE;
}
void Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_VALUE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.PE1_PAD_VALUE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.PE1_PAD_VALUE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG7.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg7_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg7_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_L2_NPU0.PE1_CFG7.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG7.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.U;
}
void Write_Dx_l2_npu0_Pe1_cfg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_X (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_X : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_X << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_X;
}
void Write_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_X = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_Y (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_Y : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_Y << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_Y;
}
void Write_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_Y = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG8.PE1_DILATION_X (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_DILATION_X : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_DILATION_X << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_DILATION_X;
}
void Write_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_DILATION_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_DILATION_X = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG8.PE1_DILATION_Y (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_DILATION_Y : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_DILATION_Y << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_DILATION_Y;
}
void Write_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_DILATION_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_DILATION_Y = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_CHANNEL_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_CHANNEL_OFFSET;
}
void Write_Dx_l2_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_L2_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG8.PE1_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG9 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_L2_NPU0.PE1_CFG9 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG9.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG9.U;
}
void Write_Dx_l2_npu0_Pe1_cfg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_L2_NPU0.PE1_CFG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg9_PE1_READ_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_L2_NPU0.PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg9_PE1_READ_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_L2_NPU0.PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG10 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_L2_NPU0.PE1_CFG10 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG10.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG10.U;
}
void Write_Dx_l2_npu0_Pe1_cfg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_L2_NPU0.PE1_CFG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg10_PE1_WRITE_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_L2_NPU0.PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg10_PE1_WRITE_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_L2_NPU0.PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG11 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_L2_NPU0.PE1_CFG11 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG11.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG11.U;
}
void Write_Dx_l2_npu0_Pe1_cfg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_L2_NPU0.PE1_CFG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg11_PE1_READ_WEIGHT_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_L2_NPU0.PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg11_PE1_READ_WEIGHT_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_L2_NPU0.PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG12 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_L2_NPU0.PE1_CFG12 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG12.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG12.U;
}
void Write_Dx_l2_npu0_Pe1_cfg12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_L2_NPU0.PE1_CFG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG12.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG12.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg12_PE1_BN_COEFF_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_L2_NPU0.PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg12_PE1_BN_COEFF_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_L2_NPU0.PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG13 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_L2_NPU0.PE1_CFG13 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG13.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG13.U;
}
void Write_Dx_l2_npu0_Pe1_cfg13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_L2_NPU0.PE1_CFG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG13.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG13.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG13.PE1_BIAS_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg13_PE1_BIAS_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_L2_NPU0.PE1_CFG13.PE1_BIAS_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG13.PE1_BIAS_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG13.PE1_BIAS_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg13_PE1_BIAS_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_L2_NPU0.PE1_CFG13.PE1_BIAS_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG13.PE1_BIAS_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG14 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_L2_NPU0.PE1_CFG14 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG14.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG14.U;
}
void Write_Dx_l2_npu0_Pe1_cfg14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_L2_NPU0.PE1_CFG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG14.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG14.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG14.PE1_MUL_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg14_PE1_MUL_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_L2_NPU0.PE1_CFG14.PE1_MUL_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG14.PE1_MUL_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG14.PE1_MUL_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg14_PE1_MUL_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_L2_NPU0.PE1_CFG14.PE1_MUL_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG14.PE1_MUL_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG15 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_L2_NPU0.PE1_CFG15 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG15.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG15.U;
}
void Write_Dx_l2_npu0_Pe1_cfg15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_L2_NPU0.PE1_CFG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG15.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG15.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG15.PE1_ELEM_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg15_PE1_ELEM_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_L2_NPU0.PE1_CFG15.PE1_ELEM_READ_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG15.PE1_ELEM_READ_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG15.PE1_ELEM_READ_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg15_PE1_ELEM_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_L2_NPU0.PE1_CFG15.PE1_ELEM_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG15.PE1_ELEM_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG16 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_L2_NPU0.PE1_CFG16 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.U;
}
void Write_Dx_l2_npu0_Pe1_cfg16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_L2_NPU0.PE1_CFG16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG16.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg16_PE1_ELEM_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_L2_NPU0.PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET;
}
void Write_Dx_l2_npu0_Pe1_cfg16_PE1_ELEM_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_L2_NPU0.PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG16.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg16_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_L2_NPU0.PE1_CFG16.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg16_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_L2_NPU0.PE1_CFG16.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG16.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG17 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.U;
}
void Write_Dx_l2_npu0_Pe1_cfg17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG17.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_MODE1_LINE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE;
}
void Write_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_MODE1_LINE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG17.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg17_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg17_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_GEN_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.PE1_WF_ADDR_GEN_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.PE1_WF_ADDR_GEN_MODE;
}
void Write_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG17.PE1_WF_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG18 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_L2_NPU0.PE1_CFG18 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG18.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG18.U;
}
void Write_Dx_l2_npu0_Pe1_cfg18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_L2_NPU0.PE1_CFG18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG18.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG18.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg18_PE1_WF_ADDR_MODE1_LINE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_L2_NPU0.PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_cfg18_PE1_WF_ADDR_MODE1_LINE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_L2_NPU0.PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG19 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_L2_NPU0.PE1_CFG19 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.U;
}
void Write_Dx_l2_npu0_Pe1_cfg19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_L2_NPU0.PE1_CFG19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG19.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_LINE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_LINE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG20 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.U;
}
void Write_Dx_l2_npu0_Pe1_cfg20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG20.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG20.PE1_WF_WRITE_CNT (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg20_PE1_WF_WRITE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20.PE1_WF_WRITE_CNT : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.PE1_WF_WRITE_CNT << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.PE1_WF_WRITE_CNT;
}
void Write_Dx_l2_npu0_Pe1_cfg20_PE1_WF_WRITE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20.PE1_WF_WRITE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.PE1_WF_WRITE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG20.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg20_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg20_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG20.PE1_WF_RF2RF_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg20_PE1_WF_RF2RF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20.PE1_WF_RF2RF_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.PE1_WF_RF2RF_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.PE1_WF_RF2RF_TIME;
}
void Write_Dx_l2_npu0_Pe1_cfg20_PE1_WF_RF2RF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_L2_NPU0.PE1_CFG20.PE1_WF_RF2RF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG20.PE1_WF_RF2RF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG21 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_L2_NPU0.PE1_CFG21 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.U;
}
void Write_Dx_l2_npu0_Pe1_cfg21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_L2_NPU0.PE1_CFG21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG21.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.PE1_WF_RF2RF_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.PE1_WF_RF2RF_SIZE;
}
void Write_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.PE1_WF_RF2RF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_ADDR_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_ADDR_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG22 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_L2_NPU0.PE1_CFG22 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG22.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG22.U;
}
void Write_Dx_l2_npu0_Pe1_cfg22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_L2_NPU0.PE1_CFG22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG22.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG22.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg22_PE1_WF_RF2RF_SRC_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_L2_NPU0.PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg22_PE1_WF_RF2RF_SRC_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_L2_NPU0.PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG23 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_L2_NPU0.PE1_CFG23 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG23.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG23.U;
}
void Write_Dx_l2_npu0_Pe1_cfg23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_L2_NPU0.PE1_CFG23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG23.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG23.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG23.PE1_WF_RF2RF_DST_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg23_PE1_WF_RF2RF_DST_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_L2_NPU0.PE1_CFG23.PE1_WF_RF2RF_DST_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG23.PE1_WF_RF2RF_DST_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG23.PE1_WF_RF2RF_DST_ADDR;
}
void Write_Dx_l2_npu0_Pe1_cfg23_PE1_WF_RF2RF_DST_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_L2_NPU0.PE1_CFG23.PE1_WF_RF2RF_DST_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG23.PE1_WF_RF2RF_DST_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG24 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.U;
}
void Write_Dx_l2_npu0_Pe1_cfg24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG24.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg24_PE1_SFU_OUT_DATA_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM;
}
void Write_Dx_l2_npu0_Pe1_cfg24_PE1_SFU_OUT_DATA_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG24.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg24_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.RESERVED1;
}
void Write_Dx_l2_npu0_Pe1_cfg24_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg24_PE1_ST_ADDR_GEN_SHIFT_LEN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN;
}
void Write_Dx_l2_npu0_Pe1_cfg24_PE1_ST_ADDR_GEN_SHIFT_LEN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG24.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg24_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg24_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_L2_NPU0.PE1_CFG24.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG24.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG25 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_L2_NPU0.PE1_CFG25 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.U;
}
void Write_Dx_l2_npu0_Pe1_cfg25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_L2_NPU0.PE1_CFG25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_CFG25.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_MUL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_MUL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_L2_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_MUL : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.PE1_ST_ADDR_GEN_MUL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.PE1_ST_ADDR_GEN_MUL;
}
void Write_Dx_l2_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_MUL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_L2_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_MUL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.PE1_ST_ADDR_GEN_MUL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_CFG25.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_cfg25_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_L2_NPU0.PE1_CFG25.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_cfg25_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_L2_NPU0.PE1_CFG25.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_CFG25.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED3;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED2;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED1;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_SMEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_smem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_smem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_SMEM_CFG0.PE1_BN_BUFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_smem_cfg0_PE1_BN_BUFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.PE1_BN_BUFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_BN_BUFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_BN_BUFF_SEL;
}
void Write_Dx_l2_npu0_Pe1_smem_cfg0_PE1_BN_BUFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.PE1_BN_BUFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_BN_BUFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_SMEM_CFG0.PE1_B_BUFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_smem_cfg0_PE1_B_BUFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.PE1_B_BUFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_B_BUFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_B_BUFF_SEL;
}
void Write_Dx_l2_npu0_Pe1_smem_cfg0_PE1_B_BUFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.PE1_B_BUFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_B_BUFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_smem_cfg0_PE1_MUL_BUFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL;
}
void Write_Dx_l2_npu0_Pe1_smem_cfg0_PE1_MUL_BUFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_SMEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_smem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_smem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_L2_NPU0.PE1_SMEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_SMEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.U;
}
void Write_Dx_l2_npu0_Pe0_dma_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_CTRL.PE0_START_OP_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_ctrl_PE0_START_OP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL.PE0_START_OP_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.PE0_START_OP_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.PE0_START_OP_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_ctrl_PE0_START_OP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL.PE0_START_OP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.PE0_START_OP_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_CTRL.PE0_DMA_CTRL_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_ctrl_PE0_DMA_CTRL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL.PE0_DMA_CTRL_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.PE0_DMA_CTRL_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.PE0_DMA_CTRL_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_ctrl_PE0_DMA_CTRL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL.PE0_DMA_CTRL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.PE0_DMA_CTRL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_L2_NPU0.PE0_DMA_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_SEL;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.PE0_RD_BN_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_L2_NPU0.PE0_DMA_BN_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_L2_NPU0.PE0_DMA_BN_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_L2_NPU0.PE0_DMA_BN_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_L2_NPU0.PE0_DMA_BN_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg2_PE0_RD_BN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_L2_NPU0.PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg2_PE0_RD_BN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_L2_NPU0.PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_BN_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_L2_NPU0.PE0_DMA_BN_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_L2_NPU0.PE0_DMA_BN_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_bn_cfg3_PE0_WT_BN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_L2_NPU0.PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_bn_cfg3_PE0_WT_BN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_L2_NPU0.PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_SEL;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.PE0_RD_B_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_L2_NPU0.PE0_DMA_B_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.PE0_RD_B_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.PE0_RD_B_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.PE0_RD_B_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.PE0_RD_B_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.PE0_RD_B_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.PE0_RD_B_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_L2_NPU0.PE0_DMA_B_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_L2_NPU0.PE0_DMA_B_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_L2_NPU0.PE0_DMA_B_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg2_PE0_RD_B_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_L2_NPU0.PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg2_PE0_RD_B_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_L2_NPU0.PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_B_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_L2_NPU0.PE0_DMA_B_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_L2_NPU0.PE0_DMA_B_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_b_cfg3_PE0_WT_B_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_L2_NPU0.PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_b_cfg3_PE0_WT_B_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_L2_NPU0.PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg2_PE0_RD_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg2_PE0_RD_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_MUL_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_mul_cfg3_PE0_WT_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_mul_cfg3_PE0_WT_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_L2_NPU0.PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg1_PE0_RD_ELEM_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg1_PE0_RD_ELEM_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg2_PE0_RD_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg2_PE0_RD_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_ELEM_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_elem_cfg3_PE0_WT_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_elem_cfg3_PE0_WT_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_L2_NPU0.PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.PE0_RD_W_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_L2_NPU0.PE0_DMA_W_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_L2_NPU0.PE0_DMA_W_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_L2_NPU0.PE0_DMA_W_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.PE0_RD_W_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.PE0_RD_W_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.PE0_RD_W_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.PE0_RD_W_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.PE0_RD_W_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG1.PE0_RD_W_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_L2_NPU0.PE0_DMA_W_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_L2_NPU0.PE0_DMA_W_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg2_PE0_RD_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_L2_NPU0.PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg2_PE0_RD_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_L2_NPU0.PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_W_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_L2_NPU0.PE0_DMA_W_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_L2_NPU0.PE0_DMA_W_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_w_cfg3_PE0_WT_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_L2_NPU0.PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_w_cfg3_PE0_WT_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_L2_NPU0.PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_MODE;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.PE0_RD_INF_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_L2_NPU0.PE0_DMA_INF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_L2_NPU0.PE0_DMA_INF_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_L2_NPU0.PE0_DMA_INF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg1_PE0_RD_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_L2_NPU0.PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg1_PE0_RD_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_L2_NPU0.PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_L2_NPU0.PE0_DMA_INF_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_L2_NPU0.PE0_DMA_INF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg2_PE0_RD_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_L2_NPU0.PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg2_PE0_RD_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_L2_NPU0.PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_L2_NPU0.PE0_DMA_INF_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_L2_NPU0.PE0_DMA_INF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg3_PE0_WT_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_L2_NPU0.PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg3_PE0_WT_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_L2_NPU0.PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_INF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_L2_NPU0.PE0_DMA_INF_CFG4 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.U;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_L2_NPU0.PE0_DMA_INF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_inf_cfg4_PE0_WT_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_L2_NPU0.PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_inf_cfg4_PE0_WT_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_L2_NPU0.PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED1;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg1_PE0_WT_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg1_PE0_WT_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg2_PE0_WT_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg2_PE0_WT_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg3_PE0_RD_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg3_PE0_RD_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE0_DMA_OUTF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG4 : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe0_dma_outf_cfg4_PE0_RD_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe0_dma_outf_cfg4_PE0_RD_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_L2_NPU0.PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD5 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5 : " << ((dxDX_L2_NPU0_t*) base)->RSVD5.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD5.U;
}
void Write_Dx_l2_npu0_Rsvd5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD5.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD5.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD5.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd5_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED3;
}
void Write_Dx_l2_npu0_Rsvd5_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD5.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd5_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED2;
}
void Write_Dx_l2_npu0_Rsvd5_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD5.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd5_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED1;
}
void Write_Dx_l2_npu0_Rsvd5_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD5.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd5_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd5_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_L2_NPU0.RSVD5.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD5.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD6 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6 : " << ((dxDX_L2_NPU0_t*) base)->RSVD6.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD6.U;
}
void Write_Dx_l2_npu0_Rsvd6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD6.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD6.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD6.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd6_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED3;
}
void Write_Dx_l2_npu0_Rsvd6_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD6.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd6_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED2;
}
void Write_Dx_l2_npu0_Rsvd6_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD6.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd6_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED1;
}
void Write_Dx_l2_npu0_Rsvd6_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD6.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_L2_NPU0.RSVD6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_CTRL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.U;
}
void Write_Dx_l2_npu0_Pe1_dma_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_CTRL.PE1_START_OP_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_ctrl_PE1_START_OP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL.PE1_START_OP_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.PE1_START_OP_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.PE1_START_OP_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_ctrl_PE1_START_OP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL.PE1_START_OP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.PE1_START_OP_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_CTRL.PE1_DMA_CTRL_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_ctrl_PE1_DMA_CTRL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL.PE1_DMA_CTRL_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.PE1_DMA_CTRL_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.PE1_DMA_CTRL_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_ctrl_PE1_DMA_CTRL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL.PE1_DMA_CTRL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.PE1_DMA_CTRL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_L2_NPU0.PE1_DMA_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_SEL;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.PE1_RD_BN_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_L2_NPU0.PE1_DMA_BN_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_L2_NPU0.PE1_DMA_BN_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_L2_NPU0.PE1_DMA_BN_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_L2_NPU0.PE1_DMA_BN_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg2_PE1_RD_BN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_L2_NPU0.PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg2_PE1_RD_BN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_L2_NPU0.PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_BN_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_L2_NPU0.PE1_DMA_BN_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_L2_NPU0.PE1_DMA_BN_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_bn_cfg3_PE1_WT_BN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_L2_NPU0.PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_bn_cfg3_PE1_WT_BN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_L2_NPU0.PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_SEL;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.PE1_RD_B_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_L2_NPU0.PE1_DMA_B_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.PE1_RD_B_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.PE1_RD_B_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.PE1_RD_B_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.PE1_RD_B_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.PE1_RD_B_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.PE1_RD_B_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_L2_NPU0.PE1_DMA_B_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_L2_NPU0.PE1_DMA_B_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_L2_NPU0.PE1_DMA_B_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg2_PE1_RD_B_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_L2_NPU0.PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg2_PE1_RD_B_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_L2_NPU0.PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_B_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_L2_NPU0.PE1_DMA_B_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_L2_NPU0.PE1_DMA_B_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_b_cfg3_PE1_WT_B_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_L2_NPU0.PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_b_cfg3_PE1_WT_B_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_L2_NPU0.PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg2_PE1_RD_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg2_PE1_RD_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_MUL_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_mul_cfg3_PE1_WT_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_mul_cfg3_PE1_WT_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_L2_NPU0.PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg1_PE1_RD_ELEM_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg1_PE1_RD_ELEM_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg2_PE1_RD_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg2_PE1_RD_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_ELEM_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_elem_cfg3_PE1_WT_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_elem_cfg3_PE1_WT_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_L2_NPU0.PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.PE1_RD_W_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_L2_NPU0.PE1_DMA_W_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_L2_NPU0.PE1_DMA_W_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_L2_NPU0.PE1_DMA_W_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.PE1_RD_W_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.PE1_RD_W_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.PE1_RD_W_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.PE1_RD_W_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.PE1_RD_W_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG1.PE1_RD_W_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_L2_NPU0.PE1_DMA_W_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_L2_NPU0.PE1_DMA_W_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg2_PE1_RD_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_L2_NPU0.PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg2_PE1_RD_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_L2_NPU0.PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_W_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_L2_NPU0.PE1_DMA_W_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_L2_NPU0.PE1_DMA_W_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_w_cfg3_PE1_WT_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_L2_NPU0.PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_w_cfg3_PE1_WT_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_L2_NPU0.PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_MODE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_MODE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_MODE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_MODE;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_MODE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.PE1_RD_INF_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_L2_NPU0.PE1_DMA_INF_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_L2_NPU0.PE1_DMA_INF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg1_PE1_RD_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_L2_NPU0.PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg1_PE1_RD_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_L2_NPU0.PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_L2_NPU0.PE1_DMA_INF_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_L2_NPU0.PE1_DMA_INF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg2_PE1_RD_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_L2_NPU0.PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg2_PE1_RD_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_L2_NPU0.PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_L2_NPU0.PE1_DMA_INF_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_L2_NPU0.PE1_DMA_INF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg3_PE1_WT_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_L2_NPU0.PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg3_PE1_WT_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_L2_NPU0.PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_INF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG4 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.U;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_inf_cfg4_PE1_WT_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_inf_cfg4_PE1_WT_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_L2_NPU0.PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED1;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED0;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG1 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg1_PE1_WT_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg1_PE1_WT_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG2 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg2_PE1_WT_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg2_PE1_WT_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG3 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg3_PE1_RD_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg3_PE1_RD_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.PE1_DMA_OUTF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG4 : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Pe1_dma_outf_cfg4_PE1_RD_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR : " << ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR;
}
void Write_Dx_l2_npu0_Pe1_dma_outf_cfg4_PE1_RD_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_L2_NPU0.PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD7 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7 : " << ((dxDX_L2_NPU0_t*) base)->RSVD7.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD7.U;
}
void Write_Dx_l2_npu0_Rsvd7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD7.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD7.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD7.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd7_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED3;
}
void Write_Dx_l2_npu0_Rsvd7_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD7.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd7_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED2;
}
void Write_Dx_l2_npu0_Rsvd7_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD7.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd7_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED1;
}
void Write_Dx_l2_npu0_Rsvd7_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD7.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd7_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd7_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_L2_NPU0.RSVD7.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD7.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD8 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8 : " << ((dxDX_L2_NPU0_t*) base)->RSVD8.U << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD8.U;
}
void Write_Dx_l2_npu0_Rsvd8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD8.U = val;
    //*(volatile uint32_t*)&(((dxDX_L2_NPU0_t*) base)->RSVD8.U) = val;
    IOMEM_BARRIER();
}
/* DX_L2_NPU0.RSVD8.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd8_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED3 : " << ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED3 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED3;
}
void Write_Dx_l2_npu0_Rsvd8_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD8.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd8_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED2 : " << ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED2 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED2;
}
void Write_Dx_l2_npu0_Rsvd8_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD8.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd8_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED1 : " << ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED1 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED1;
}
void Write_Dx_l2_npu0_Rsvd8_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_L2_NPU0.RSVD8.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_l2_npu0_Rsvd8_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED0 : " << ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED0 << std::endl;
    return ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED0;
}
void Write_Dx_l2_npu0_Rsvd8_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_L2_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_L2_NPU0.RSVD8.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_L2_NPU0_t*) base)->RSVD8.RESERVED0 = val;
    IOMEM_BARRIER();
}


/* Register info */
vector<NpuReg> gNpuRegs_DX_L2[1] = {

  [0] = {
    /* type, baseaddr, addr, len, mask, offset, reset_val, read, write, enable, name */
    { /* 0 : INDEX_DX_L2_SYSTEM_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_SYSTEM.ID", 
      Read_Dx_l2_system_Id,
      Write_Dx_l2_system_Id,
    },
    { /* 1 : INDEX_DX_L2_SYSTEM_ID_DEVICE_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x0, DX_L2_SYSTEM_ID_DEVICE_ID_LEN, DX_L2_SYSTEM_ID_DEVICE_ID_MASK, DX_L2_SYSTEM_ID_DEVICE_ID_OFFSET, 0x41494f54, true, false, true, false,
      "DX_L2_SYSTEM.ID.DEVICE_ID", 
      Read_Dx_l2_system_Id_DEVICE_ID,
      Write_Dx_l2_system_Id_DEVICE_ID,
    },
    { /* 2 : INDEX_DX_L2_SYSTEM_STATUS */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_SYSTEM.STATUS", 
      Read_Dx_l2_system_Status,
      Write_Dx_l2_system_Status,
    },
    { /* 3 : INDEX_DX_L2_SYSTEM_STATUS_IRQ_STEP */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x4, DX_L2_SYSTEM_STATUS_IRQ_STEP_LEN, DX_L2_SYSTEM_STATUS_IRQ_STEP_MASK, DX_L2_SYSTEM_STATUS_IRQ_STEP_OFFSET, 0x0, true, false, true, false,
      "DX_L2_SYSTEM.STATUS.IRQ_STEP", 
      Read_Dx_l2_system_Status_IRQ_STEP,
      Write_Dx_l2_system_Status_IRQ_STEP,
    },
    { /* 4 : INDEX_DX_L2_SYSTEM_STATUS_IRQ_INF */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x4, DX_L2_SYSTEM_STATUS_IRQ_INF_LEN, DX_L2_SYSTEM_STATUS_IRQ_INF_MASK, DX_L2_SYSTEM_STATUS_IRQ_INF_OFFSET, 0x0, true, false, true, false,
      "DX_L2_SYSTEM.STATUS.IRQ_INF", 
      Read_Dx_l2_system_Status_IRQ_INF,
      Write_Dx_l2_system_Status_IRQ_INF,
    },
    { /* 5 : INDEX_DX_L2_SYSTEM_STATUS_BUSY */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x4, DX_L2_SYSTEM_STATUS_BUSY_LEN, DX_L2_SYSTEM_STATUS_BUSY_MASK, DX_L2_SYSTEM_STATUS_BUSY_OFFSET, 0x0, true, false, true, false,
      "DX_L2_SYSTEM.STATUS.BUSY", 
      Read_Dx_l2_system_Status_BUSY,
      Write_Dx_l2_system_Status_BUSY,
    },
    { /* 6 : INDEX_DX_L2_SYSTEM_STATUS_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x4, DX_L2_SYSTEM_STATUS_RESERVED0_LEN, DX_L2_SYSTEM_STATUS_RESERVED0_MASK, DX_L2_SYSTEM_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_SYSTEM.STATUS.RESERVED0", 
      Read_Dx_l2_system_Status_RESERVED0,
      Write_Dx_l2_system_Status_RESERVED0,
    },
    { /* 7 : INDEX_DX_L2_SYSTEM_STATUS_ARGMAX_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x4, DX_L2_SYSTEM_STATUS_ARGMAX_ID_LEN, DX_L2_SYSTEM_STATUS_ARGMAX_ID_MASK, DX_L2_SYSTEM_STATUS_ARGMAX_ID_OFFSET, 0x0, true, false, true, false,
      "DX_L2_SYSTEM.STATUS.ARGMAX_ID", 
      Read_Dx_l2_system_Status_ARGMAX_ID,
      Write_Dx_l2_system_Status_ARGMAX_ID,
    },
    { /* 8 : INDEX_DX_L2_SYSTEM_MODE */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_SYSTEM.MODE", 
      Read_Dx_l2_system_Mode,
      Write_Dx_l2_system_Mode,
    },
    { /* 9 : INDEX_DX_L2_SYSTEM_MODE_LAST_CMD_NUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x8, DX_L2_SYSTEM_MODE_LAST_CMD_NUM_LEN, DX_L2_SYSTEM_MODE_LAST_CMD_NUM_MASK, DX_L2_SYSTEM_MODE_LAST_CMD_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.MODE.LAST_CMD_NUM", 
      Read_Dx_l2_system_Mode_LAST_CMD_NUM,
      Write_Dx_l2_system_Mode_LAST_CMD_NUM,
    },
    { /* 10 : INDEX_DX_L2_SYSTEM_MODE_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x8, DX_L2_SYSTEM_MODE_RESERVED0_LEN, DX_L2_SYSTEM_MODE_RESERVED0_MASK, DX_L2_SYSTEM_MODE_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_SYSTEM.MODE.RESERVED0", 
      Read_Dx_l2_system_Mode_RESERVED0,
      Write_Dx_l2_system_Mode_RESERVED0,
    },
    { /* 11 : INDEX_DX_L2_SYSTEM_MODE_AUTORUN_EN */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x8, DX_L2_SYSTEM_MODE_AUTORUN_EN_LEN, DX_L2_SYSTEM_MODE_AUTORUN_EN_MASK, DX_L2_SYSTEM_MODE_AUTORUN_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.MODE.AUTORUN_EN", 
      Read_Dx_l2_system_Mode_AUTORUN_EN,
      Write_Dx_l2_system_Mode_AUTORUN_EN,
    },
    { /* 12 : INDEX_DX_L2_SYSTEM_MODE_IRQ_STEP_EN */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x8, DX_L2_SYSTEM_MODE_IRQ_STEP_EN_LEN, DX_L2_SYSTEM_MODE_IRQ_STEP_EN_MASK, DX_L2_SYSTEM_MODE_IRQ_STEP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.MODE.IRQ_STEP_EN", 
      Read_Dx_l2_system_Mode_IRQ_STEP_EN,
      Write_Dx_l2_system_Mode_IRQ_STEP_EN,
    },
    { /* 13 : INDEX_DX_L2_SYSTEM_MODE_IRQ_INF_EN */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x8, DX_L2_SYSTEM_MODE_IRQ_INF_EN_LEN, DX_L2_SYSTEM_MODE_IRQ_INF_EN_MASK, DX_L2_SYSTEM_MODE_IRQ_INF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.MODE.IRQ_INF_EN", 
      Read_Dx_l2_system_Mode_IRQ_INF_EN,
      Write_Dx_l2_system_Mode_IRQ_INF_EN,
    },
    { /* 14 : INDEX_DX_L2_SYSTEM_CMD */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, false, true, true, true,
      "DX_L2_SYSTEM.CMD", 
      Read_Dx_l2_system_Cmd,
      Write_Dx_l2_system_Cmd,
    },
    { /* 15 : INDEX_DX_L2_SYSTEM_CMD_START */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0xc, DX_L2_SYSTEM_CMD_START_LEN, DX_L2_SYSTEM_CMD_START_MASK, DX_L2_SYSTEM_CMD_START_OFFSET, 0x0, false, true, true, false,
      "DX_L2_SYSTEM.CMD.START", 
      Read_Dx_l2_system_Cmd_START,
      Write_Dx_l2_system_Cmd_START,
    },
    { /* 16 : INDEX_DX_L2_SYSTEM_CMD_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0xc, DX_L2_SYSTEM_CMD_RESERVED0_LEN, DX_L2_SYSTEM_CMD_RESERVED0_MASK, DX_L2_SYSTEM_CMD_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_SYSTEM.CMD.RESERVED0", 
      Read_Dx_l2_system_Cmd_RESERVED0,
      Write_Dx_l2_system_Cmd_RESERVED0,
    },
    { /* 17 : INDEX_DX_L2_SYSTEM_SWREG0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_SYSTEM.SWREG0", 
      Read_Dx_l2_system_Swreg0,
      Write_Dx_l2_system_Swreg0,
    },
    { /* 18 : INDEX_DX_L2_SYSTEM_SWREG0_SWREG0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x10, DX_L2_SYSTEM_SWREG0_SWREG0_LEN, DX_L2_SYSTEM_SWREG0_SWREG0_MASK, DX_L2_SYSTEM_SWREG0_SWREG0_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.SWREG0.SWREG0", 
      Read_Dx_l2_system_Swreg0_SWREG0,
      Write_Dx_l2_system_Swreg0_SWREG0,
    },
    { /* 19 : INDEX_DX_L2_SYSTEM_SWREG1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_SYSTEM.SWREG1", 
      Read_Dx_l2_system_Swreg1,
      Write_Dx_l2_system_Swreg1,
    },
    { /* 20 : INDEX_DX_L2_SYSTEM_SWREG1_SWREG1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x14, DX_L2_SYSTEM_SWREG1_SWREG1_LEN, DX_L2_SYSTEM_SWREG1_SWREG1_MASK, DX_L2_SYSTEM_SWREG1_SWREG1_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.SWREG1.SWREG1", 
      Read_Dx_l2_system_Swreg1_SWREG1,
      Write_Dx_l2_system_Swreg1_SWREG1,
    },
    { /* 21 : INDEX_DX_L2_SYSTEM_SWREG2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_SYSTEM.SWREG2", 
      Read_Dx_l2_system_Swreg2,
      Write_Dx_l2_system_Swreg2,
    },
    { /* 22 : INDEX_DX_L2_SYSTEM_SWREG2_SWREG2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x18, DX_L2_SYSTEM_SWREG2_SWREG2_LEN, DX_L2_SYSTEM_SWREG2_SWREG2_MASK, DX_L2_SYSTEM_SWREG2_SWREG2_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.SWREG2.SWREG2", 
      Read_Dx_l2_system_Swreg2_SWREG2,
      Write_Dx_l2_system_Swreg2_SWREG2,
    },
    { /* 23 : INDEX_DX_L2_SYSTEM_SWREG3 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_SYSTEM.SWREG3", 
      Read_Dx_l2_system_Swreg3,
      Write_Dx_l2_system_Swreg3,
    },
    { /* 24 : INDEX_DX_L2_SYSTEM_SWREG3_SWREG3 */
      DXRT_NPU_REG_SYSTEM, REG_DX_L2_SYSTEM_OFFSET, REG_DX_L2_SYSTEM_OFFSET + 0x1c, DX_L2_SYSTEM_SWREG3_SWREG3_LEN, DX_L2_SYSTEM_SWREG3_SWREG3_MASK, DX_L2_SYSTEM_SWREG3_SWREG3_OFFSET, 0x0, true, true, true, false,
      "DX_L2_SYSTEM.SWREG3.SWREG3", 
      Read_Dx_l2_system_Swreg3_SWREG3,
      Write_Dx_l2_system_Swreg3_SWREG3,
    },
    { /* 25 : INDEX_DX_L2_DEBUG_STAMP0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DEBUG.STAMP0", 
      Read_Dx_l2_debug_Stamp0,
      Write_Dx_l2_debug_Stamp0,
    },
    { /* 26 : INDEX_DX_L2_DEBUG_STAMP0_LAYER_IDX */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x0, DX_L2_DEBUG_STAMP0_LAYER_IDX_LEN, DX_L2_DEBUG_STAMP0_LAYER_IDX_MASK, DX_L2_DEBUG_STAMP0_LAYER_IDX_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DEBUG.STAMP0.LAYER_IDX", 
      Read_Dx_l2_debug_Stamp0_LAYER_IDX,
      Write_Dx_l2_debug_Stamp0_LAYER_IDX,
    },
    { /* 27 : INDEX_DX_L2_DEBUG_STAMP0_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x0, DX_L2_DEBUG_STAMP0_RESERVED0_LEN, DX_L2_DEBUG_STAMP0_RESERVED0_MASK, DX_L2_DEBUG_STAMP0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DEBUG.STAMP0.RESERVED0", 
      Read_Dx_l2_debug_Stamp0_RESERVED0,
      Write_Dx_l2_debug_Stamp0_RESERVED0,
    },
    { /* 28 : INDEX_DX_L2_DEBUG_STAMP0_STAMP_EN */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x0, DX_L2_DEBUG_STAMP0_STAMP_EN_LEN, DX_L2_DEBUG_STAMP0_STAMP_EN_MASK, DX_L2_DEBUG_STAMP0_STAMP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DEBUG.STAMP0.STAMP_EN", 
      Read_Dx_l2_debug_Stamp0_STAMP_EN,
      Write_Dx_l2_debug_Stamp0_STAMP_EN,
    },
    { /* 29 : INDEX_DX_L2_DEBUG_STAMP1 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP1", 
      Read_Dx_l2_debug_Stamp1,
      Write_Dx_l2_debug_Stamp1,
    },
    { /* 30 : INDEX_DX_L2_DEBUG_STAMP1_CLK_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x4, DX_L2_DEBUG_STAMP1_CLK_CNT_LEN, DX_L2_DEBUG_STAMP1_CLK_CNT_MASK, DX_L2_DEBUG_STAMP1_CLK_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP1.CLK_CNT", 
      Read_Dx_l2_debug_Stamp1_CLK_CNT,
      Write_Dx_l2_debug_Stamp1_CLK_CNT,
    },
    { /* 31 : INDEX_DX_L2_DEBUG_STAMP2 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP2", 
      Read_Dx_l2_debug_Stamp2,
      Write_Dx_l2_debug_Stamp2,
    },
    { /* 32 : INDEX_DX_L2_DEBUG_STAMP2_DDR_RD_CNT_IN */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x8, DX_L2_DEBUG_STAMP2_DDR_RD_CNT_IN_LEN, DX_L2_DEBUG_STAMP2_DDR_RD_CNT_IN_MASK, DX_L2_DEBUG_STAMP2_DDR_RD_CNT_IN_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP2.DDR_RD_CNT_IN", 
      Read_Dx_l2_debug_Stamp2_DDR_RD_CNT_IN,
      Write_Dx_l2_debug_Stamp2_DDR_RD_CNT_IN,
    },
    { /* 33 : INDEX_DX_L2_DEBUG_STAMP3 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP3", 
      Read_Dx_l2_debug_Stamp3,
      Write_Dx_l2_debug_Stamp3,
    },
    { /* 34 : INDEX_DX_L2_DEBUG_STAMP3_DDR_RD_CNT_W */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0xc, DX_L2_DEBUG_STAMP3_DDR_RD_CNT_W_LEN, DX_L2_DEBUG_STAMP3_DDR_RD_CNT_W_MASK, DX_L2_DEBUG_STAMP3_DDR_RD_CNT_W_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP3.DDR_RD_CNT_W", 
      Read_Dx_l2_debug_Stamp3_DDR_RD_CNT_W,
      Write_Dx_l2_debug_Stamp3_DDR_RD_CNT_W,
    },
    { /* 35 : INDEX_DX_L2_DEBUG_STAMP4 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP4", 
      Read_Dx_l2_debug_Stamp4,
      Write_Dx_l2_debug_Stamp4,
    },
    { /* 36 : INDEX_DX_L2_DEBUG_STAMP4_DDR_WR_CNT_OUT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x10, DX_L2_DEBUG_STAMP4_DDR_WR_CNT_OUT_LEN, DX_L2_DEBUG_STAMP4_DDR_WR_CNT_OUT_MASK, DX_L2_DEBUG_STAMP4_DDR_WR_CNT_OUT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP4.DDR_WR_CNT_OUT", 
      Read_Dx_l2_debug_Stamp4_DDR_WR_CNT_OUT,
      Write_Dx_l2_debug_Stamp4_DDR_WR_CNT_OUT,
    },
    { /* 37 : INDEX_DX_L2_DEBUG_STAMP5 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP5", 
      Read_Dx_l2_debug_Stamp5,
      Write_Dx_l2_debug_Stamp5,
    },
    { /* 38 : INDEX_DX_L2_DEBUG_STAMP5_CONV_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x14, DX_L2_DEBUG_STAMP5_CONV_CNT_LEN, DX_L2_DEBUG_STAMP5_CONV_CNT_MASK, DX_L2_DEBUG_STAMP5_CONV_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP5.CONV_CNT", 
      Read_Dx_l2_debug_Stamp5_CONV_CNT,
      Write_Dx_l2_debug_Stamp5_CONV_CNT,
    },
    { /* 39 : INDEX_DX_L2_DEBUG_STAMP6 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP6", 
      Read_Dx_l2_debug_Stamp6,
      Write_Dx_l2_debug_Stamp6,
    },
    { /* 40 : INDEX_DX_L2_DEBUG_STAMP6_IDLE_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x18, DX_L2_DEBUG_STAMP6_IDLE_CNT_LEN, DX_L2_DEBUG_STAMP6_IDLE_CNT_MASK, DX_L2_DEBUG_STAMP6_IDLE_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP6.IDLE_CNT", 
      Read_Dx_l2_debug_Stamp6_IDLE_CNT,
      Write_Dx_l2_debug_Stamp6_IDLE_CNT,
    },
    { /* 41 : INDEX_DX_L2_DEBUG_STAMP7 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP7", 
      Read_Dx_l2_debug_Stamp7,
      Write_Dx_l2_debug_Stamp7,
    },
    { /* 42 : INDEX_DX_L2_DEBUG_STAMP7_WAIT_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x1c, DX_L2_DEBUG_STAMP7_WAIT_CNT_LEN, DX_L2_DEBUG_STAMP7_WAIT_CNT_MASK, DX_L2_DEBUG_STAMP7_WAIT_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP7.WAIT_CNT", 
      Read_Dx_l2_debug_Stamp7_WAIT_CNT,
      Write_Dx_l2_debug_Stamp7_WAIT_CNT,
    },
    { /* 43 : INDEX_DX_L2_DEBUG_STAMP8 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP8", 
      Read_Dx_l2_debug_Stamp8,
      Write_Dx_l2_debug_Stamp8,
    },
    { /* 44 : INDEX_DX_L2_DEBUG_STAMP8_BN_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x20, DX_L2_DEBUG_STAMP8_BN_CNT_LEN, DX_L2_DEBUG_STAMP8_BN_CNT_MASK, DX_L2_DEBUG_STAMP8_BN_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP8.BN_CNT", 
      Read_Dx_l2_debug_Stamp8_BN_CNT,
      Write_Dx_l2_debug_Stamp8_BN_CNT,
    },
    { /* 45 : INDEX_DX_L2_DEBUG_STAMP9 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP9", 
      Read_Dx_l2_debug_Stamp9,
      Write_Dx_l2_debug_Stamp9,
    },
    { /* 46 : INDEX_DX_L2_DEBUG_STAMP9_BIAS_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x24, DX_L2_DEBUG_STAMP9_BIAS_CNT_LEN, DX_L2_DEBUG_STAMP9_BIAS_CNT_MASK, DX_L2_DEBUG_STAMP9_BIAS_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP9.BIAS_CNT", 
      Read_Dx_l2_debug_Stamp9_BIAS_CNT,
      Write_Dx_l2_debug_Stamp9_BIAS_CNT,
    },
    { /* 47 : INDEX_DX_L2_DEBUG_STAMP10 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP10", 
      Read_Dx_l2_debug_Stamp10,
      Write_Dx_l2_debug_Stamp10,
    },
    { /* 48 : INDEX_DX_L2_DEBUG_STAMP10_MUL_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x28, DX_L2_DEBUG_STAMP10_MUL_CNT_LEN, DX_L2_DEBUG_STAMP10_MUL_CNT_MASK, DX_L2_DEBUG_STAMP10_MUL_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP10.MUL_CNT", 
      Read_Dx_l2_debug_Stamp10_MUL_CNT,
      Write_Dx_l2_debug_Stamp10_MUL_CNT,
    },
    { /* 49 : INDEX_DX_L2_DEBUG_STAMP11 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP11", 
      Read_Dx_l2_debug_Stamp11,
      Write_Dx_l2_debug_Stamp11,
    },
    { /* 50 : INDEX_DX_L2_DEBUG_STAMP11_ELEMENT_ADD_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x2c, DX_L2_DEBUG_STAMP11_ELEMENT_ADD_CNT_LEN, DX_L2_DEBUG_STAMP11_ELEMENT_ADD_CNT_MASK, DX_L2_DEBUG_STAMP11_ELEMENT_ADD_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP11.ELEMENT_ADD_CNT", 
      Read_Dx_l2_debug_Stamp11_ELEMENT_ADD_CNT,
      Write_Dx_l2_debug_Stamp11_ELEMENT_ADD_CNT,
    },
    { /* 51 : INDEX_DX_L2_DEBUG_STAMP12 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP12", 
      Read_Dx_l2_debug_Stamp12,
      Write_Dx_l2_debug_Stamp12,
    },
    { /* 52 : INDEX_DX_L2_DEBUG_STAMP12_CLK_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x30, DX_L2_DEBUG_STAMP12_CLK_CNT_SEL_LEN, DX_L2_DEBUG_STAMP12_CLK_CNT_SEL_MASK, DX_L2_DEBUG_STAMP12_CLK_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP12.CLK_CNT_SEL", 
      Read_Dx_l2_debug_Stamp12_CLK_CNT_SEL,
      Write_Dx_l2_debug_Stamp12_CLK_CNT_SEL,
    },
    { /* 53 : INDEX_DX_L2_DEBUG_STAMP12_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x30, DX_L2_DEBUG_STAMP12_RESERVED0_LEN, DX_L2_DEBUG_STAMP12_RESERVED0_MASK, DX_L2_DEBUG_STAMP12_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP12.RESERVED0", 
      Read_Dx_l2_debug_Stamp12_RESERVED0,
      Write_Dx_l2_debug_Stamp12_RESERVED0,
    },
    { /* 54 : INDEX_DX_L2_DEBUG_STAMP13 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP13", 
      Read_Dx_l2_debug_Stamp13,
      Write_Dx_l2_debug_Stamp13,
    },
    { /* 55 : INDEX_DX_L2_DEBUG_STAMP13_DDR_RD_CNT_IN_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x34, DX_L2_DEBUG_STAMP13_DDR_RD_CNT_IN_SEL_LEN, DX_L2_DEBUG_STAMP13_DDR_RD_CNT_IN_SEL_MASK, DX_L2_DEBUG_STAMP13_DDR_RD_CNT_IN_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP13.DDR_RD_CNT_IN_SEL", 
      Read_Dx_l2_debug_Stamp13_DDR_RD_CNT_IN_SEL,
      Write_Dx_l2_debug_Stamp13_DDR_RD_CNT_IN_SEL,
    },
    { /* 56 : INDEX_DX_L2_DEBUG_STAMP13_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x34, DX_L2_DEBUG_STAMP13_RESERVED0_LEN, DX_L2_DEBUG_STAMP13_RESERVED0_MASK, DX_L2_DEBUG_STAMP13_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP13.RESERVED0", 
      Read_Dx_l2_debug_Stamp13_RESERVED0,
      Write_Dx_l2_debug_Stamp13_RESERVED0,
    },
    { /* 57 : INDEX_DX_L2_DEBUG_STAMP14 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP14", 
      Read_Dx_l2_debug_Stamp14,
      Write_Dx_l2_debug_Stamp14,
    },
    { /* 58 : INDEX_DX_L2_DEBUG_STAMP14_DDR_RD_CNT_W_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x38, DX_L2_DEBUG_STAMP14_DDR_RD_CNT_W_SEL_LEN, DX_L2_DEBUG_STAMP14_DDR_RD_CNT_W_SEL_MASK, DX_L2_DEBUG_STAMP14_DDR_RD_CNT_W_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP14.DDR_RD_CNT_W_SEL", 
      Read_Dx_l2_debug_Stamp14_DDR_RD_CNT_W_SEL,
      Write_Dx_l2_debug_Stamp14_DDR_RD_CNT_W_SEL,
    },
    { /* 59 : INDEX_DX_L2_DEBUG_STAMP14_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x38, DX_L2_DEBUG_STAMP14_RESERVED0_LEN, DX_L2_DEBUG_STAMP14_RESERVED0_MASK, DX_L2_DEBUG_STAMP14_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP14.RESERVED0", 
      Read_Dx_l2_debug_Stamp14_RESERVED0,
      Write_Dx_l2_debug_Stamp14_RESERVED0,
    },
    { /* 60 : INDEX_DX_L2_DEBUG_STAMP15 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP15", 
      Read_Dx_l2_debug_Stamp15,
      Write_Dx_l2_debug_Stamp15,
    },
    { /* 61 : INDEX_DX_L2_DEBUG_STAMP15_DDR_WR_CNT_OUT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x3c, DX_L2_DEBUG_STAMP15_DDR_WR_CNT_OUT_SEL_LEN, DX_L2_DEBUG_STAMP15_DDR_WR_CNT_OUT_SEL_MASK, DX_L2_DEBUG_STAMP15_DDR_WR_CNT_OUT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP15.DDR_WR_CNT_OUT_SEL", 
      Read_Dx_l2_debug_Stamp15_DDR_WR_CNT_OUT_SEL,
      Write_Dx_l2_debug_Stamp15_DDR_WR_CNT_OUT_SEL,
    },
    { /* 62 : INDEX_DX_L2_DEBUG_STAMP15_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x3c, DX_L2_DEBUG_STAMP15_RESERVED0_LEN, DX_L2_DEBUG_STAMP15_RESERVED0_MASK, DX_L2_DEBUG_STAMP15_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP15.RESERVED0", 
      Read_Dx_l2_debug_Stamp15_RESERVED0,
      Write_Dx_l2_debug_Stamp15_RESERVED0,
    },
    { /* 63 : INDEX_DX_L2_DEBUG_STAMP16 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP16", 
      Read_Dx_l2_debug_Stamp16,
      Write_Dx_l2_debug_Stamp16,
    },
    { /* 64 : INDEX_DX_L2_DEBUG_STAMP16_CONV_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x40, DX_L2_DEBUG_STAMP16_CONV_CNT_SEL_LEN, DX_L2_DEBUG_STAMP16_CONV_CNT_SEL_MASK, DX_L2_DEBUG_STAMP16_CONV_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP16.CONV_CNT_SEL", 
      Read_Dx_l2_debug_Stamp16_CONV_CNT_SEL,
      Write_Dx_l2_debug_Stamp16_CONV_CNT_SEL,
    },
    { /* 65 : INDEX_DX_L2_DEBUG_STAMP16_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x40, DX_L2_DEBUG_STAMP16_RESERVED0_LEN, DX_L2_DEBUG_STAMP16_RESERVED0_MASK, DX_L2_DEBUG_STAMP16_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP16.RESERVED0", 
      Read_Dx_l2_debug_Stamp16_RESERVED0,
      Write_Dx_l2_debug_Stamp16_RESERVED0,
    },
    { /* 66 : INDEX_DX_L2_DEBUG_STAMP17 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP17", 
      Read_Dx_l2_debug_Stamp17,
      Write_Dx_l2_debug_Stamp17,
    },
    { /* 67 : INDEX_DX_L2_DEBUG_STAMP17_IDLE_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x44, DX_L2_DEBUG_STAMP17_IDLE_CNT_SEL_LEN, DX_L2_DEBUG_STAMP17_IDLE_CNT_SEL_MASK, DX_L2_DEBUG_STAMP17_IDLE_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP17.IDLE_CNT_SEL", 
      Read_Dx_l2_debug_Stamp17_IDLE_CNT_SEL,
      Write_Dx_l2_debug_Stamp17_IDLE_CNT_SEL,
    },
    { /* 68 : INDEX_DX_L2_DEBUG_STAMP17_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x44, DX_L2_DEBUG_STAMP17_RESERVED0_LEN, DX_L2_DEBUG_STAMP17_RESERVED0_MASK, DX_L2_DEBUG_STAMP17_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP17.RESERVED0", 
      Read_Dx_l2_debug_Stamp17_RESERVED0,
      Write_Dx_l2_debug_Stamp17_RESERVED0,
    },
    { /* 69 : INDEX_DX_L2_DEBUG_STAMP18 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP18", 
      Read_Dx_l2_debug_Stamp18,
      Write_Dx_l2_debug_Stamp18,
    },
    { /* 70 : INDEX_DX_L2_DEBUG_STAMP18_WAIT_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x48, DX_L2_DEBUG_STAMP18_WAIT_CNT_SEL_LEN, DX_L2_DEBUG_STAMP18_WAIT_CNT_SEL_MASK, DX_L2_DEBUG_STAMP18_WAIT_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP18.WAIT_CNT_SEL", 
      Read_Dx_l2_debug_Stamp18_WAIT_CNT_SEL,
      Write_Dx_l2_debug_Stamp18_WAIT_CNT_SEL,
    },
    { /* 71 : INDEX_DX_L2_DEBUG_STAMP18_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x48, DX_L2_DEBUG_STAMP18_RESERVED0_LEN, DX_L2_DEBUG_STAMP18_RESERVED0_MASK, DX_L2_DEBUG_STAMP18_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP18.RESERVED0", 
      Read_Dx_l2_debug_Stamp18_RESERVED0,
      Write_Dx_l2_debug_Stamp18_RESERVED0,
    },
    { /* 72 : INDEX_DX_L2_DEBUG_STAMP19 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP19", 
      Read_Dx_l2_debug_Stamp19,
      Write_Dx_l2_debug_Stamp19,
    },
    { /* 73 : INDEX_DX_L2_DEBUG_STAMP19_BN_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x4c, DX_L2_DEBUG_STAMP19_BN_CNT_SEL_LEN, DX_L2_DEBUG_STAMP19_BN_CNT_SEL_MASK, DX_L2_DEBUG_STAMP19_BN_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP19.BN_CNT_SEL", 
      Read_Dx_l2_debug_Stamp19_BN_CNT_SEL,
      Write_Dx_l2_debug_Stamp19_BN_CNT_SEL,
    },
    { /* 74 : INDEX_DX_L2_DEBUG_STAMP19_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x4c, DX_L2_DEBUG_STAMP19_RESERVED0_LEN, DX_L2_DEBUG_STAMP19_RESERVED0_MASK, DX_L2_DEBUG_STAMP19_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP19.RESERVED0", 
      Read_Dx_l2_debug_Stamp19_RESERVED0,
      Write_Dx_l2_debug_Stamp19_RESERVED0,
    },
    { /* 75 : INDEX_DX_L2_DEBUG_STAMP20 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP20", 
      Read_Dx_l2_debug_Stamp20,
      Write_Dx_l2_debug_Stamp20,
    },
    { /* 76 : INDEX_DX_L2_DEBUG_STAMP20_BIAS_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x50, DX_L2_DEBUG_STAMP20_BIAS_CNT_SEL_LEN, DX_L2_DEBUG_STAMP20_BIAS_CNT_SEL_MASK, DX_L2_DEBUG_STAMP20_BIAS_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP20.BIAS_CNT_SEL", 
      Read_Dx_l2_debug_Stamp20_BIAS_CNT_SEL,
      Write_Dx_l2_debug_Stamp20_BIAS_CNT_SEL,
    },
    { /* 77 : INDEX_DX_L2_DEBUG_STAMP20_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x50, DX_L2_DEBUG_STAMP20_RESERVED0_LEN, DX_L2_DEBUG_STAMP20_RESERVED0_MASK, DX_L2_DEBUG_STAMP20_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP20.RESERVED0", 
      Read_Dx_l2_debug_Stamp20_RESERVED0,
      Write_Dx_l2_debug_Stamp20_RESERVED0,
    },
    { /* 78 : INDEX_DX_L2_DEBUG_STAMP21 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP21", 
      Read_Dx_l2_debug_Stamp21,
      Write_Dx_l2_debug_Stamp21,
    },
    { /* 79 : INDEX_DX_L2_DEBUG_STAMP21_MUL_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x54, DX_L2_DEBUG_STAMP21_MUL_CNT_SEL_LEN, DX_L2_DEBUG_STAMP21_MUL_CNT_SEL_MASK, DX_L2_DEBUG_STAMP21_MUL_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP21.MUL_CNT_SEL", 
      Read_Dx_l2_debug_Stamp21_MUL_CNT_SEL,
      Write_Dx_l2_debug_Stamp21_MUL_CNT_SEL,
    },
    { /* 80 : INDEX_DX_L2_DEBUG_STAMP21_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x54, DX_L2_DEBUG_STAMP21_RESERVED0_LEN, DX_L2_DEBUG_STAMP21_RESERVED0_MASK, DX_L2_DEBUG_STAMP21_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP21.RESERVED0", 
      Read_Dx_l2_debug_Stamp21_RESERVED0,
      Write_Dx_l2_debug_Stamp21_RESERVED0,
    },
    { /* 81 : INDEX_DX_L2_DEBUG_STAMP22 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP22", 
      Read_Dx_l2_debug_Stamp22,
      Write_Dx_l2_debug_Stamp22,
    },
    { /* 82 : INDEX_DX_L2_DEBUG_STAMP22_ELEMENT_ADD_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x58, DX_L2_DEBUG_STAMP22_ELEMENT_ADD_CNT_SEL_LEN, DX_L2_DEBUG_STAMP22_ELEMENT_ADD_CNT_SEL_MASK, DX_L2_DEBUG_STAMP22_ELEMENT_ADD_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP22.ELEMENT_ADD_CNT_SEL", 
      Read_Dx_l2_debug_Stamp22_ELEMENT_ADD_CNT_SEL,
      Write_Dx_l2_debug_Stamp22_ELEMENT_ADD_CNT_SEL,
    },
    { /* 83 : INDEX_DX_L2_DEBUG_STAMP22_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x58, DX_L2_DEBUG_STAMP22_RESERVED0_LEN, DX_L2_DEBUG_STAMP22_RESERVED0_MASK, DX_L2_DEBUG_STAMP22_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP22.RESERVED0", 
      Read_Dx_l2_debug_Stamp22_RESERVED0,
      Write_Dx_l2_debug_Stamp22_RESERVED0,
    },
    { /* 84 : INDEX_DX_L2_DEBUG_STAMP23 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP23", 
      Read_Dx_l2_debug_Stamp23,
      Write_Dx_l2_debug_Stamp23,
    },
    { /* 85 : INDEX_DX_L2_DEBUG_STAMP23_DMA_RD_WR_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x5c, DX_L2_DEBUG_STAMP23_DMA_RD_WR_CNT_LEN, DX_L2_DEBUG_STAMP23_DMA_RD_WR_CNT_MASK, DX_L2_DEBUG_STAMP23_DMA_RD_WR_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP23.DMA_RD_WR_CNT", 
      Read_Dx_l2_debug_Stamp23_DMA_RD_WR_CNT,
      Write_Dx_l2_debug_Stamp23_DMA_RD_WR_CNT,
    },
    { /* 86 : INDEX_DX_L2_DEBUG_STAMP24 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP24", 
      Read_Dx_l2_debug_Stamp24,
      Write_Dx_l2_debug_Stamp24,
    },
    { /* 87 : INDEX_DX_L2_DEBUG_STAMP24_DMA_RD_ONLY_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x60, DX_L2_DEBUG_STAMP24_DMA_RD_ONLY_CNT_LEN, DX_L2_DEBUG_STAMP24_DMA_RD_ONLY_CNT_MASK, DX_L2_DEBUG_STAMP24_DMA_RD_ONLY_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP24.DMA_RD_ONLY_CNT", 
      Read_Dx_l2_debug_Stamp24_DMA_RD_ONLY_CNT,
      Write_Dx_l2_debug_Stamp24_DMA_RD_ONLY_CNT,
    },
    { /* 88 : INDEX_DX_L2_DEBUG_STAMP25 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.STAMP25", 
      Read_Dx_l2_debug_Stamp25,
      Write_Dx_l2_debug_Stamp25,
    },
    { /* 89 : INDEX_DX_L2_DEBUG_STAMP25_DMA_WR_ONLY_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x64, DX_L2_DEBUG_STAMP25_DMA_WR_ONLY_CNT_LEN, DX_L2_DEBUG_STAMP25_DMA_WR_ONLY_CNT_MASK, DX_L2_DEBUG_STAMP25_DMA_WR_ONLY_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP25.DMA_WR_ONLY_CNT", 
      Read_Dx_l2_debug_Stamp25_DMA_WR_ONLY_CNT,
      Write_Dx_l2_debug_Stamp25_DMA_WR_ONLY_CNT,
    },
    { /* 90 : INDEX_DX_L2_DEBUG_STAMP26 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP26", 
      Read_Dx_l2_debug_Stamp26,
      Write_Dx_l2_debug_Stamp26,
    },
    { /* 91 : INDEX_DX_L2_DEBUG_STAMP26_DMA_RD_WR_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x68, DX_L2_DEBUG_STAMP26_DMA_RD_WR_CNT_SEL_LEN, DX_L2_DEBUG_STAMP26_DMA_RD_WR_CNT_SEL_MASK, DX_L2_DEBUG_STAMP26_DMA_RD_WR_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP26.DMA_RD_WR_CNT_SEL", 
      Read_Dx_l2_debug_Stamp26_DMA_RD_WR_CNT_SEL,
      Write_Dx_l2_debug_Stamp26_DMA_RD_WR_CNT_SEL,
    },
    { /* 92 : INDEX_DX_L2_DEBUG_STAMP26_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x68, DX_L2_DEBUG_STAMP26_RESERVED0_LEN, DX_L2_DEBUG_STAMP26_RESERVED0_MASK, DX_L2_DEBUG_STAMP26_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP26.RESERVED0", 
      Read_Dx_l2_debug_Stamp26_RESERVED0,
      Write_Dx_l2_debug_Stamp26_RESERVED0,
    },
    { /* 93 : INDEX_DX_L2_DEBUG_STAMP27 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP27", 
      Read_Dx_l2_debug_Stamp27,
      Write_Dx_l2_debug_Stamp27,
    },
    { /* 94 : INDEX_DX_L2_DEBUG_STAMP27_DMA_RD_ONLY_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x6c, DX_L2_DEBUG_STAMP27_DMA_RD_ONLY_CNT_SEL_LEN, DX_L2_DEBUG_STAMP27_DMA_RD_ONLY_CNT_SEL_MASK, DX_L2_DEBUG_STAMP27_DMA_RD_ONLY_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP27.DMA_RD_ONLY_CNT_SEL", 
      Read_Dx_l2_debug_Stamp27_DMA_RD_ONLY_CNT_SEL,
      Write_Dx_l2_debug_Stamp27_DMA_RD_ONLY_CNT_SEL,
    },
    { /* 95 : INDEX_DX_L2_DEBUG_STAMP27_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x6c, DX_L2_DEBUG_STAMP27_RESERVED0_LEN, DX_L2_DEBUG_STAMP27_RESERVED0_MASK, DX_L2_DEBUG_STAMP27_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP27.RESERVED0", 
      Read_Dx_l2_debug_Stamp27_RESERVED0,
      Write_Dx_l2_debug_Stamp27_RESERVED0,
    },
    { /* 96 : INDEX_DX_L2_DEBUG_STAMP28 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.STAMP28", 
      Read_Dx_l2_debug_Stamp28,
      Write_Dx_l2_debug_Stamp28,
    },
    { /* 97 : INDEX_DX_L2_DEBUG_STAMP28_DMA_WR_ONLY_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x70, DX_L2_DEBUG_STAMP28_DMA_WR_ONLY_CNT_SEL_LEN, DX_L2_DEBUG_STAMP28_DMA_WR_ONLY_CNT_SEL_MASK, DX_L2_DEBUG_STAMP28_DMA_WR_ONLY_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.STAMP28.DMA_WR_ONLY_CNT_SEL", 
      Read_Dx_l2_debug_Stamp28_DMA_WR_ONLY_CNT_SEL,
      Write_Dx_l2_debug_Stamp28_DMA_WR_ONLY_CNT_SEL,
    },
    { /* 98 : INDEX_DX_L2_DEBUG_STAMP28_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x70, DX_L2_DEBUG_STAMP28_RESERVED0_LEN, DX_L2_DEBUG_STAMP28_RESERVED0_MASK, DX_L2_DEBUG_STAMP28_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.STAMP28.RESERVED0", 
      Read_Dx_l2_debug_Stamp28_RESERVED0,
      Write_Dx_l2_debug_Stamp28_RESERVED0,
    },
    { /* 99 : INDEX_DX_L2_DEBUG_CKSUM0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.CKSUM0", 
      Read_Dx_l2_debug_Cksum0,
      Write_Dx_l2_debug_Cksum0,
    },
    { /* 100 : INDEX_DX_L2_DEBUG_CKSUM0_CKSUM_PE0_SFU_IN */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x74, DX_L2_DEBUG_CKSUM0_CKSUM_PE0_SFU_IN_LEN, DX_L2_DEBUG_CKSUM0_CKSUM_PE0_SFU_IN_MASK, DX_L2_DEBUG_CKSUM0_CKSUM_PE0_SFU_IN_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM0.CKSUM_PE0_SFU_IN", 
      Read_Dx_l2_debug_Cksum0_CKSUM_PE0_SFU_IN,
      Write_Dx_l2_debug_Cksum0_CKSUM_PE0_SFU_IN,
    },
    { /* 101 : INDEX_DX_L2_DEBUG_CKSUM1 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.CKSUM1", 
      Read_Dx_l2_debug_Cksum1,
      Write_Dx_l2_debug_Cksum1,
    },
    { /* 102 : INDEX_DX_L2_DEBUG_CKSUM1_CKSUM_PE1_SFU_IN */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x78, DX_L2_DEBUG_CKSUM1_CKSUM_PE1_SFU_IN_LEN, DX_L2_DEBUG_CKSUM1_CKSUM_PE1_SFU_IN_MASK, DX_L2_DEBUG_CKSUM1_CKSUM_PE1_SFU_IN_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM1.CKSUM_PE1_SFU_IN", 
      Read_Dx_l2_debug_Cksum1_CKSUM_PE1_SFU_IN,
      Write_Dx_l2_debug_Cksum1_CKSUM_PE1_SFU_IN,
    },
    { /* 103 : INDEX_DX_L2_DEBUG_CKSUM2 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.CKSUM2", 
      Read_Dx_l2_debug_Cksum2,
      Write_Dx_l2_debug_Cksum2,
    },
    { /* 104 : INDEX_DX_L2_DEBUG_CKSUM2_CKSUM_PE1_SFU_OUT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x7c, DX_L2_DEBUG_CKSUM2_CKSUM_PE1_SFU_OUT_LEN, DX_L2_DEBUG_CKSUM2_CKSUM_PE1_SFU_OUT_MASK, DX_L2_DEBUG_CKSUM2_CKSUM_PE1_SFU_OUT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM2.CKSUM_PE1_SFU_OUT", 
      Read_Dx_l2_debug_Cksum2_CKSUM_PE1_SFU_OUT,
      Write_Dx_l2_debug_Cksum2_CKSUM_PE1_SFU_OUT,
    },
    { /* 105 : INDEX_DX_L2_DEBUG_CKSUM2_CKSUM_PE0_SFU_OUT */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x7c, DX_L2_DEBUG_CKSUM2_CKSUM_PE0_SFU_OUT_LEN, DX_L2_DEBUG_CKSUM2_CKSUM_PE0_SFU_OUT_MASK, DX_L2_DEBUG_CKSUM2_CKSUM_PE0_SFU_OUT_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM2.CKSUM_PE0_SFU_OUT", 
      Read_Dx_l2_debug_Cksum2_CKSUM_PE0_SFU_OUT,
      Write_Dx_l2_debug_Cksum2_CKSUM_PE0_SFU_OUT,
    },
    { /* 106 : INDEX_DX_L2_DEBUG_CKSUM2_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x7c, DX_L2_DEBUG_CKSUM2_RESERVED0_LEN, DX_L2_DEBUG_CKSUM2_RESERVED0_MASK, DX_L2_DEBUG_CKSUM2_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.CKSUM2.RESERVED0", 
      Read_Dx_l2_debug_Cksum2_RESERVED0,
      Write_Dx_l2_debug_Cksum2_RESERVED0,
    },
    { /* 107 : INDEX_DX_L2_DEBUG_CKSUM3 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x80, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_L2_DEBUG.CKSUM3", 
      Read_Dx_l2_debug_Cksum3,
      Write_Dx_l2_debug_Cksum3,
    },
    { /* 108 : INDEX_DX_L2_DEBUG_CKSUM3_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x80, DX_L2_DEBUG_CKSUM3_RESERVED0_LEN, DX_L2_DEBUG_CKSUM3_RESERVED0_MASK, DX_L2_DEBUG_CKSUM3_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.CKSUM3.RESERVED0", 
      Read_Dx_l2_debug_Cksum3_RESERVED0,
      Write_Dx_l2_debug_Cksum3_RESERVED0,
    },
    { /* 109 : INDEX_DX_L2_DEBUG_CKSUM3_CKSUM_ACC_RST */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x80, DX_L2_DEBUG_CKSUM3_CKSUM_ACC_RST_LEN, DX_L2_DEBUG_CKSUM3_CKSUM_ACC_RST_MASK, DX_L2_DEBUG_CKSUM3_CKSUM_ACC_RST_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DEBUG.CKSUM3.CKSUM_ACC_RST", 
      Read_Dx_l2_debug_Cksum3_CKSUM_ACC_RST,
      Write_Dx_l2_debug_Cksum3_CKSUM_ACC_RST,
    },
    { /* 110 : INDEX_DX_L2_DEBUG_CKSUM3_CKSUM_EN */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x80, DX_L2_DEBUG_CKSUM3_CKSUM_EN_LEN, DX_L2_DEBUG_CKSUM3_CKSUM_EN_MASK, DX_L2_DEBUG_CKSUM3_CKSUM_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DEBUG.CKSUM3.CKSUM_EN", 
      Read_Dx_l2_debug_Cksum3_CKSUM_EN,
      Write_Dx_l2_debug_Cksum3_CKSUM_EN,
    },
    { /* 111 : INDEX_DX_L2_DEBUG_CKSUM4 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x84, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.CKSUM4", 
      Read_Dx_l2_debug_Cksum4,
      Write_Dx_l2_debug_Cksum4,
    },
    { /* 112 : INDEX_DX_L2_DEBUG_CKSUM4_CKSUM_PE0_SFU_IN_ACC */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x84, DX_L2_DEBUG_CKSUM4_CKSUM_PE0_SFU_IN_ACC_LEN, DX_L2_DEBUG_CKSUM4_CKSUM_PE0_SFU_IN_ACC_MASK, DX_L2_DEBUG_CKSUM4_CKSUM_PE0_SFU_IN_ACC_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM4.CKSUM_PE0_SFU_IN_ACC", 
      Read_Dx_l2_debug_Cksum4_CKSUM_PE0_SFU_IN_ACC,
      Write_Dx_l2_debug_Cksum4_CKSUM_PE0_SFU_IN_ACC,
    },
    { /* 113 : INDEX_DX_L2_DEBUG_CKSUM5 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x88, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_L2_DEBUG.CKSUM5", 
      Read_Dx_l2_debug_Cksum5,
      Write_Dx_l2_debug_Cksum5,
    },
    { /* 114 : INDEX_DX_L2_DEBUG_CKSUM5_CKSUM_PE1_SFU_IN_ACC */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x88, DX_L2_DEBUG_CKSUM5_CKSUM_PE1_SFU_IN_ACC_LEN, DX_L2_DEBUG_CKSUM5_CKSUM_PE1_SFU_IN_ACC_MASK, DX_L2_DEBUG_CKSUM5_CKSUM_PE1_SFU_IN_ACC_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM5.CKSUM_PE1_SFU_IN_ACC", 
      Read_Dx_l2_debug_Cksum5_CKSUM_PE1_SFU_IN_ACC,
      Write_Dx_l2_debug_Cksum5_CKSUM_PE1_SFU_IN_ACC,
    },
    { /* 115 : INDEX_DX_L2_DEBUG_CKSUM6 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x8c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DEBUG.CKSUM6", 
      Read_Dx_l2_debug_Cksum6,
      Write_Dx_l2_debug_Cksum6,
    },
    { /* 116 : INDEX_DX_L2_DEBUG_CKSUM6_CKSUM_PE1_SFU_OUT_ACC */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x8c, DX_L2_DEBUG_CKSUM6_CKSUM_PE1_SFU_OUT_ACC_LEN, DX_L2_DEBUG_CKSUM6_CKSUM_PE1_SFU_OUT_ACC_MASK, DX_L2_DEBUG_CKSUM6_CKSUM_PE1_SFU_OUT_ACC_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM6.CKSUM_PE1_SFU_OUT_ACC", 
      Read_Dx_l2_debug_Cksum6_CKSUM_PE1_SFU_OUT_ACC,
      Write_Dx_l2_debug_Cksum6_CKSUM_PE1_SFU_OUT_ACC,
    },
    { /* 117 : INDEX_DX_L2_DEBUG_CKSUM6_CKSUM_PE0_SFU_OUT_ACC */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x8c, DX_L2_DEBUG_CKSUM6_CKSUM_PE0_SFU_OUT_ACC_LEN, DX_L2_DEBUG_CKSUM6_CKSUM_PE0_SFU_OUT_ACC_MASK, DX_L2_DEBUG_CKSUM6_CKSUM_PE0_SFU_OUT_ACC_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DEBUG.CKSUM6.CKSUM_PE0_SFU_OUT_ACC", 
      Read_Dx_l2_debug_Cksum6_CKSUM_PE0_SFU_OUT_ACC,
      Write_Dx_l2_debug_Cksum6_CKSUM_PE0_SFU_OUT_ACC,
    },
    { /* 118 : INDEX_DX_L2_DEBUG_CKSUM6_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_L2_DEBUG_OFFSET, REG_DX_L2_DEBUG_OFFSET + 0x8c, DX_L2_DEBUG_CKSUM6_RESERVED0_LEN, DX_L2_DEBUG_CKSUM6_RESERVED0_MASK, DX_L2_DEBUG_CKSUM6_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DEBUG.CKSUM6.RESERVED0", 
      Read_Dx_l2_debug_Cksum6_RESERVED0,
      Write_Dx_l2_debug_Cksum6_RESERVED0,
    },
    { /* 119 : INDEX_DX_L2_DMA_AXI_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.AXI_BASE_ADDR_LOW", 
      Read_Dx_l2_dma_Axi_base_addr_low,
      Write_Dx_l2_dma_Axi_base_addr_low,
    },
    { /* 120 : INDEX_DX_L2_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x0, DX_L2_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW_LEN, DX_L2_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW_MASK, DX_L2_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW", 
      Read_Dx_l2_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW,
      Write_Dx_l2_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW,
    },
    { /* 121 : INDEX_DX_L2_DMA_AXI_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.AXI_BASE_ADDR_HIGH", 
      Read_Dx_l2_dma_Axi_base_addr_high,
      Write_Dx_l2_dma_Axi_base_addr_high,
    },
    { /* 122 : INDEX_DX_L2_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x4, DX_L2_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH_LEN, DX_L2_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH_MASK, DX_L2_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH", 
      Read_Dx_l2_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH,
      Write_Dx_l2_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH,
    },
    { /* 123 : INDEX_DX_L2_DMA_DMA0_AXI4_RADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA0_AXI4_RADDR", 
      Read_Dx_l2_dma_Dma0_axi4_raddr,
      Write_Dx_l2_dma_Dma0_axi4_raddr,
    },
    { /* 124 : INDEX_DX_L2_DMA_DMA0_AXI4_RADDR_DMA0_AXI4_RADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x8, DX_L2_DMA_DMA0_AXI4_RADDR_DMA0_AXI4_RADDR_LEN, DX_L2_DMA_DMA0_AXI4_RADDR_DMA0_AXI4_RADDR_MASK, DX_L2_DMA_DMA0_AXI4_RADDR_DMA0_AXI4_RADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_AXI4_RADDR.DMA0_AXI4_RADDR", 
      Read_Dx_l2_dma_Dma0_axi4_raddr_DMA0_AXI4_RADDR,
      Write_Dx_l2_dma_Dma0_axi4_raddr_DMA0_AXI4_RADDR,
    },
    { /* 125 : INDEX_DX_L2_DMA_DMA0_AXI4_WADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA0_AXI4_WADDR", 
      Read_Dx_l2_dma_Dma0_axi4_waddr,
      Write_Dx_l2_dma_Dma0_axi4_waddr,
    },
    { /* 126 : INDEX_DX_L2_DMA_DMA0_AXI4_WADDR_DMA0_AXI4_WADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0xc, DX_L2_DMA_DMA0_AXI4_WADDR_DMA0_AXI4_WADDR_LEN, DX_L2_DMA_DMA0_AXI4_WADDR_DMA0_AXI4_WADDR_MASK, DX_L2_DMA_DMA0_AXI4_WADDR_DMA0_AXI4_WADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_AXI4_WADDR.DMA0_AXI4_WADDR", 
      Read_Dx_l2_dma_Dma0_axi4_waddr_DMA0_AXI4_WADDR,
      Write_Dx_l2_dma_Dma0_axi4_waddr_DMA0_AXI4_WADDR,
    },
    { /* 127 : INDEX_DX_L2_DMA_DMA1_AXI4_RADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA1_AXI4_RADDR", 
      Read_Dx_l2_dma_Dma1_axi4_raddr,
      Write_Dx_l2_dma_Dma1_axi4_raddr,
    },
    { /* 128 : INDEX_DX_L2_DMA_DMA1_AXI4_RADDR_DMA1_AXI4_RADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x10, DX_L2_DMA_DMA1_AXI4_RADDR_DMA1_AXI4_RADDR_LEN, DX_L2_DMA_DMA1_AXI4_RADDR_DMA1_AXI4_RADDR_MASK, DX_L2_DMA_DMA1_AXI4_RADDR_DMA1_AXI4_RADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_AXI4_RADDR.DMA1_AXI4_RADDR", 
      Read_Dx_l2_dma_Dma1_axi4_raddr_DMA1_AXI4_RADDR,
      Write_Dx_l2_dma_Dma1_axi4_raddr_DMA1_AXI4_RADDR,
    },
    { /* 129 : INDEX_DX_L2_DMA_DMA1_AXI4_WADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA1_AXI4_WADDR", 
      Read_Dx_l2_dma_Dma1_axi4_waddr,
      Write_Dx_l2_dma_Dma1_axi4_waddr,
    },
    { /* 130 : INDEX_DX_L2_DMA_DMA1_AXI4_WADDR_DMA1_AXI4_WADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x14, DX_L2_DMA_DMA1_AXI4_WADDR_DMA1_AXI4_WADDR_LEN, DX_L2_DMA_DMA1_AXI4_WADDR_DMA1_AXI4_WADDR_MASK, DX_L2_DMA_DMA1_AXI4_WADDR_DMA1_AXI4_WADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_AXI4_WADDR.DMA1_AXI4_WADDR", 
      Read_Dx_l2_dma_Dma1_axi4_waddr_DMA1_AXI4_WADDR,
      Write_Dx_l2_dma_Dma1_axi4_waddr_DMA1_AXI4_WADDR,
    },
    { /* 131 : INDEX_DX_L2_DMA_DMA0_SRAM_DST_ADDR0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA0_SRAM_DST_ADDR0", 
      Read_Dx_l2_dma_Dma0_sram_dst_addr0,
      Write_Dx_l2_dma_Dma0_sram_dst_addr0,
    },
    { /* 132 : INDEX_DX_L2_DMA_DMA0_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x18, DX_L2_DMA_DMA0_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0_LEN, DX_L2_DMA_DMA0_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0_MASK, DX_L2_DMA_DMA0_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0", 
      Read_Dx_l2_dma_Dma0_sram_dst_addr0_DMA0_SRAM_DST_ADDR0,
      Write_Dx_l2_dma_Dma0_sram_dst_addr0_DMA0_SRAM_DST_ADDR0,
    },
    { /* 133 : INDEX_DX_L2_DMA_DMA0_SRAM_DST_ADDR1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA0_SRAM_DST_ADDR1", 
      Read_Dx_l2_dma_Dma0_sram_dst_addr1,
      Write_Dx_l2_dma_Dma0_sram_dst_addr1,
    },
    { /* 134 : INDEX_DX_L2_DMA_DMA0_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x1c, DX_L2_DMA_DMA0_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1_LEN, DX_L2_DMA_DMA0_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1_MASK, DX_L2_DMA_DMA0_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1", 
      Read_Dx_l2_dma_Dma0_sram_dst_addr1_DMA0_SRAM_DST_ADDR1,
      Write_Dx_l2_dma_Dma0_sram_dst_addr1_DMA0_SRAM_DST_ADDR1,
    },
    { /* 135 : INDEX_DX_L2_DMA_DMA0_SRAM_SRC_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA0_SRAM_SRC_ADDR", 
      Read_Dx_l2_dma_Dma0_sram_src_addr,
      Write_Dx_l2_dma_Dma0_sram_src_addr,
    },
    { /* 136 : INDEX_DX_L2_DMA_DMA0_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x20, DX_L2_DMA_DMA0_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR_LEN, DX_L2_DMA_DMA0_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR_MASK, DX_L2_DMA_DMA0_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR", 
      Read_Dx_l2_dma_Dma0_sram_src_addr_DMA0_SRAM_SRC_ADDR,
      Write_Dx_l2_dma_Dma0_sram_src_addr_DMA0_SRAM_SRC_ADDR,
    },
    { /* 137 : INDEX_DX_L2_DMA_DMA0_READ_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_L2_DMA.DMA0_READ_SIZE", 
      Read_Dx_l2_dma_Dma0_read_size,
      Write_Dx_l2_dma_Dma0_read_size,
    },
    { /* 138 : INDEX_DX_L2_DMA_DMA0_READ_SIZE_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x24, DX_L2_DMA_DMA0_READ_SIZE_RESERVED1_LEN, DX_L2_DMA_DMA0_READ_SIZE_RESERVED1_MASK, DX_L2_DMA_DMA0_READ_SIZE_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.DMA0_READ_SIZE.RESERVED1", 
      Read_Dx_l2_dma_Dma0_read_size_RESERVED1,
      Write_Dx_l2_dma_Dma0_read_size_RESERVED1,
    },
    { /* 139 : INDEX_DX_L2_DMA_DMA0_READ_SIZE_DMA0_READ_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x24, DX_L2_DMA_DMA0_READ_SIZE_DMA0_READ_SIZE_LEN, DX_L2_DMA_DMA0_READ_SIZE_DMA0_READ_SIZE_MASK, DX_L2_DMA_DMA0_READ_SIZE_DMA0_READ_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_READ_SIZE.DMA0_READ_SIZE", 
      Read_Dx_l2_dma_Dma0_read_size_DMA0_READ_SIZE,
      Write_Dx_l2_dma_Dma0_read_size_DMA0_READ_SIZE,
    },
    { /* 140 : INDEX_DX_L2_DMA_DMA0_READ_SIZE_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x24, DX_L2_DMA_DMA0_READ_SIZE_RESERVED0_LEN, DX_L2_DMA_DMA0_READ_SIZE_RESERVED0_MASK, DX_L2_DMA_DMA0_READ_SIZE_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.DMA0_READ_SIZE.RESERVED0", 
      Read_Dx_l2_dma_Dma0_read_size_RESERVED0,
      Write_Dx_l2_dma_Dma0_read_size_RESERVED0,
    },
    { /* 141 : INDEX_DX_L2_DMA_DMA0_WRITE_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_L2_DMA.DMA0_WRITE_SIZE", 
      Read_Dx_l2_dma_Dma0_write_size,
      Write_Dx_l2_dma_Dma0_write_size,
    },
    { /* 142 : INDEX_DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x28, DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED1_LEN, DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED1_MASK, DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED1", 
      Read_Dx_l2_dma_Dma0_write_size_RESERVED1,
      Write_Dx_l2_dma_Dma0_write_size_RESERVED1,
    },
    { /* 143 : INDEX_DX_L2_DMA_DMA0_WRITE_SIZE_DMA0_WRITE_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x28, DX_L2_DMA_DMA0_WRITE_SIZE_DMA0_WRITE_SIZE_LEN, DX_L2_DMA_DMA0_WRITE_SIZE_DMA0_WRITE_SIZE_MASK, DX_L2_DMA_DMA0_WRITE_SIZE_DMA0_WRITE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA0_WRITE_SIZE.DMA0_WRITE_SIZE", 
      Read_Dx_l2_dma_Dma0_write_size_DMA0_WRITE_SIZE,
      Write_Dx_l2_dma_Dma0_write_size_DMA0_WRITE_SIZE,
    },
    { /* 144 : INDEX_DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x28, DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED0_LEN, DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED0_MASK, DX_L2_DMA_DMA0_WRITE_SIZE_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.DMA0_WRITE_SIZE.RESERVED0", 
      Read_Dx_l2_dma_Dma0_write_size_RESERVED0,
      Write_Dx_l2_dma_Dma0_write_size_RESERVED0,
    },
    { /* 145 : INDEX_DX_L2_DMA_DMA1_SRAM_DST_ADDR0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA1_SRAM_DST_ADDR0", 
      Read_Dx_l2_dma_Dma1_sram_dst_addr0,
      Write_Dx_l2_dma_Dma1_sram_dst_addr0,
    },
    { /* 146 : INDEX_DX_L2_DMA_DMA1_SRAM_DST_ADDR0_DMA1_SRAM_DST_ADDR0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x2c, DX_L2_DMA_DMA1_SRAM_DST_ADDR0_DMA1_SRAM_DST_ADDR0_LEN, DX_L2_DMA_DMA1_SRAM_DST_ADDR0_DMA1_SRAM_DST_ADDR0_MASK, DX_L2_DMA_DMA1_SRAM_DST_ADDR0_DMA1_SRAM_DST_ADDR0_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_SRAM_DST_ADDR0.DMA1_SRAM_DST_ADDR0", 
      Read_Dx_l2_dma_Dma1_sram_dst_addr0_DMA1_SRAM_DST_ADDR0,
      Write_Dx_l2_dma_Dma1_sram_dst_addr0_DMA1_SRAM_DST_ADDR0,
    },
    { /* 147 : INDEX_DX_L2_DMA_DMA1_SRAM_DST_ADDR1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA1_SRAM_DST_ADDR1", 
      Read_Dx_l2_dma_Dma1_sram_dst_addr1,
      Write_Dx_l2_dma_Dma1_sram_dst_addr1,
    },
    { /* 148 : INDEX_DX_L2_DMA_DMA1_SRAM_DST_ADDR1_DMA1_SRAM_DST_ADDR1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x30, DX_L2_DMA_DMA1_SRAM_DST_ADDR1_DMA1_SRAM_DST_ADDR1_LEN, DX_L2_DMA_DMA1_SRAM_DST_ADDR1_DMA1_SRAM_DST_ADDR1_MASK, DX_L2_DMA_DMA1_SRAM_DST_ADDR1_DMA1_SRAM_DST_ADDR1_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_SRAM_DST_ADDR1.DMA1_SRAM_DST_ADDR1", 
      Read_Dx_l2_dma_Dma1_sram_dst_addr1_DMA1_SRAM_DST_ADDR1,
      Write_Dx_l2_dma_Dma1_sram_dst_addr1_DMA1_SRAM_DST_ADDR1,
    },
    { /* 149 : INDEX_DX_L2_DMA_DMA1_SRAM_SRC_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.DMA1_SRAM_SRC_ADDR", 
      Read_Dx_l2_dma_Dma1_sram_src_addr,
      Write_Dx_l2_dma_Dma1_sram_src_addr,
    },
    { /* 150 : INDEX_DX_L2_DMA_DMA1_SRAM_SRC_ADDR_DMA1_SRAM_SRC_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x34, DX_L2_DMA_DMA1_SRAM_SRC_ADDR_DMA1_SRAM_SRC_ADDR_LEN, DX_L2_DMA_DMA1_SRAM_SRC_ADDR_DMA1_SRAM_SRC_ADDR_MASK, DX_L2_DMA_DMA1_SRAM_SRC_ADDR_DMA1_SRAM_SRC_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_SRAM_SRC_ADDR.DMA1_SRAM_SRC_ADDR", 
      Read_Dx_l2_dma_Dma1_sram_src_addr_DMA1_SRAM_SRC_ADDR,
      Write_Dx_l2_dma_Dma1_sram_src_addr_DMA1_SRAM_SRC_ADDR,
    },
    { /* 151 : INDEX_DX_L2_DMA_DMA1_READ_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_L2_DMA.DMA1_READ_SIZE", 
      Read_Dx_l2_dma_Dma1_read_size,
      Write_Dx_l2_dma_Dma1_read_size,
    },
    { /* 152 : INDEX_DX_L2_DMA_DMA1_READ_SIZE_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x38, DX_L2_DMA_DMA1_READ_SIZE_RESERVED1_LEN, DX_L2_DMA_DMA1_READ_SIZE_RESERVED1_MASK, DX_L2_DMA_DMA1_READ_SIZE_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.DMA1_READ_SIZE.RESERVED1", 
      Read_Dx_l2_dma_Dma1_read_size_RESERVED1,
      Write_Dx_l2_dma_Dma1_read_size_RESERVED1,
    },
    { /* 153 : INDEX_DX_L2_DMA_DMA1_READ_SIZE_DMA1_READ_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x38, DX_L2_DMA_DMA1_READ_SIZE_DMA1_READ_SIZE_LEN, DX_L2_DMA_DMA1_READ_SIZE_DMA1_READ_SIZE_MASK, DX_L2_DMA_DMA1_READ_SIZE_DMA1_READ_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_READ_SIZE.DMA1_READ_SIZE", 
      Read_Dx_l2_dma_Dma1_read_size_DMA1_READ_SIZE,
      Write_Dx_l2_dma_Dma1_read_size_DMA1_READ_SIZE,
    },
    { /* 154 : INDEX_DX_L2_DMA_DMA1_READ_SIZE_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x38, DX_L2_DMA_DMA1_READ_SIZE_RESERVED0_LEN, DX_L2_DMA_DMA1_READ_SIZE_RESERVED0_MASK, DX_L2_DMA_DMA1_READ_SIZE_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.DMA1_READ_SIZE.RESERVED0", 
      Read_Dx_l2_dma_Dma1_read_size_RESERVED0,
      Write_Dx_l2_dma_Dma1_read_size_RESERVED0,
    },
    { /* 155 : INDEX_DX_L2_DMA_DMA1_WRITE_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_L2_DMA.DMA1_WRITE_SIZE", 
      Read_Dx_l2_dma_Dma1_write_size,
      Write_Dx_l2_dma_Dma1_write_size,
    },
    { /* 156 : INDEX_DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x3c, DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED1_LEN, DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED1_MASK, DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED1", 
      Read_Dx_l2_dma_Dma1_write_size_RESERVED1,
      Write_Dx_l2_dma_Dma1_write_size_RESERVED1,
    },
    { /* 157 : INDEX_DX_L2_DMA_DMA1_WRITE_SIZE_DMA1_WRITE_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x3c, DX_L2_DMA_DMA1_WRITE_SIZE_DMA1_WRITE_SIZE_LEN, DX_L2_DMA_DMA1_WRITE_SIZE_DMA1_WRITE_SIZE_MASK, DX_L2_DMA_DMA1_WRITE_SIZE_DMA1_WRITE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.DMA1_WRITE_SIZE.DMA1_WRITE_SIZE", 
      Read_Dx_l2_dma_Dma1_write_size_DMA1_WRITE_SIZE,
      Write_Dx_l2_dma_Dma1_write_size_DMA1_WRITE_SIZE,
    },
    { /* 158 : INDEX_DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x3c, DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED0_LEN, DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED0_MASK, DX_L2_DMA_DMA1_WRITE_SIZE_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.DMA1_WRITE_SIZE.RESERVED0", 
      Read_Dx_l2_dma_Dma1_write_size_RESERVED0,
      Write_Dx_l2_dma_Dma1_write_size_RESERVED0,
    },
    { /* 159 : INDEX_DX_L2_DMA_DMA_CMD */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, false, true, true, true,
      "DX_L2_DMA.DMA_CMD", 
      Read_Dx_l2_dma_Dma_cmd,
      Write_Dx_l2_dma_Dma_cmd,
    },
    { /* 160 : INDEX_DX_L2_DMA_DMA_CMD_DMA_START_CMD */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x40, DX_L2_DMA_DMA_CMD_DMA_START_CMD_LEN, DX_L2_DMA_DMA_CMD_DMA_START_CMD_MASK, DX_L2_DMA_DMA_CMD_DMA_START_CMD_OFFSET, 0x0, false, true, true, false,
      "DX_L2_DMA.DMA_CMD.DMA_START_CMD", 
      Read_Dx_l2_dma_Dma_cmd_DMA_START_CMD,
      Write_Dx_l2_dma_Dma_cmd_DMA_START_CMD,
    },
    { /* 161 : INDEX_DX_L2_DMA_DMA_CMD_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x40, DX_L2_DMA_DMA_CMD_RESERVED0_LEN, DX_L2_DMA_DMA_CMD_RESERVED0_MASK, DX_L2_DMA_DMA_CMD_RESERVED0_OFFSET, 0x0, false, true, false, false,
      "DX_L2_DMA.DMA_CMD.RESERVED0", 
      Read_Dx_l2_dma_Dma_cmd_RESERVED0,
      Write_Dx_l2_dma_Dma_cmd_RESERVED0,
    },
    { /* 162 : INDEX_DX_L2_DMA_DMA_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DMA.DMA_STATUS", 
      Read_Dx_l2_dma_Dma_status,
      Write_Dx_l2_dma_Dma_status,
    },
    { /* 163 : INDEX_DX_L2_DMA_DMA_STATUS_DMA_DONE_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x44, DX_L2_DMA_DMA_STATUS_DMA_DONE_STATUS_LEN, DX_L2_DMA_DMA_STATUS_DMA_DONE_STATUS_MASK, DX_L2_DMA_DMA_STATUS_DMA_DONE_STATUS_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DMA.DMA_STATUS.DMA_DONE_STATUS", 
      Read_Dx_l2_dma_Dma_status_DMA_DONE_STATUS,
      Write_Dx_l2_dma_Dma_status_DMA_DONE_STATUS,
    },
    { /* 164 : INDEX_DX_L2_DMA_DMA_STATUS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x44, DX_L2_DMA_DMA_STATUS_RESERVED0_LEN, DX_L2_DMA_DMA_STATUS_RESERVED0_MASK, DX_L2_DMA_DMA_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.DMA_STATUS.RESERVED0", 
      Read_Dx_l2_dma_Dma_status_RESERVED0,
      Write_Dx_l2_dma_Dma_status_RESERVED0,
    },
    { /* 165 : INDEX_DX_L2_DMA_SFR_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.SFR_BASE_ADDR_LOW", 
      Read_Dx_l2_dma_Sfr_base_addr_low,
      Write_Dx_l2_dma_Sfr_base_addr_low,
    },
    { /* 166 : INDEX_DX_L2_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x48, DX_L2_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_LEN, DX_L2_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_MASK, DX_L2_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW", 
      Read_Dx_l2_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW,
      Write_Dx_l2_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW,
    },
    { /* 167 : INDEX_DX_L2_DMA_SFR_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_DMA.SFR_BASE_ADDR_HIGH", 
      Read_Dx_l2_dma_Sfr_base_addr_high,
      Write_Dx_l2_dma_Sfr_base_addr_high,
    },
    { /* 168 : INDEX_DX_L2_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x4c, DX_L2_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_LEN, DX_L2_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_MASK, DX_L2_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH", 
      Read_Dx_l2_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH,
      Write_Dx_l2_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH,
    },
    { /* 169 : INDEX_DX_L2_DMA_SFR_ADDR_OFFS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_L2_DMA.SFR_ADDR_OFFS", 
      Read_Dx_l2_dma_Sfr_addr_offs,
      Write_Dx_l2_dma_Sfr_addr_offs,
    },
    { /* 170 : INDEX_DX_L2_DMA_SFR_ADDR_OFFS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x50, DX_L2_DMA_SFR_ADDR_OFFS_RESERVED0_LEN, DX_L2_DMA_SFR_ADDR_OFFS_RESERVED0_MASK, DX_L2_DMA_SFR_ADDR_OFFS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.SFR_ADDR_OFFS.RESERVED0", 
      Read_Dx_l2_dma_Sfr_addr_offs_RESERVED0,
      Write_Dx_l2_dma_Sfr_addr_offs_RESERVED0,
    },
    { /* 171 : INDEX_DX_L2_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x50, DX_L2_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_LEN, DX_L2_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_MASK, DX_L2_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS", 
      Read_Dx_l2_dma_Sfr_addr_offs_SFR_ADDR_OFFS,
      Write_Dx_l2_dma_Sfr_addr_offs_SFR_ADDR_OFFS,
    },
    { /* 172 : INDEX_DX_L2_DMA_SFR_START_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.SFR_START_ADDR", 
      Read_Dx_l2_dma_Sfr_start_addr,
      Write_Dx_l2_dma_Sfr_start_addr,
    },
    { /* 173 : INDEX_DX_L2_DMA_SFR_START_ADDR_SFR_START_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x54, DX_L2_DMA_SFR_START_ADDR_SFR_START_ADDR_LEN, DX_L2_DMA_SFR_START_ADDR_SFR_START_ADDR_MASK, DX_L2_DMA_SFR_START_ADDR_SFR_START_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.SFR_START_ADDR.SFR_START_ADDR", 
      Read_Dx_l2_dma_Sfr_start_addr_SFR_START_ADDR,
      Write_Dx_l2_dma_Sfr_start_addr_SFR_START_ADDR,
    },
    { /* 174 : INDEX_DX_L2_DMA_SFR_START_ADDR_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x54, DX_L2_DMA_SFR_START_ADDR_RESERVED0_LEN, DX_L2_DMA_SFR_START_ADDR_RESERVED0_MASK, DX_L2_DMA_SFR_START_ADDR_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.SFR_START_ADDR.RESERVED0", 
      Read_Dx_l2_dma_Sfr_start_addr_RESERVED0,
      Write_Dx_l2_dma_Sfr_start_addr_RESERVED0,
    },
    { /* 175 : INDEX_DX_L2_DMA_SFR_MOVE_CNT */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.SFR_MOVE_CNT", 
      Read_Dx_l2_dma_Sfr_move_cnt,
      Write_Dx_l2_dma_Sfr_move_cnt,
    },
    { /* 176 : INDEX_DX_L2_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x58, DX_L2_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT_LEN, DX_L2_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT_MASK, DX_L2_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT", 
      Read_Dx_l2_dma_Sfr_move_cnt_SFR_MOVE_CNT,
      Write_Dx_l2_dma_Sfr_move_cnt_SFR_MOVE_CNT,
    },
    { /* 177 : INDEX_DX_L2_DMA_SFR_MOVE_CNT_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x58, DX_L2_DMA_SFR_MOVE_CNT_RESERVED0_LEN, DX_L2_DMA_SFR_MOVE_CNT_RESERVED0_MASK, DX_L2_DMA_SFR_MOVE_CNT_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.SFR_MOVE_CNT.RESERVED0", 
      Read_Dx_l2_dma_Sfr_move_cnt_RESERVED0,
      Write_Dx_l2_dma_Sfr_move_cnt_RESERVED0,
    },
    { /* 178 : INDEX_DX_L2_DMA_SFR_ID */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, false, true, true, true,
      "DX_L2_DMA.SFR_ID", 
      Read_Dx_l2_dma_Sfr_id,
      Write_Dx_l2_dma_Sfr_id,
    },
    { /* 179 : INDEX_DX_L2_DMA_SFR_ID_SFR_ID */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x5c, DX_L2_DMA_SFR_ID_SFR_ID_LEN, DX_L2_DMA_SFR_ID_SFR_ID_MASK, DX_L2_DMA_SFR_ID_SFR_ID_OFFSET, 0x0, false, true, true, false,
      "DX_L2_DMA.SFR_ID.SFR_ID", 
      Read_Dx_l2_dma_Sfr_id_SFR_ID,
      Write_Dx_l2_dma_Sfr_id_SFR_ID,
    },
    { /* 180 : INDEX_DX_L2_DMA_SFR_ID_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x5c, DX_L2_DMA_SFR_ID_RESERVED0_LEN, DX_L2_DMA_SFR_ID_RESERVED0_MASK, DX_L2_DMA_SFR_ID_RESERVED0_OFFSET, 0x0, false, true, false, false,
      "DX_L2_DMA.SFR_ID.RESERVED0", 
      Read_Dx_l2_dma_Sfr_id_RESERVED0,
      Write_Dx_l2_dma_Sfr_id_RESERVED0,
    },
    { /* 181 : INDEX_DX_L2_DMA_SFR_DMA_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DMA.SFR_DMA_STATUS", 
      Read_Dx_l2_dma_Sfr_dma_status,
      Write_Dx_l2_dma_Sfr_dma_status,
    },
    { /* 182 : INDEX_DX_L2_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x60, DX_L2_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS_LEN, DX_L2_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS_MASK, DX_L2_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS", 
      Read_Dx_l2_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS,
      Write_Dx_l2_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS,
    },
    { /* 183 : INDEX_DX_L2_DMA_SFR_DMA_STATUS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x60, DX_L2_DMA_SFR_DMA_STATUS_RESERVED0_LEN, DX_L2_DMA_SFR_DMA_STATUS_RESERVED0_MASK, DX_L2_DMA_SFR_DMA_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.SFR_DMA_STATUS.RESERVED0", 
      Read_Dx_l2_dma_Sfr_dma_status_RESERVED0,
      Write_Dx_l2_dma_Sfr_dma_status_RESERVED0,
    },
    { /* 184 : INDEX_DX_L2_DMA_MISC */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.MISC", 
      Read_Dx_l2_dma_Misc,
      Write_Dx_l2_dma_Misc,
    },
    { /* 185 : INDEX_DX_L2_DMA_MISC_FLUSH_ENABLE */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x64, DX_L2_DMA_MISC_FLUSH_ENABLE_LEN, DX_L2_DMA_MISC_FLUSH_ENABLE_MASK, DX_L2_DMA_MISC_FLUSH_ENABLE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.MISC.FLUSH_ENABLE", 
      Read_Dx_l2_dma_Misc_FLUSH_ENABLE,
      Write_Dx_l2_dma_Misc_FLUSH_ENABLE,
    },
    { /* 186 : INDEX_DX_L2_DMA_MISC_NPU_OP_HALT */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x64, DX_L2_DMA_MISC_NPU_OP_HALT_LEN, DX_L2_DMA_MISC_NPU_OP_HALT_MASK, DX_L2_DMA_MISC_NPU_OP_HALT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.MISC.NPU_OP_HALT", 
      Read_Dx_l2_dma_Misc_NPU_OP_HALT,
      Write_Dx_l2_dma_Misc_NPU_OP_HALT,
    },
    { /* 187 : INDEX_DX_L2_DMA_MISC_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x64, DX_L2_DMA_MISC_RESERVED0_LEN, DX_L2_DMA_MISC_RESERVED0_MASK, DX_L2_DMA_MISC_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.MISC.RESERVED0", 
      Read_Dx_l2_dma_Misc_RESERVED0,
      Write_Dx_l2_dma_Misc_RESERVED0,
    },
    { /* 188 : INDEX_DX_L2_DMA_FLUSH_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_L2_DMA.FLUSH_STATUS", 
      Read_Dx_l2_dma_Flush_status,
      Write_Dx_l2_dma_Flush_status,
    },
    { /* 189 : INDEX_DX_L2_DMA_FLUSH_STATUS_FLUSH_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x68, DX_L2_DMA_FLUSH_STATUS_FLUSH_STATUS_LEN, DX_L2_DMA_FLUSH_STATUS_FLUSH_STATUS_MASK, DX_L2_DMA_FLUSH_STATUS_FLUSH_STATUS_OFFSET, 0x0, true, false, true, false,
      "DX_L2_DMA.FLUSH_STATUS.FLUSH_STATUS", 
      Read_Dx_l2_dma_Flush_status_FLUSH_STATUS,
      Write_Dx_l2_dma_Flush_status_FLUSH_STATUS,
    },
    { /* 190 : INDEX_DX_L2_DMA_FLUSH_STATUS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x68, DX_L2_DMA_FLUSH_STATUS_RESERVED0_LEN, DX_L2_DMA_FLUSH_STATUS_RESERVED0_MASK, DX_L2_DMA_FLUSH_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_L2_DMA.FLUSH_STATUS.RESERVED0", 
      Read_Dx_l2_dma_Flush_status_RESERVED0,
      Write_Dx_l2_dma_Flush_status_RESERVED0,
    },
    { /* 191 : INDEX_DX_L2_DMA_AXI_CFG0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.AXI_CFG0", 
      Read_Dx_l2_dma_Axi_cfg0,
      Write_Dx_l2_dma_Axi_cfg0,
    },
    { /* 192 : INDEX_DX_L2_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x6c, DX_L2_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH_LEN, DX_L2_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH_MASK, DX_L2_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH_OFFSET, 0x100, true, true, true, false,
      "DX_L2_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH", 
      Read_Dx_l2_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH,
      Write_Dx_l2_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH,
    },
    { /* 193 : INDEX_DX_L2_DMA_AXI_CFG0_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x6c, DX_L2_DMA_AXI_CFG0_RESERVED0_LEN, DX_L2_DMA_AXI_CFG0_RESERVED0_MASK, DX_L2_DMA_AXI_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.AXI_CFG0.RESERVED0", 
      Read_Dx_l2_dma_Axi_cfg0_RESERVED0,
      Write_Dx_l2_dma_Axi_cfg0_RESERVED0,
    },
    { /* 194 : INDEX_DX_L2_DMA_AXI_CFG1 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.AXI_CFG1", 
      Read_Dx_l2_dma_Axi_cfg1,
      Write_Dx_l2_dma_Axi_cfg1,
    },
    { /* 195 : INDEX_DX_L2_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x70, DX_L2_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH_LEN, DX_L2_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH_MASK, DX_L2_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH_OFFSET, 0x100, true, true, true, false,
      "DX_L2_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH", 
      Read_Dx_l2_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH,
      Write_Dx_l2_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH,
    },
    { /* 196 : INDEX_DX_L2_DMA_AXI_CFG1_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x70, DX_L2_DMA_AXI_CFG1_RESERVED0_LEN, DX_L2_DMA_AXI_CFG1_RESERVED0_MASK, DX_L2_DMA_AXI_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.AXI_CFG1.RESERVED0", 
      Read_Dx_l2_dma_Axi_cfg1_RESERVED0,
      Write_Dx_l2_dma_Axi_cfg1_RESERVED0,
    },
    { /* 197 : INDEX_DX_L2_DMA_AXI_CFG2 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.AXI_CFG2", 
      Read_Dx_l2_dma_Axi_cfg2,
      Write_Dx_l2_dma_Axi_cfg2,
    },
    { /* 198 : INDEX_DX_L2_DMA_AXI_CFG2_AXI_RDMA_MO */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x74, DX_L2_DMA_AXI_CFG2_AXI_RDMA_MO_LEN, DX_L2_DMA_AXI_CFG2_AXI_RDMA_MO_MASK, DX_L2_DMA_AXI_CFG2_AXI_RDMA_MO_OFFSET, 0x7, true, true, true, false,
      "DX_L2_DMA.AXI_CFG2.AXI_RDMA_MO", 
      Read_Dx_l2_dma_Axi_cfg2_AXI_RDMA_MO,
      Write_Dx_l2_dma_Axi_cfg2_AXI_RDMA_MO,
    },
    { /* 199 : INDEX_DX_L2_DMA_AXI_CFG2_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x74, DX_L2_DMA_AXI_CFG2_RESERVED0_LEN, DX_L2_DMA_AXI_CFG2_RESERVED0_MASK, DX_L2_DMA_AXI_CFG2_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.AXI_CFG2.RESERVED0", 
      Read_Dx_l2_dma_Axi_cfg2_RESERVED0,
      Write_Dx_l2_dma_Axi_cfg2_RESERVED0,
    },
    { /* 200 : INDEX_DX_L2_DMA_AXI_CFG3 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.AXI_CFG3", 
      Read_Dx_l2_dma_Axi_cfg3,
      Write_Dx_l2_dma_Axi_cfg3,
    },
    { /* 201 : INDEX_DX_L2_DMA_AXI_CFG3_AXI_WDMA_MO */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x78, DX_L2_DMA_AXI_CFG3_AXI_WDMA_MO_LEN, DX_L2_DMA_AXI_CFG3_AXI_WDMA_MO_MASK, DX_L2_DMA_AXI_CFG3_AXI_WDMA_MO_OFFSET, 0x7, true, true, true, false,
      "DX_L2_DMA.AXI_CFG3.AXI_WDMA_MO", 
      Read_Dx_l2_dma_Axi_cfg3_AXI_WDMA_MO,
      Write_Dx_l2_dma_Axi_cfg3_AXI_WDMA_MO,
    },
    { /* 202 : INDEX_DX_L2_DMA_AXI_CFG3_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x78, DX_L2_DMA_AXI_CFG3_RESERVED0_LEN, DX_L2_DMA_AXI_CFG3_RESERVED0_MASK, DX_L2_DMA_AXI_CFG3_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.AXI_CFG3.RESERVED0", 
      Read_Dx_l2_dma_Axi_cfg3_RESERVED0,
      Write_Dx_l2_dma_Axi_cfg3_RESERVED0,
    },
    { /* 203 : INDEX_DX_L2_DMA_AXI_CFG4 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_DMA.AXI_CFG4", 
      Read_Dx_l2_dma_Axi_cfg4,
      Write_Dx_l2_dma_Axi_cfg4,
    },
    { /* 204 : INDEX_DX_L2_DMA_AXI_CFG4_AXI_4KB_BOUNDARY */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x7c, DX_L2_DMA_AXI_CFG4_AXI_4KB_BOUNDARY_LEN, DX_L2_DMA_AXI_CFG4_AXI_4KB_BOUNDARY_MASK, DX_L2_DMA_AXI_CFG4_AXI_4KB_BOUNDARY_OFFSET, 0x0, true, true, true, false,
      "DX_L2_DMA.AXI_CFG4.AXI_4KB_BOUNDARY", 
      Read_Dx_l2_dma_Axi_cfg4_AXI_4KB_BOUNDARY,
      Write_Dx_l2_dma_Axi_cfg4_AXI_4KB_BOUNDARY,
    },
    { /* 205 : INDEX_DX_L2_DMA_AXI_CFG4_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_L2_DMA_OFFSET, REG_DX_L2_DMA_OFFSET + 0x7c, DX_L2_DMA_AXI_CFG4_RESERVED0_LEN, DX_L2_DMA_AXI_CFG4_RESERVED0_MASK, DX_L2_DMA_AXI_CFG4_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_DMA.AXI_CFG4.RESERVED0", 
      Read_Dx_l2_dma_Axi_cfg4_RESERVED0,
      Write_Dx_l2_dma_Axi_cfg4_RESERVED0,
    },
    { /* 206 : INDEX_DX_L2_NPU0_DATA_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.DATA_CFG0", 
      Read_Dx_l2_npu0_Data_cfg0,
      Write_Dx_l2_npu0_Data_cfg0,
    },
    { /* 207 : INDEX_DX_L2_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x0, DX_L2_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH_LEN, DX_L2_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH_MASK, DX_L2_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH", 
      Read_Dx_l2_npu0_Data_cfg0_FEATURE_BIT_WIDTH,
      Write_Dx_l2_npu0_Data_cfg0_FEATURE_BIT_WIDTH,
    },
    { /* 208 : INDEX_DX_L2_NPU0_DATA_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x0, DX_L2_NPU0_DATA_CFG0_RESERVED0_LEN, DX_L2_NPU0_DATA_CFG0_RESERVED0_MASK, DX_L2_NPU0_DATA_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.DATA_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Data_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Data_cfg0_RESERVED0,
    },
    { /* 209 : INDEX_DX_L2_NPU0_DATA_CFG0_FEATURE_DATA_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x0, DX_L2_NPU0_DATA_CFG0_FEATURE_DATA_TYPE_LEN, DX_L2_NPU0_DATA_CFG0_FEATURE_DATA_TYPE_MASK, DX_L2_NPU0_DATA_CFG0_FEATURE_DATA_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG0.FEATURE_DATA_TYPE", 
      Read_Dx_l2_npu0_Data_cfg0_FEATURE_DATA_TYPE,
      Write_Dx_l2_npu0_Data_cfg0_FEATURE_DATA_TYPE,
    },
    { /* 210 : INDEX_DX_L2_NPU0_DATA_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG1", 
      Read_Dx_l2_npu0_Data_cfg1,
      Write_Dx_l2_npu0_Data_cfg1,
    },
    { /* 211 : INDEX_DX_L2_NPU0_DATA_CFG1_WEIGHT_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4, DX_L2_NPU0_DATA_CFG1_WEIGHT_BIT_WIDTH_LEN, DX_L2_NPU0_DATA_CFG1_WEIGHT_BIT_WIDTH_MASK, DX_L2_NPU0_DATA_CFG1_WEIGHT_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG1.WEIGHT_BIT_WIDTH", 
      Read_Dx_l2_npu0_Data_cfg1_WEIGHT_BIT_WIDTH,
      Write_Dx_l2_npu0_Data_cfg1_WEIGHT_BIT_WIDTH,
    },
    { /* 212 : INDEX_DX_L2_NPU0_DATA_CFG1_BIAS_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4, DX_L2_NPU0_DATA_CFG1_BIAS_BIT_WIDTH_LEN, DX_L2_NPU0_DATA_CFG1_BIAS_BIT_WIDTH_MASK, DX_L2_NPU0_DATA_CFG1_BIAS_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG1.BIAS_BIT_WIDTH", 
      Read_Dx_l2_npu0_Data_cfg1_BIAS_BIT_WIDTH,
      Write_Dx_l2_npu0_Data_cfg1_BIAS_BIT_WIDTH,
    },
    { /* 213 : INDEX_DX_L2_NPU0_DATA_CFG1_BN_COEFF_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4, DX_L2_NPU0_DATA_CFG1_BN_COEFF_BIT_WIDTH_LEN, DX_L2_NPU0_DATA_CFG1_BN_COEFF_BIT_WIDTH_MASK, DX_L2_NPU0_DATA_CFG1_BN_COEFF_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG1.BN_COEFF_BIT_WIDTH", 
      Read_Dx_l2_npu0_Data_cfg1_BN_COEFF_BIT_WIDTH,
      Write_Dx_l2_npu0_Data_cfg1_BN_COEFF_BIT_WIDTH,
    },
    { /* 214 : INDEX_DX_L2_NPU0_DATA_CFG1_W_FEATURE_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4, DX_L2_NPU0_DATA_CFG1_W_FEATURE_BIT_WIDTH_LEN, DX_L2_NPU0_DATA_CFG1_W_FEATURE_BIT_WIDTH_MASK, DX_L2_NPU0_DATA_CFG1_W_FEATURE_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG1.W_FEATURE_BIT_WIDTH", 
      Read_Dx_l2_npu0_Data_cfg1_W_FEATURE_BIT_WIDTH,
      Write_Dx_l2_npu0_Data_cfg1_W_FEATURE_BIT_WIDTH,
    },
    { /* 215 : INDEX_DX_L2_NPU0_IM2COL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.IM2COL", 
      Read_Dx_l2_npu0_Im2col,
      Write_Dx_l2_npu0_Im2col,
    },
    { /* 216 : INDEX_DX_L2_NPU0_IM2COL_GLB2RF_RF_WSIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, DX_L2_NPU0_IM2COL_GLB2RF_RF_WSIZE_LEN, DX_L2_NPU0_IM2COL_GLB2RF_RF_WSIZE_MASK, DX_L2_NPU0_IM2COL_GLB2RF_RF_WSIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.IM2COL.GLB2RF_RF_WSIZE", 
      Read_Dx_l2_npu0_Im2col_GLB2RF_RF_WSIZE,
      Write_Dx_l2_npu0_Im2col_GLB2RF_RF_WSIZE,
    },
    { /* 217 : INDEX_DX_L2_NPU0_IM2COL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, DX_L2_NPU0_IM2COL_RESERVED0_LEN, DX_L2_NPU0_IM2COL_RESERVED0_MASK, DX_L2_NPU0_IM2COL_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.IM2COL.RESERVED0", 
      Read_Dx_l2_npu0_Im2col_RESERVED0,
      Write_Dx_l2_npu0_Im2col_RESERVED0,
    },
    { /* 218 : INDEX_DX_L2_NPU0_IM2COL_GLB2RF_WRITE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, DX_L2_NPU0_IM2COL_GLB2RF_WRITE_LEN, DX_L2_NPU0_IM2COL_GLB2RF_WRITE_MASK, DX_L2_NPU0_IM2COL_GLB2RF_WRITE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.IM2COL.GLB2RF_WRITE", 
      Read_Dx_l2_npu0_Im2col_GLB2RF_WRITE,
      Write_Dx_l2_npu0_Im2col_GLB2RF_WRITE,
    },
    { /* 219 : INDEX_DX_L2_NPU0_IM2COL_GLB2RF_START */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, DX_L2_NPU0_IM2COL_GLB2RF_START_LEN, DX_L2_NPU0_IM2COL_GLB2RF_START_MASK, DX_L2_NPU0_IM2COL_GLB2RF_START_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.IM2COL.GLB2RF_START", 
      Read_Dx_l2_npu0_Im2col_GLB2RF_START,
      Write_Dx_l2_npu0_Im2col_GLB2RF_START,
    },
    { /* 220 : INDEX_DX_L2_NPU0_IM2COL_IMG2COL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, DX_L2_NPU0_IM2COL_IMG2COL_EN_LEN, DX_L2_NPU0_IM2COL_IMG2COL_EN_MASK, DX_L2_NPU0_IM2COL_IMG2COL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.IM2COL.IMG2COL_EN", 
      Read_Dx_l2_npu0_Im2col_IMG2COL_EN,
      Write_Dx_l2_npu0_Im2col_IMG2COL_EN,
    },
    { /* 221 : INDEX_DX_L2_NPU0_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.CTRL", 
      Read_Dx_l2_npu0_Ctrl,
      Write_Dx_l2_npu0_Ctrl,
    },
    { /* 222 : INDEX_DX_L2_NPU0_CTRL_WINOGRAD_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_WINOGRAD_EN_LEN, DX_L2_NPU0_CTRL_WINOGRAD_EN_MASK, DX_L2_NPU0_CTRL_WINOGRAD_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.CTRL.WINOGRAD_EN", 
      Read_Dx_l2_npu0_Ctrl_WINOGRAD_EN,
      Write_Dx_l2_npu0_Ctrl_WINOGRAD_EN,
    },
    { /* 223 : INDEX_DX_L2_NPU0_CTRL_FEATURE_COMPRESS_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_FEATURE_COMPRESS_EN_LEN, DX_L2_NPU0_CTRL_FEATURE_COMPRESS_EN_MASK, DX_L2_NPU0_CTRL_FEATURE_COMPRESS_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.CTRL.FEATURE_COMPRESS_EN", 
      Read_Dx_l2_npu0_Ctrl_FEATURE_COMPRESS_EN,
      Write_Dx_l2_npu0_Ctrl_FEATURE_COMPRESS_EN,
    },
    { /* 224 : INDEX_DX_L2_NPU0_CTRL_WEIGHT_COMPRESS_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_WEIGHT_COMPRESS_EN_LEN, DX_L2_NPU0_CTRL_WEIGHT_COMPRESS_EN_MASK, DX_L2_NPU0_CTRL_WEIGHT_COMPRESS_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.CTRL.WEIGHT_COMPRESS_EN", 
      Read_Dx_l2_npu0_Ctrl_WEIGHT_COMPRESS_EN,
      Write_Dx_l2_npu0_Ctrl_WEIGHT_COMPRESS_EN,
    },
    { /* 225 : INDEX_DX_L2_NPU0_CTRL_SKIP_CONNECTION_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_SKIP_CONNECTION_EN_LEN, DX_L2_NPU0_CTRL_SKIP_CONNECTION_EN_MASK, DX_L2_NPU0_CTRL_SKIP_CONNECTION_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.CTRL.SKIP_CONNECTION_EN", 
      Read_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_EN,
      Write_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_EN,
    },
    { /* 226 : INDEX_DX_L2_NPU0_CTRL_SKIP_CONNECTION_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_SKIP_CONNECTION_TYPE_LEN, DX_L2_NPU0_CTRL_SKIP_CONNECTION_TYPE_MASK, DX_L2_NPU0_CTRL_SKIP_CONNECTION_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.CTRL.SKIP_CONNECTION_TYPE", 
      Read_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_TYPE,
      Write_Dx_l2_npu0_Ctrl_SKIP_CONNECTION_TYPE,
    },
    { /* 227 : INDEX_DX_L2_NPU0_CTRL_RESIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_RESIZE_LEN, DX_L2_NPU0_CTRL_RESIZE_MASK, DX_L2_NPU0_CTRL_RESIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.CTRL.RESIZE", 
      Read_Dx_l2_npu0_Ctrl_RESIZE,
      Write_Dx_l2_npu0_Ctrl_RESIZE,
    },
    { /* 228 : INDEX_DX_L2_NPU0_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, DX_L2_NPU0_CTRL_RESERVED0_LEN, DX_L2_NPU0_CTRL_RESERVED0_MASK, DX_L2_NPU0_CTRL_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.CTRL.RESERVED0", 
      Read_Dx_l2_npu0_Ctrl_RESERVED0,
      Write_Dx_l2_npu0_Ctrl_RESERVED0,
    },
    { /* 229 : INDEX_DX_L2_NPU0_MISC */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.MISC", 
      Read_Dx_l2_npu0_Misc,
      Write_Dx_l2_npu0_Misc,
    },
    { /* 230 : INDEX_DX_L2_NPU0_MISC_TILE_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10, DX_L2_NPU0_MISC_TILE_NUM_LEN, DX_L2_NPU0_MISC_TILE_NUM_MASK, DX_L2_NPU0_MISC_TILE_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.MISC.TILE_NUM", 
      Read_Dx_l2_npu0_Misc_TILE_NUM,
      Write_Dx_l2_npu0_Misc_TILE_NUM,
    },
    { /* 231 : INDEX_DX_L2_NPU0_MISC_LAYER_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10, DX_L2_NPU0_MISC_LAYER_NUM_LEN, DX_L2_NPU0_MISC_LAYER_NUM_MASK, DX_L2_NPU0_MISC_LAYER_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.MISC.LAYER_NUM", 
      Read_Dx_l2_npu0_Misc_LAYER_NUM,
      Write_Dx_l2_npu0_Misc_LAYER_NUM,
    },
    { /* 232 : INDEX_DX_L2_NPU0_ACTIVE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.ACTIVE", 
      Read_Dx_l2_npu0_Active,
      Write_Dx_l2_npu0_Active,
    },
    { /* 233 : INDEX_DX_L2_NPU0_ACTIVE_ACTIVE_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14, DX_L2_NPU0_ACTIVE_ACTIVE_CNT_LEN, DX_L2_NPU0_ACTIVE_ACTIVE_CNT_MASK, DX_L2_NPU0_ACTIVE_ACTIVE_CNT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.ACTIVE.ACTIVE_CNT", 
      Read_Dx_l2_npu0_Active_ACTIVE_CNT,
      Write_Dx_l2_npu0_Active_ACTIVE_CNT,
    },
    { /* 234 : INDEX_DX_L2_NPU0_ACTIVE_ACTIVE_PERIOD */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14, DX_L2_NPU0_ACTIVE_ACTIVE_PERIOD_LEN, DX_L2_NPU0_ACTIVE_ACTIVE_PERIOD_MASK, DX_L2_NPU0_ACTIVE_ACTIVE_PERIOD_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.ACTIVE.ACTIVE_PERIOD", 
      Read_Dx_l2_npu0_Active_ACTIVE_PERIOD,
      Write_Dx_l2_npu0_Active_ACTIVE_PERIOD,
    },
    { /* 235 : INDEX_DX_L2_NPU0_ACTIVE_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14, DX_L2_NPU0_ACTIVE_RESERVED0_LEN, DX_L2_NPU0_ACTIVE_RESERVED0_MASK, DX_L2_NPU0_ACTIVE_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.ACTIVE.RESERVED0", 
      Read_Dx_l2_npu0_Active_RESERVED0,
      Write_Dx_l2_npu0_Active_RESERVED0,
    },
    { /* 236 : INDEX_DX_L2_NPU0_RSVD0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD0", 
      Read_Dx_l2_npu0_Rsvd0,
      Write_Dx_l2_npu0_Rsvd0,
    },
    { /* 237 : INDEX_DX_L2_NPU0_RSVD0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x18, DX_L2_NPU0_RSVD0_RESERVED0_LEN, DX_L2_NPU0_RSVD0_RESERVED0_MASK, DX_L2_NPU0_RSVD0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD0.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd0_RESERVED0,
      Write_Dx_l2_npu0_Rsvd0_RESERVED0,
    },
    { /* 238 : INDEX_DX_L2_NPU0_SFU_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL", 
      Read_Dx_l2_npu0_Sfu_ctrl,
      Write_Dx_l2_npu0_Sfu_ctrl,
    },
    { /* 239 : INDEX_DX_L2_NPU0_SFU_CTRL_PRE_ACT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_PRE_ACT_MODE_LEN, DX_L2_NPU0_SFU_CTRL_PRE_ACT_MODE_MASK, DX_L2_NPU0_SFU_CTRL_PRE_ACT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.PRE_ACT_MODE", 
      Read_Dx_l2_npu0_Sfu_ctrl_PRE_ACT_MODE,
      Write_Dx_l2_npu0_Sfu_ctrl_PRE_ACT_MODE,
    },
    { /* 240 : INDEX_DX_L2_NPU0_SFU_CTRL_PRE_MULT_COEFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_PRE_MULT_COEFF_SEL_LEN, DX_L2_NPU0_SFU_CTRL_PRE_MULT_COEFF_SEL_MASK, DX_L2_NPU0_SFU_CTRL_PRE_MULT_COEFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.PRE_MULT_COEFF_SEL", 
      Read_Dx_l2_npu0_Sfu_ctrl_PRE_MULT_COEFF_SEL,
      Write_Dx_l2_npu0_Sfu_ctrl_PRE_MULT_COEFF_SEL,
    },
    { /* 241 : INDEX_DX_L2_NPU0_SFU_CTRL_ACT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_ACT_MODE_LEN, DX_L2_NPU0_SFU_CTRL_ACT_MODE_MASK, DX_L2_NPU0_SFU_CTRL_ACT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.ACT_MODE", 
      Read_Dx_l2_npu0_Sfu_ctrl_ACT_MODE,
      Write_Dx_l2_npu0_Sfu_ctrl_ACT_MODE,
    },
    { /* 242 : INDEX_DX_L2_NPU0_SFU_CTRL_ACT_INOUT_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_ACT_INOUT_CTRL_LEN, DX_L2_NPU0_SFU_CTRL_ACT_INOUT_CTRL_MASK, DX_L2_NPU0_SFU_CTRL_ACT_INOUT_CTRL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.ACT_INOUT_CTRL", 
      Read_Dx_l2_npu0_Sfu_ctrl_ACT_INOUT_CTRL,
      Write_Dx_l2_npu0_Sfu_ctrl_ACT_INOUT_CTRL,
    },
    { /* 243 : INDEX_DX_L2_NPU0_SFU_CTRL_POST_ACT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_POST_ACT_MODE_LEN, DX_L2_NPU0_SFU_CTRL_POST_ACT_MODE_MASK, DX_L2_NPU0_SFU_CTRL_POST_ACT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.POST_ACT_MODE", 
      Read_Dx_l2_npu0_Sfu_ctrl_POST_ACT_MODE,
      Write_Dx_l2_npu0_Sfu_ctrl_POST_ACT_MODE,
    },
    { /* 244 : INDEX_DX_L2_NPU0_SFU_CTRL_SKIP_IN_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_SKIP_IN_TYPE_LEN, DX_L2_NPU0_SFU_CTRL_SKIP_IN_TYPE_MASK, DX_L2_NPU0_SFU_CTRL_SKIP_IN_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.SKIP_IN_TYPE", 
      Read_Dx_l2_npu0_Sfu_ctrl_SKIP_IN_TYPE,
      Write_Dx_l2_npu0_Sfu_ctrl_SKIP_IN_TYPE,
    },
    { /* 245 : INDEX_DX_L2_NPU0_SFU_CTRL_FLOAT2INT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_FLOAT2INT_MODE_LEN, DX_L2_NPU0_SFU_CTRL_FLOAT2INT_MODE_MASK, DX_L2_NPU0_SFU_CTRL_FLOAT2INT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.FLOAT2INT_MODE", 
      Read_Dx_l2_npu0_Sfu_ctrl_FLOAT2INT_MODE,
      Write_Dx_l2_npu0_Sfu_ctrl_FLOAT2INT_MODE,
    },
    { /* 246 : INDEX_DX_L2_NPU0_SFU_CTRL_POOL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_POOL_MODE_LEN, DX_L2_NPU0_SFU_CTRL_POOL_MODE_MASK, DX_L2_NPU0_SFU_CTRL_POOL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.POOL_MODE", 
      Read_Dx_l2_npu0_Sfu_ctrl_POOL_MODE,
      Write_Dx_l2_npu0_Sfu_ctrl_POOL_MODE,
    },
    { /* 247 : INDEX_DX_L2_NPU0_SFU_CTRL_POOL_WINSIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_POOL_WINSIZE_LEN, DX_L2_NPU0_SFU_CTRL_POOL_WINSIZE_MASK, DX_L2_NPU0_SFU_CTRL_POOL_WINSIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.POOL_WINSIZE", 
      Read_Dx_l2_npu0_Sfu_ctrl_POOL_WINSIZE,
      Write_Dx_l2_npu0_Sfu_ctrl_POOL_WINSIZE,
    },
    { /* 248 : INDEX_DX_L2_NPU0_SFU_CTRL_PRE_ADD_COEFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_PRE_ADD_COEFF_SEL_LEN, DX_L2_NPU0_SFU_CTRL_PRE_ADD_COEFF_SEL_MASK, DX_L2_NPU0_SFU_CTRL_PRE_ADD_COEFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.PRE_ADD_COEFF_SEL", 
      Read_Dx_l2_npu0_Sfu_ctrl_PRE_ADD_COEFF_SEL,
      Write_Dx_l2_npu0_Sfu_ctrl_PRE_ADD_COEFF_SEL,
    },
    { /* 249 : INDEX_DX_L2_NPU0_SFU_CTRL_SE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_SE_EN_LEN, DX_L2_NPU0_SFU_CTRL_SE_EN_MASK, DX_L2_NPU0_SFU_CTRL_SE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.SE_EN", 
      Read_Dx_l2_npu0_Sfu_ctrl_SE_EN,
      Write_Dx_l2_npu0_Sfu_ctrl_SE_EN,
    },
    { /* 250 : INDEX_DX_L2_NPU0_SFU_CTRL_SE_WRITE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_SE_WRITE_LEN, DX_L2_NPU0_SFU_CTRL_SE_WRITE_MASK, DX_L2_NPU0_SFU_CTRL_SE_WRITE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.SE_WRITE", 
      Read_Dx_l2_npu0_Sfu_ctrl_SE_WRITE,
      Write_Dx_l2_npu0_Sfu_ctrl_SE_WRITE,
    },
    { /* 251 : INDEX_DX_L2_NPU0_SFU_CTRL_ARG_MAX_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_ARG_MAX_EN_LEN, DX_L2_NPU0_SFU_CTRL_ARG_MAX_EN_MASK, DX_L2_NPU0_SFU_CTRL_ARG_MAX_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.ARG_MAX_EN", 
      Read_Dx_l2_npu0_Sfu_ctrl_ARG_MAX_EN,
      Write_Dx_l2_npu0_Sfu_ctrl_ARG_MAX_EN,
    },
    { /* 252 : INDEX_DX_L2_NPU0_SFU_CTRL_ARG_CLASS_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, DX_L2_NPU0_SFU_CTRL_ARG_CLASS_NUM_LEN, DX_L2_NPU0_SFU_CTRL_ARG_CLASS_NUM_MASK, DX_L2_NPU0_SFU_CTRL_ARG_CLASS_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL.ARG_CLASS_NUM", 
      Read_Dx_l2_npu0_Sfu_ctrl_ARG_CLASS_NUM,
      Write_Dx_l2_npu0_Sfu_ctrl_ARG_CLASS_NUM,
    },
    { /* 253 : INDEX_DX_L2_NPU0_SFU_CLIP_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_CLIP_MAX", 
      Read_Dx_l2_npu0_Sfu_clip_max,
      Write_Dx_l2_npu0_Sfu_clip_max,
    },
    { /* 254 : INDEX_DX_L2_NPU0_SFU_CLIP_MAX_CLIP_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x20, DX_L2_NPU0_SFU_CLIP_MAX_CLIP_MAX_LEN, DX_L2_NPU0_SFU_CLIP_MAX_CLIP_MAX_MASK, DX_L2_NPU0_SFU_CLIP_MAX_CLIP_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CLIP_MAX.CLIP_MAX", 
      Read_Dx_l2_npu0_Sfu_clip_max_CLIP_MAX,
      Write_Dx_l2_npu0_Sfu_clip_max_CLIP_MAX,
    },
    { /* 255 : INDEX_DX_L2_NPU0_SFU_CLIP_MIN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_CLIP_MIN", 
      Read_Dx_l2_npu0_Sfu_clip_min,
      Write_Dx_l2_npu0_Sfu_clip_min,
    },
    { /* 256 : INDEX_DX_L2_NPU0_SFU_CLIP_MIN_CLIP_MIN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24, DX_L2_NPU0_SFU_CLIP_MIN_CLIP_MIN_LEN, DX_L2_NPU0_SFU_CLIP_MIN_CLIP_MIN_MASK, DX_L2_NPU0_SFU_CLIP_MIN_CLIP_MIN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CLIP_MIN.CLIP_MIN", 
      Read_Dx_l2_npu0_Sfu_clip_min_CLIP_MIN,
      Write_Dx_l2_npu0_Sfu_clip_min_CLIP_MIN,
    },
    { /* 257 : INDEX_DX_L2_NPU0_SFU_COEFF0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.SFU_COEFF0", 
      Read_Dx_l2_npu0_Sfu_coeff0,
      Write_Dx_l2_npu0_Sfu_coeff0,
    },
    { /* 258 : INDEX_DX_L2_NPU0_SFU_COEFF0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x28, DX_L2_NPU0_SFU_COEFF0_RESERVED0_LEN, DX_L2_NPU0_SFU_COEFF0_RESERVED0_MASK, DX_L2_NPU0_SFU_COEFF0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.SFU_COEFF0.RESERVED0", 
      Read_Dx_l2_npu0_Sfu_coeff0_RESERVED0,
      Write_Dx_l2_npu0_Sfu_coeff0_RESERVED0,
    },
    { /* 259 : INDEX_DX_L2_NPU0_SFU_COEFF1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF1", 
      Read_Dx_l2_npu0_Sfu_coeff1,
      Write_Dx_l2_npu0_Sfu_coeff1,
    },
    { /* 260 : INDEX_DX_L2_NPU0_SFU_COEFF1_PRE_ACT_MULT_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c, DX_L2_NPU0_SFU_COEFF1_PRE_ACT_MULT_COEFF_LEN, DX_L2_NPU0_SFU_COEFF1_PRE_ACT_MULT_COEFF_MASK, DX_L2_NPU0_SFU_COEFF1_PRE_ACT_MULT_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF1.PRE_ACT_MULT_COEFF", 
      Read_Dx_l2_npu0_Sfu_coeff1_PRE_ACT_MULT_COEFF,
      Write_Dx_l2_npu0_Sfu_coeff1_PRE_ACT_MULT_COEFF,
    },
    { /* 261 : INDEX_DX_L2_NPU0_SFU_COEFF2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF2", 
      Read_Dx_l2_npu0_Sfu_coeff2,
      Write_Dx_l2_npu0_Sfu_coeff2,
    },
    { /* 262 : INDEX_DX_L2_NPU0_SFU_COEFF2_PRE_ACT_ADD_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30, DX_L2_NPU0_SFU_COEFF2_PRE_ACT_ADD_COEFF_LEN, DX_L2_NPU0_SFU_COEFF2_PRE_ACT_ADD_COEFF_MASK, DX_L2_NPU0_SFU_COEFF2_PRE_ACT_ADD_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF2.PRE_ACT_ADD_COEFF", 
      Read_Dx_l2_npu0_Sfu_coeff2_PRE_ACT_ADD_COEFF,
      Write_Dx_l2_npu0_Sfu_coeff2_PRE_ACT_ADD_COEFF,
    },
    { /* 263 : INDEX_DX_L2_NPU0_SFU_COEFF3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF3", 
      Read_Dx_l2_npu0_Sfu_coeff3,
      Write_Dx_l2_npu0_Sfu_coeff3,
    },
    { /* 264 : INDEX_DX_L2_NPU0_SFU_COEFF3_AVG_POOL_MULT_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x34, DX_L2_NPU0_SFU_COEFF3_AVG_POOL_MULT_COEFF_LEN, DX_L2_NPU0_SFU_COEFF3_AVG_POOL_MULT_COEFF_MASK, DX_L2_NPU0_SFU_COEFF3_AVG_POOL_MULT_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF3.AVG_POOL_MULT_COEFF", 
      Read_Dx_l2_npu0_Sfu_coeff3_AVG_POOL_MULT_COEFF,
      Write_Dx_l2_npu0_Sfu_coeff3_AVG_POOL_MULT_COEFF,
    },
    { /* 265 : INDEX_DX_L2_NPU0_SFU_COEFF4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF4", 
      Read_Dx_l2_npu0_Sfu_coeff4,
      Write_Dx_l2_npu0_Sfu_coeff4,
    },
    { /* 266 : INDEX_DX_L2_NPU0_SFU_COEFF4_ACT_OFFSET_VAL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x38, DX_L2_NPU0_SFU_COEFF4_ACT_OFFSET_VAL_LEN, DX_L2_NPU0_SFU_COEFF4_ACT_OFFSET_VAL_MASK, DX_L2_NPU0_SFU_COEFF4_ACT_OFFSET_VAL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF4.ACT_OFFSET_VAL", 
      Read_Dx_l2_npu0_Sfu_coeff4_ACT_OFFSET_VAL,
      Write_Dx_l2_npu0_Sfu_coeff4_ACT_OFFSET_VAL,
    },
    { /* 267 : INDEX_DX_L2_NPU0_SFU_COEFF5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF5", 
      Read_Dx_l2_npu0_Sfu_coeff5,
      Write_Dx_l2_npu0_Sfu_coeff5,
    },
    { /* 268 : INDEX_DX_L2_NPU0_SFU_COEFF5_SKIP_SCALE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x3c, DX_L2_NPU0_SFU_COEFF5_SKIP_SCALE_LEN, DX_L2_NPU0_SFU_COEFF5_SKIP_SCALE_MASK, DX_L2_NPU0_SFU_COEFF5_SKIP_SCALE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF5.SKIP_SCALE", 
      Read_Dx_l2_npu0_Sfu_coeff5_SKIP_SCALE,
      Write_Dx_l2_npu0_Sfu_coeff5_SKIP_SCALE,
    },
    { /* 269 : INDEX_DX_L2_NPU0_SFU_COEFF6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF6", 
      Read_Dx_l2_npu0_Sfu_coeff6,
      Write_Dx_l2_npu0_Sfu_coeff6,
    },
    { /* 270 : INDEX_DX_L2_NPU0_SFU_COEFF6_LEAKY_RELU_SLOPE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x40, DX_L2_NPU0_SFU_COEFF6_LEAKY_RELU_SLOPE_LEN, DX_L2_NPU0_SFU_COEFF6_LEAKY_RELU_SLOPE_MASK, DX_L2_NPU0_SFU_COEFF6_LEAKY_RELU_SLOPE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF6.LEAKY_RELU_SLOPE", 
      Read_Dx_l2_npu0_Sfu_coeff6_LEAKY_RELU_SLOPE,
      Write_Dx_l2_npu0_Sfu_coeff6_LEAKY_RELU_SLOPE,
    },
    { /* 271 : INDEX_DX_L2_NPU0_SFU_COEFF7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF7", 
      Read_Dx_l2_npu0_Sfu_coeff7,
      Write_Dx_l2_npu0_Sfu_coeff7,
    },
    { /* 272 : INDEX_DX_L2_NPU0_SFU_COEFF7_RELU6_CLIP_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x44, DX_L2_NPU0_SFU_COEFF7_RELU6_CLIP_MAX_LEN, DX_L2_NPU0_SFU_COEFF7_RELU6_CLIP_MAX_MASK, DX_L2_NPU0_SFU_COEFF7_RELU6_CLIP_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF7.RELU6_CLIP_MAX", 
      Read_Dx_l2_npu0_Sfu_coeff7_RELU6_CLIP_MAX,
      Write_Dx_l2_npu0_Sfu_coeff7_RELU6_CLIP_MAX,
    },
    { /* 273 : INDEX_DX_L2_NPU0_SFU_COEFF8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF8", 
      Read_Dx_l2_npu0_Sfu_coeff8,
      Write_Dx_l2_npu0_Sfu_coeff8,
    },
    { /* 274 : INDEX_DX_L2_NPU0_SFU_COEFF8_PAF_BOUNDARY0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x48, DX_L2_NPU0_SFU_COEFF8_PAF_BOUNDARY0_LEN, DX_L2_NPU0_SFU_COEFF8_PAF_BOUNDARY0_MASK, DX_L2_NPU0_SFU_COEFF8_PAF_BOUNDARY0_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF8.PAF_BOUNDARY0", 
      Read_Dx_l2_npu0_Sfu_coeff8_PAF_BOUNDARY0,
      Write_Dx_l2_npu0_Sfu_coeff8_PAF_BOUNDARY0,
    },
    { /* 275 : INDEX_DX_L2_NPU0_SFU_COEFF9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF9", 
      Read_Dx_l2_npu0_Sfu_coeff9,
      Write_Dx_l2_npu0_Sfu_coeff9,
    },
    { /* 276 : INDEX_DX_L2_NPU0_SFU_COEFF9_PAF_BOUNDARY1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4c, DX_L2_NPU0_SFU_COEFF9_PAF_BOUNDARY1_LEN, DX_L2_NPU0_SFU_COEFF9_PAF_BOUNDARY1_MASK, DX_L2_NPU0_SFU_COEFF9_PAF_BOUNDARY1_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF9.PAF_BOUNDARY1", 
      Read_Dx_l2_npu0_Sfu_coeff9_PAF_BOUNDARY1,
      Write_Dx_l2_npu0_Sfu_coeff9_PAF_BOUNDARY1,
    },
    { /* 277 : INDEX_DX_L2_NPU0_SFU_COEFF10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF10", 
      Read_Dx_l2_npu0_Sfu_coeff10,
      Write_Dx_l2_npu0_Sfu_coeff10,
    },
    { /* 278 : INDEX_DX_L2_NPU0_SFU_COEFF10_PAF_BOUNDARY2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x50, DX_L2_NPU0_SFU_COEFF10_PAF_BOUNDARY2_LEN, DX_L2_NPU0_SFU_COEFF10_PAF_BOUNDARY2_MASK, DX_L2_NPU0_SFU_COEFF10_PAF_BOUNDARY2_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF10.PAF_BOUNDARY2", 
      Read_Dx_l2_npu0_Sfu_coeff10_PAF_BOUNDARY2,
      Write_Dx_l2_npu0_Sfu_coeff10_PAF_BOUNDARY2,
    },
    { /* 279 : INDEX_DX_L2_NPU0_SFU_COEFF11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF11", 
      Read_Dx_l2_npu0_Sfu_coeff11,
      Write_Dx_l2_npu0_Sfu_coeff11,
    },
    { /* 280 : INDEX_DX_L2_NPU0_SFU_COEFF11_PAF_BOUNDARY3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x54, DX_L2_NPU0_SFU_COEFF11_PAF_BOUNDARY3_LEN, DX_L2_NPU0_SFU_COEFF11_PAF_BOUNDARY3_MASK, DX_L2_NPU0_SFU_COEFF11_PAF_BOUNDARY3_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF11.PAF_BOUNDARY3", 
      Read_Dx_l2_npu0_Sfu_coeff11_PAF_BOUNDARY3,
      Write_Dx_l2_npu0_Sfu_coeff11_PAF_BOUNDARY3,
    },
    { /* 281 : INDEX_DX_L2_NPU0_SFU_COEFF12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF12", 
      Read_Dx_l2_npu0_Sfu_coeff12,
      Write_Dx_l2_npu0_Sfu_coeff12,
    },
    { /* 282 : INDEX_DX_L2_NPU0_SFU_COEFF12_PAF_BOUNDARY4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x58, DX_L2_NPU0_SFU_COEFF12_PAF_BOUNDARY4_LEN, DX_L2_NPU0_SFU_COEFF12_PAF_BOUNDARY4_MASK, DX_L2_NPU0_SFU_COEFF12_PAF_BOUNDARY4_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF12.PAF_BOUNDARY4", 
      Read_Dx_l2_npu0_Sfu_coeff12_PAF_BOUNDARY4,
      Write_Dx_l2_npu0_Sfu_coeff12_PAF_BOUNDARY4,
    },
    { /* 283 : INDEX_DX_L2_NPU0_SFU_COEFF13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF13", 
      Read_Dx_l2_npu0_Sfu_coeff13,
      Write_Dx_l2_npu0_Sfu_coeff13,
    },
    { /* 284 : INDEX_DX_L2_NPU0_SFU_COEFF13_PAF_BOUNDARY5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x5c, DX_L2_NPU0_SFU_COEFF13_PAF_BOUNDARY5_LEN, DX_L2_NPU0_SFU_COEFF13_PAF_BOUNDARY5_MASK, DX_L2_NPU0_SFU_COEFF13_PAF_BOUNDARY5_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF13.PAF_BOUNDARY5", 
      Read_Dx_l2_npu0_Sfu_coeff13_PAF_BOUNDARY5,
      Write_Dx_l2_npu0_Sfu_coeff13_PAF_BOUNDARY5,
    },
    { /* 285 : INDEX_DX_L2_NPU0_SFU_COEFF14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF14", 
      Read_Dx_l2_npu0_Sfu_coeff14,
      Write_Dx_l2_npu0_Sfu_coeff14,
    },
    { /* 286 : INDEX_DX_L2_NPU0_SFU_COEFF14_PAF_BOUNDARY6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x60, DX_L2_NPU0_SFU_COEFF14_PAF_BOUNDARY6_LEN, DX_L2_NPU0_SFU_COEFF14_PAF_BOUNDARY6_MASK, DX_L2_NPU0_SFU_COEFF14_PAF_BOUNDARY6_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF14.PAF_BOUNDARY6", 
      Read_Dx_l2_npu0_Sfu_coeff14_PAF_BOUNDARY6,
      Write_Dx_l2_npu0_Sfu_coeff14_PAF_BOUNDARY6,
    },
    { /* 287 : INDEX_DX_L2_NPU0_SFU_COEFF15 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF15", 
      Read_Dx_l2_npu0_Sfu_coeff15,
      Write_Dx_l2_npu0_Sfu_coeff15,
    },
    { /* 288 : INDEX_DX_L2_NPU0_SFU_COEFF15_PAF_BOUNDARY7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x64, DX_L2_NPU0_SFU_COEFF15_PAF_BOUNDARY7_LEN, DX_L2_NPU0_SFU_COEFF15_PAF_BOUNDARY7_MASK, DX_L2_NPU0_SFU_COEFF15_PAF_BOUNDARY7_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF15.PAF_BOUNDARY7", 
      Read_Dx_l2_npu0_Sfu_coeff15_PAF_BOUNDARY7,
      Write_Dx_l2_npu0_Sfu_coeff15_PAF_BOUNDARY7,
    },
    { /* 289 : INDEX_DX_L2_NPU0_SFU_COEFF16 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF16", 
      Read_Dx_l2_npu0_Sfu_coeff16,
      Write_Dx_l2_npu0_Sfu_coeff16,
    },
    { /* 290 : INDEX_DX_L2_NPU0_SFU_COEFF16_PAF_BOUNDARY8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x68, DX_L2_NPU0_SFU_COEFF16_PAF_BOUNDARY8_LEN, DX_L2_NPU0_SFU_COEFF16_PAF_BOUNDARY8_MASK, DX_L2_NPU0_SFU_COEFF16_PAF_BOUNDARY8_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF16.PAF_BOUNDARY8", 
      Read_Dx_l2_npu0_Sfu_coeff16_PAF_BOUNDARY8,
      Write_Dx_l2_npu0_Sfu_coeff16_PAF_BOUNDARY8,
    },
    { /* 291 : INDEX_DX_L2_NPU0_SFU_COEFF17 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF17", 
      Read_Dx_l2_npu0_Sfu_coeff17,
      Write_Dx_l2_npu0_Sfu_coeff17,
    },
    { /* 292 : INDEX_DX_L2_NPU0_SFU_COEFF17_PAF_BOUNDARY9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x6c, DX_L2_NPU0_SFU_COEFF17_PAF_BOUNDARY9_LEN, DX_L2_NPU0_SFU_COEFF17_PAF_BOUNDARY9_MASK, DX_L2_NPU0_SFU_COEFF17_PAF_BOUNDARY9_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF17.PAF_BOUNDARY9", 
      Read_Dx_l2_npu0_Sfu_coeff17_PAF_BOUNDARY9,
      Write_Dx_l2_npu0_Sfu_coeff17_PAF_BOUNDARY9,
    },
    { /* 293 : INDEX_DX_L2_NPU0_SFU_COEFF18 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF18", 
      Read_Dx_l2_npu0_Sfu_coeff18,
      Write_Dx_l2_npu0_Sfu_coeff18,
    },
    { /* 294 : INDEX_DX_L2_NPU0_SFU_COEFF18_PAF_BOUNDARY10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x70, DX_L2_NPU0_SFU_COEFF18_PAF_BOUNDARY10_LEN, DX_L2_NPU0_SFU_COEFF18_PAF_BOUNDARY10_MASK, DX_L2_NPU0_SFU_COEFF18_PAF_BOUNDARY10_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF18.PAF_BOUNDARY10", 
      Read_Dx_l2_npu0_Sfu_coeff18_PAF_BOUNDARY10,
      Write_Dx_l2_npu0_Sfu_coeff18_PAF_BOUNDARY10,
    },
    { /* 295 : INDEX_DX_L2_NPU0_SFU_COEFF19 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF19", 
      Read_Dx_l2_npu0_Sfu_coeff19,
      Write_Dx_l2_npu0_Sfu_coeff19,
    },
    { /* 296 : INDEX_DX_L2_NPU0_SFU_COEFF19_PAF_BOUNDARY11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x74, DX_L2_NPU0_SFU_COEFF19_PAF_BOUNDARY11_LEN, DX_L2_NPU0_SFU_COEFF19_PAF_BOUNDARY11_MASK, DX_L2_NPU0_SFU_COEFF19_PAF_BOUNDARY11_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF19.PAF_BOUNDARY11", 
      Read_Dx_l2_npu0_Sfu_coeff19_PAF_BOUNDARY11,
      Write_Dx_l2_npu0_Sfu_coeff19_PAF_BOUNDARY11,
    },
    { /* 297 : INDEX_DX_L2_NPU0_SFU_COEFF20 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF20", 
      Read_Dx_l2_npu0_Sfu_coeff20,
      Write_Dx_l2_npu0_Sfu_coeff20,
    },
    { /* 298 : INDEX_DX_L2_NPU0_SFU_COEFF20_PAF_BOUNDARY12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x78, DX_L2_NPU0_SFU_COEFF20_PAF_BOUNDARY12_LEN, DX_L2_NPU0_SFU_COEFF20_PAF_BOUNDARY12_MASK, DX_L2_NPU0_SFU_COEFF20_PAF_BOUNDARY12_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF20.PAF_BOUNDARY12", 
      Read_Dx_l2_npu0_Sfu_coeff20_PAF_BOUNDARY12,
      Write_Dx_l2_npu0_Sfu_coeff20_PAF_BOUNDARY12,
    },
    { /* 299 : INDEX_DX_L2_NPU0_SFU_COEFF21 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF21", 
      Read_Dx_l2_npu0_Sfu_coeff21,
      Write_Dx_l2_npu0_Sfu_coeff21,
    },
    { /* 300 : INDEX_DX_L2_NPU0_SFU_COEFF21_PAF_BOUNDARY13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x7c, DX_L2_NPU0_SFU_COEFF21_PAF_BOUNDARY13_LEN, DX_L2_NPU0_SFU_COEFF21_PAF_BOUNDARY13_MASK, DX_L2_NPU0_SFU_COEFF21_PAF_BOUNDARY13_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF21.PAF_BOUNDARY13", 
      Read_Dx_l2_npu0_Sfu_coeff21_PAF_BOUNDARY13,
      Write_Dx_l2_npu0_Sfu_coeff21_PAF_BOUNDARY13,
    },
    { /* 301 : INDEX_DX_L2_NPU0_SFU_COEFF22 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x80, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF22", 
      Read_Dx_l2_npu0_Sfu_coeff22,
      Write_Dx_l2_npu0_Sfu_coeff22,
    },
    { /* 302 : INDEX_DX_L2_NPU0_SFU_COEFF22_PAF_BOUNDARY14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x80, DX_L2_NPU0_SFU_COEFF22_PAF_BOUNDARY14_LEN, DX_L2_NPU0_SFU_COEFF22_PAF_BOUNDARY14_MASK, DX_L2_NPU0_SFU_COEFF22_PAF_BOUNDARY14_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF22.PAF_BOUNDARY14", 
      Read_Dx_l2_npu0_Sfu_coeff22_PAF_BOUNDARY14,
      Write_Dx_l2_npu0_Sfu_coeff22_PAF_BOUNDARY14,
    },
    { /* 303 : INDEX_DX_L2_NPU0_SFU_COEFF23 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x84, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF23", 
      Read_Dx_l2_npu0_Sfu_coeff23,
      Write_Dx_l2_npu0_Sfu_coeff23,
    },
    { /* 304 : INDEX_DX_L2_NPU0_SFU_COEFF23_PAF_MULT_COEFF0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x84, DX_L2_NPU0_SFU_COEFF23_PAF_MULT_COEFF0_LEN, DX_L2_NPU0_SFU_COEFF23_PAF_MULT_COEFF0_MASK, DX_L2_NPU0_SFU_COEFF23_PAF_MULT_COEFF0_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF23.PAF_MULT_COEFF0", 
      Read_Dx_l2_npu0_Sfu_coeff23_PAF_MULT_COEFF0,
      Write_Dx_l2_npu0_Sfu_coeff23_PAF_MULT_COEFF0,
    },
    { /* 305 : INDEX_DX_L2_NPU0_SFU_COEFF24 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x88, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF24", 
      Read_Dx_l2_npu0_Sfu_coeff24,
      Write_Dx_l2_npu0_Sfu_coeff24,
    },
    { /* 306 : INDEX_DX_L2_NPU0_SFU_COEFF24_PAF_MULT_COEFF1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x88, DX_L2_NPU0_SFU_COEFF24_PAF_MULT_COEFF1_LEN, DX_L2_NPU0_SFU_COEFF24_PAF_MULT_COEFF1_MASK, DX_L2_NPU0_SFU_COEFF24_PAF_MULT_COEFF1_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF24.PAF_MULT_COEFF1", 
      Read_Dx_l2_npu0_Sfu_coeff24_PAF_MULT_COEFF1,
      Write_Dx_l2_npu0_Sfu_coeff24_PAF_MULT_COEFF1,
    },
    { /* 307 : INDEX_DX_L2_NPU0_SFU_COEFF25 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF25", 
      Read_Dx_l2_npu0_Sfu_coeff25,
      Write_Dx_l2_npu0_Sfu_coeff25,
    },
    { /* 308 : INDEX_DX_L2_NPU0_SFU_COEFF25_PAF_MULT_COEFF2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8c, DX_L2_NPU0_SFU_COEFF25_PAF_MULT_COEFF2_LEN, DX_L2_NPU0_SFU_COEFF25_PAF_MULT_COEFF2_MASK, DX_L2_NPU0_SFU_COEFF25_PAF_MULT_COEFF2_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF25.PAF_MULT_COEFF2", 
      Read_Dx_l2_npu0_Sfu_coeff25_PAF_MULT_COEFF2,
      Write_Dx_l2_npu0_Sfu_coeff25_PAF_MULT_COEFF2,
    },
    { /* 309 : INDEX_DX_L2_NPU0_SFU_COEFF26 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x90, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF26", 
      Read_Dx_l2_npu0_Sfu_coeff26,
      Write_Dx_l2_npu0_Sfu_coeff26,
    },
    { /* 310 : INDEX_DX_L2_NPU0_SFU_COEFF26_PAF_MULT_COEFF3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x90, DX_L2_NPU0_SFU_COEFF26_PAF_MULT_COEFF3_LEN, DX_L2_NPU0_SFU_COEFF26_PAF_MULT_COEFF3_MASK, DX_L2_NPU0_SFU_COEFF26_PAF_MULT_COEFF3_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF26.PAF_MULT_COEFF3", 
      Read_Dx_l2_npu0_Sfu_coeff26_PAF_MULT_COEFF3,
      Write_Dx_l2_npu0_Sfu_coeff26_PAF_MULT_COEFF3,
    },
    { /* 311 : INDEX_DX_L2_NPU0_SFU_COEFF27 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x94, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF27", 
      Read_Dx_l2_npu0_Sfu_coeff27,
      Write_Dx_l2_npu0_Sfu_coeff27,
    },
    { /* 312 : INDEX_DX_L2_NPU0_SFU_COEFF27_PAF_MULT_COEFF4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x94, DX_L2_NPU0_SFU_COEFF27_PAF_MULT_COEFF4_LEN, DX_L2_NPU0_SFU_COEFF27_PAF_MULT_COEFF4_MASK, DX_L2_NPU0_SFU_COEFF27_PAF_MULT_COEFF4_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF27.PAF_MULT_COEFF4", 
      Read_Dx_l2_npu0_Sfu_coeff27_PAF_MULT_COEFF4,
      Write_Dx_l2_npu0_Sfu_coeff27_PAF_MULT_COEFF4,
    },
    { /* 313 : INDEX_DX_L2_NPU0_SFU_COEFF28 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x98, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF28", 
      Read_Dx_l2_npu0_Sfu_coeff28,
      Write_Dx_l2_npu0_Sfu_coeff28,
    },
    { /* 314 : INDEX_DX_L2_NPU0_SFU_COEFF28_PAF_MULT_COEFF5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x98, DX_L2_NPU0_SFU_COEFF28_PAF_MULT_COEFF5_LEN, DX_L2_NPU0_SFU_COEFF28_PAF_MULT_COEFF5_MASK, DX_L2_NPU0_SFU_COEFF28_PAF_MULT_COEFF5_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF28.PAF_MULT_COEFF5", 
      Read_Dx_l2_npu0_Sfu_coeff28_PAF_MULT_COEFF5,
      Write_Dx_l2_npu0_Sfu_coeff28_PAF_MULT_COEFF5,
    },
    { /* 315 : INDEX_DX_L2_NPU0_SFU_COEFF29 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x9c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF29", 
      Read_Dx_l2_npu0_Sfu_coeff29,
      Write_Dx_l2_npu0_Sfu_coeff29,
    },
    { /* 316 : INDEX_DX_L2_NPU0_SFU_COEFF29_PAF_MULT_COEFF6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x9c, DX_L2_NPU0_SFU_COEFF29_PAF_MULT_COEFF6_LEN, DX_L2_NPU0_SFU_COEFF29_PAF_MULT_COEFF6_MASK, DX_L2_NPU0_SFU_COEFF29_PAF_MULT_COEFF6_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF29.PAF_MULT_COEFF6", 
      Read_Dx_l2_npu0_Sfu_coeff29_PAF_MULT_COEFF6,
      Write_Dx_l2_npu0_Sfu_coeff29_PAF_MULT_COEFF6,
    },
    { /* 317 : INDEX_DX_L2_NPU0_SFU_COEFF30 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF30", 
      Read_Dx_l2_npu0_Sfu_coeff30,
      Write_Dx_l2_npu0_Sfu_coeff30,
    },
    { /* 318 : INDEX_DX_L2_NPU0_SFU_COEFF30_PAF_MULT_COEFF7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa0, DX_L2_NPU0_SFU_COEFF30_PAF_MULT_COEFF7_LEN, DX_L2_NPU0_SFU_COEFF30_PAF_MULT_COEFF7_MASK, DX_L2_NPU0_SFU_COEFF30_PAF_MULT_COEFF7_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF30.PAF_MULT_COEFF7", 
      Read_Dx_l2_npu0_Sfu_coeff30_PAF_MULT_COEFF7,
      Write_Dx_l2_npu0_Sfu_coeff30_PAF_MULT_COEFF7,
    },
    { /* 319 : INDEX_DX_L2_NPU0_SFU_COEFF31 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF31", 
      Read_Dx_l2_npu0_Sfu_coeff31,
      Write_Dx_l2_npu0_Sfu_coeff31,
    },
    { /* 320 : INDEX_DX_L2_NPU0_SFU_COEFF31_PAF_MULT_COEFF8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa4, DX_L2_NPU0_SFU_COEFF31_PAF_MULT_COEFF8_LEN, DX_L2_NPU0_SFU_COEFF31_PAF_MULT_COEFF8_MASK, DX_L2_NPU0_SFU_COEFF31_PAF_MULT_COEFF8_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF31.PAF_MULT_COEFF8", 
      Read_Dx_l2_npu0_Sfu_coeff31_PAF_MULT_COEFF8,
      Write_Dx_l2_npu0_Sfu_coeff31_PAF_MULT_COEFF8,
    },
    { /* 321 : INDEX_DX_L2_NPU0_SFU_COEFF32 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF32", 
      Read_Dx_l2_npu0_Sfu_coeff32,
      Write_Dx_l2_npu0_Sfu_coeff32,
    },
    { /* 322 : INDEX_DX_L2_NPU0_SFU_COEFF32_PAF_MULT_COEFF9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa8, DX_L2_NPU0_SFU_COEFF32_PAF_MULT_COEFF9_LEN, DX_L2_NPU0_SFU_COEFF32_PAF_MULT_COEFF9_MASK, DX_L2_NPU0_SFU_COEFF32_PAF_MULT_COEFF9_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF32.PAF_MULT_COEFF9", 
      Read_Dx_l2_npu0_Sfu_coeff32_PAF_MULT_COEFF9,
      Write_Dx_l2_npu0_Sfu_coeff32_PAF_MULT_COEFF9,
    },
    { /* 323 : INDEX_DX_L2_NPU0_SFU_COEFF33 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF33", 
      Read_Dx_l2_npu0_Sfu_coeff33,
      Write_Dx_l2_npu0_Sfu_coeff33,
    },
    { /* 324 : INDEX_DX_L2_NPU0_SFU_COEFF33_PAF_MULT_COEFF10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xac, DX_L2_NPU0_SFU_COEFF33_PAF_MULT_COEFF10_LEN, DX_L2_NPU0_SFU_COEFF33_PAF_MULT_COEFF10_MASK, DX_L2_NPU0_SFU_COEFF33_PAF_MULT_COEFF10_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF33.PAF_MULT_COEFF10", 
      Read_Dx_l2_npu0_Sfu_coeff33_PAF_MULT_COEFF10,
      Write_Dx_l2_npu0_Sfu_coeff33_PAF_MULT_COEFF10,
    },
    { /* 325 : INDEX_DX_L2_NPU0_SFU_COEFF34 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF34", 
      Read_Dx_l2_npu0_Sfu_coeff34,
      Write_Dx_l2_npu0_Sfu_coeff34,
    },
    { /* 326 : INDEX_DX_L2_NPU0_SFU_COEFF34_PAF_MULT_COEFF11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb0, DX_L2_NPU0_SFU_COEFF34_PAF_MULT_COEFF11_LEN, DX_L2_NPU0_SFU_COEFF34_PAF_MULT_COEFF11_MASK, DX_L2_NPU0_SFU_COEFF34_PAF_MULT_COEFF11_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF34.PAF_MULT_COEFF11", 
      Read_Dx_l2_npu0_Sfu_coeff34_PAF_MULT_COEFF11,
      Write_Dx_l2_npu0_Sfu_coeff34_PAF_MULT_COEFF11,
    },
    { /* 327 : INDEX_DX_L2_NPU0_SFU_COEFF35 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF35", 
      Read_Dx_l2_npu0_Sfu_coeff35,
      Write_Dx_l2_npu0_Sfu_coeff35,
    },
    { /* 328 : INDEX_DX_L2_NPU0_SFU_COEFF35_PAF_MULT_COEFF12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb4, DX_L2_NPU0_SFU_COEFF35_PAF_MULT_COEFF12_LEN, DX_L2_NPU0_SFU_COEFF35_PAF_MULT_COEFF12_MASK, DX_L2_NPU0_SFU_COEFF35_PAF_MULT_COEFF12_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF35.PAF_MULT_COEFF12", 
      Read_Dx_l2_npu0_Sfu_coeff35_PAF_MULT_COEFF12,
      Write_Dx_l2_npu0_Sfu_coeff35_PAF_MULT_COEFF12,
    },
    { /* 329 : INDEX_DX_L2_NPU0_SFU_COEFF36 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF36", 
      Read_Dx_l2_npu0_Sfu_coeff36,
      Write_Dx_l2_npu0_Sfu_coeff36,
    },
    { /* 330 : INDEX_DX_L2_NPU0_SFU_COEFF36_PAF_MULT_COEFF13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb8, DX_L2_NPU0_SFU_COEFF36_PAF_MULT_COEFF13_LEN, DX_L2_NPU0_SFU_COEFF36_PAF_MULT_COEFF13_MASK, DX_L2_NPU0_SFU_COEFF36_PAF_MULT_COEFF13_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF36.PAF_MULT_COEFF13", 
      Read_Dx_l2_npu0_Sfu_coeff36_PAF_MULT_COEFF13,
      Write_Dx_l2_npu0_Sfu_coeff36_PAF_MULT_COEFF13,
    },
    { /* 331 : INDEX_DX_L2_NPU0_SFU_COEFF37 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xbc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF37", 
      Read_Dx_l2_npu0_Sfu_coeff37,
      Write_Dx_l2_npu0_Sfu_coeff37,
    },
    { /* 332 : INDEX_DX_L2_NPU0_SFU_COEFF37_PAF_MULT_COEFF14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xbc, DX_L2_NPU0_SFU_COEFF37_PAF_MULT_COEFF14_LEN, DX_L2_NPU0_SFU_COEFF37_PAF_MULT_COEFF14_MASK, DX_L2_NPU0_SFU_COEFF37_PAF_MULT_COEFF14_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF37.PAF_MULT_COEFF14", 
      Read_Dx_l2_npu0_Sfu_coeff37_PAF_MULT_COEFF14,
      Write_Dx_l2_npu0_Sfu_coeff37_PAF_MULT_COEFF14,
    },
    { /* 333 : INDEX_DX_L2_NPU0_SFU_COEFF38 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF38", 
      Read_Dx_l2_npu0_Sfu_coeff38,
      Write_Dx_l2_npu0_Sfu_coeff38,
    },
    { /* 334 : INDEX_DX_L2_NPU0_SFU_COEFF38_PAF_MULT_COEFF15 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc0, DX_L2_NPU0_SFU_COEFF38_PAF_MULT_COEFF15_LEN, DX_L2_NPU0_SFU_COEFF38_PAF_MULT_COEFF15_MASK, DX_L2_NPU0_SFU_COEFF38_PAF_MULT_COEFF15_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF38.PAF_MULT_COEFF15", 
      Read_Dx_l2_npu0_Sfu_coeff38_PAF_MULT_COEFF15,
      Write_Dx_l2_npu0_Sfu_coeff38_PAF_MULT_COEFF15,
    },
    { /* 335 : INDEX_DX_L2_NPU0_SFU_COEFF39 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF39", 
      Read_Dx_l2_npu0_Sfu_coeff39,
      Write_Dx_l2_npu0_Sfu_coeff39,
    },
    { /* 336 : INDEX_DX_L2_NPU0_SFU_COEFF39_PAF_ADD_COEFF0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc4, DX_L2_NPU0_SFU_COEFF39_PAF_ADD_COEFF0_LEN, DX_L2_NPU0_SFU_COEFF39_PAF_ADD_COEFF0_MASK, DX_L2_NPU0_SFU_COEFF39_PAF_ADD_COEFF0_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF39.PAF_ADD_COEFF0", 
      Read_Dx_l2_npu0_Sfu_coeff39_PAF_ADD_COEFF0,
      Write_Dx_l2_npu0_Sfu_coeff39_PAF_ADD_COEFF0,
    },
    { /* 337 : INDEX_DX_L2_NPU0_SFU_COEFF40 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF40", 
      Read_Dx_l2_npu0_Sfu_coeff40,
      Write_Dx_l2_npu0_Sfu_coeff40,
    },
    { /* 338 : INDEX_DX_L2_NPU0_SFU_COEFF40_PAF_ADD_COEFF1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc8, DX_L2_NPU0_SFU_COEFF40_PAF_ADD_COEFF1_LEN, DX_L2_NPU0_SFU_COEFF40_PAF_ADD_COEFF1_MASK, DX_L2_NPU0_SFU_COEFF40_PAF_ADD_COEFF1_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF40.PAF_ADD_COEFF1", 
      Read_Dx_l2_npu0_Sfu_coeff40_PAF_ADD_COEFF1,
      Write_Dx_l2_npu0_Sfu_coeff40_PAF_ADD_COEFF1,
    },
    { /* 339 : INDEX_DX_L2_NPU0_SFU_COEFF41 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xcc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF41", 
      Read_Dx_l2_npu0_Sfu_coeff41,
      Write_Dx_l2_npu0_Sfu_coeff41,
    },
    { /* 340 : INDEX_DX_L2_NPU0_SFU_COEFF41_PAF_ADD_COEFF2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xcc, DX_L2_NPU0_SFU_COEFF41_PAF_ADD_COEFF2_LEN, DX_L2_NPU0_SFU_COEFF41_PAF_ADD_COEFF2_MASK, DX_L2_NPU0_SFU_COEFF41_PAF_ADD_COEFF2_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF41.PAF_ADD_COEFF2", 
      Read_Dx_l2_npu0_Sfu_coeff41_PAF_ADD_COEFF2,
      Write_Dx_l2_npu0_Sfu_coeff41_PAF_ADD_COEFF2,
    },
    { /* 341 : INDEX_DX_L2_NPU0_SFU_COEFF42 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF42", 
      Read_Dx_l2_npu0_Sfu_coeff42,
      Write_Dx_l2_npu0_Sfu_coeff42,
    },
    { /* 342 : INDEX_DX_L2_NPU0_SFU_COEFF42_PAF_ADD_COEFF3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd0, DX_L2_NPU0_SFU_COEFF42_PAF_ADD_COEFF3_LEN, DX_L2_NPU0_SFU_COEFF42_PAF_ADD_COEFF3_MASK, DX_L2_NPU0_SFU_COEFF42_PAF_ADD_COEFF3_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF42.PAF_ADD_COEFF3", 
      Read_Dx_l2_npu0_Sfu_coeff42_PAF_ADD_COEFF3,
      Write_Dx_l2_npu0_Sfu_coeff42_PAF_ADD_COEFF3,
    },
    { /* 343 : INDEX_DX_L2_NPU0_SFU_COEFF43 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF43", 
      Read_Dx_l2_npu0_Sfu_coeff43,
      Write_Dx_l2_npu0_Sfu_coeff43,
    },
    { /* 344 : INDEX_DX_L2_NPU0_SFU_COEFF43_PAF_ADD_COEFF4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd4, DX_L2_NPU0_SFU_COEFF43_PAF_ADD_COEFF4_LEN, DX_L2_NPU0_SFU_COEFF43_PAF_ADD_COEFF4_MASK, DX_L2_NPU0_SFU_COEFF43_PAF_ADD_COEFF4_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF43.PAF_ADD_COEFF4", 
      Read_Dx_l2_npu0_Sfu_coeff43_PAF_ADD_COEFF4,
      Write_Dx_l2_npu0_Sfu_coeff43_PAF_ADD_COEFF4,
    },
    { /* 345 : INDEX_DX_L2_NPU0_SFU_COEFF44 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF44", 
      Read_Dx_l2_npu0_Sfu_coeff44,
      Write_Dx_l2_npu0_Sfu_coeff44,
    },
    { /* 346 : INDEX_DX_L2_NPU0_SFU_COEFF44_PAF_ADD_COEFF5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd8, DX_L2_NPU0_SFU_COEFF44_PAF_ADD_COEFF5_LEN, DX_L2_NPU0_SFU_COEFF44_PAF_ADD_COEFF5_MASK, DX_L2_NPU0_SFU_COEFF44_PAF_ADD_COEFF5_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF44.PAF_ADD_COEFF5", 
      Read_Dx_l2_npu0_Sfu_coeff44_PAF_ADD_COEFF5,
      Write_Dx_l2_npu0_Sfu_coeff44_PAF_ADD_COEFF5,
    },
    { /* 347 : INDEX_DX_L2_NPU0_SFU_COEFF45 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xdc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF45", 
      Read_Dx_l2_npu0_Sfu_coeff45,
      Write_Dx_l2_npu0_Sfu_coeff45,
    },
    { /* 348 : INDEX_DX_L2_NPU0_SFU_COEFF45_PAF_ADD_COEFF6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xdc, DX_L2_NPU0_SFU_COEFF45_PAF_ADD_COEFF6_LEN, DX_L2_NPU0_SFU_COEFF45_PAF_ADD_COEFF6_MASK, DX_L2_NPU0_SFU_COEFF45_PAF_ADD_COEFF6_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF45.PAF_ADD_COEFF6", 
      Read_Dx_l2_npu0_Sfu_coeff45_PAF_ADD_COEFF6,
      Write_Dx_l2_npu0_Sfu_coeff45_PAF_ADD_COEFF6,
    },
    { /* 349 : INDEX_DX_L2_NPU0_SFU_COEFF46 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF46", 
      Read_Dx_l2_npu0_Sfu_coeff46,
      Write_Dx_l2_npu0_Sfu_coeff46,
    },
    { /* 350 : INDEX_DX_L2_NPU0_SFU_COEFF46_PAF_ADD_COEFF7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe0, DX_L2_NPU0_SFU_COEFF46_PAF_ADD_COEFF7_LEN, DX_L2_NPU0_SFU_COEFF46_PAF_ADD_COEFF7_MASK, DX_L2_NPU0_SFU_COEFF46_PAF_ADD_COEFF7_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF46.PAF_ADD_COEFF7", 
      Read_Dx_l2_npu0_Sfu_coeff46_PAF_ADD_COEFF7,
      Write_Dx_l2_npu0_Sfu_coeff46_PAF_ADD_COEFF7,
    },
    { /* 351 : INDEX_DX_L2_NPU0_SFU_COEFF47 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF47", 
      Read_Dx_l2_npu0_Sfu_coeff47,
      Write_Dx_l2_npu0_Sfu_coeff47,
    },
    { /* 352 : INDEX_DX_L2_NPU0_SFU_COEFF47_PAF_ADD_COEFF8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe4, DX_L2_NPU0_SFU_COEFF47_PAF_ADD_COEFF8_LEN, DX_L2_NPU0_SFU_COEFF47_PAF_ADD_COEFF8_MASK, DX_L2_NPU0_SFU_COEFF47_PAF_ADD_COEFF8_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF47.PAF_ADD_COEFF8", 
      Read_Dx_l2_npu0_Sfu_coeff47_PAF_ADD_COEFF8,
      Write_Dx_l2_npu0_Sfu_coeff47_PAF_ADD_COEFF8,
    },
    { /* 353 : INDEX_DX_L2_NPU0_SFU_COEFF48 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF48", 
      Read_Dx_l2_npu0_Sfu_coeff48,
      Write_Dx_l2_npu0_Sfu_coeff48,
    },
    { /* 354 : INDEX_DX_L2_NPU0_SFU_COEFF48_PAF_ADD_COEFF9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe8, DX_L2_NPU0_SFU_COEFF48_PAF_ADD_COEFF9_LEN, DX_L2_NPU0_SFU_COEFF48_PAF_ADD_COEFF9_MASK, DX_L2_NPU0_SFU_COEFF48_PAF_ADD_COEFF9_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF48.PAF_ADD_COEFF9", 
      Read_Dx_l2_npu0_Sfu_coeff48_PAF_ADD_COEFF9,
      Write_Dx_l2_npu0_Sfu_coeff48_PAF_ADD_COEFF9,
    },
    { /* 355 : INDEX_DX_L2_NPU0_SFU_COEFF49 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xec, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF49", 
      Read_Dx_l2_npu0_Sfu_coeff49,
      Write_Dx_l2_npu0_Sfu_coeff49,
    },
    { /* 356 : INDEX_DX_L2_NPU0_SFU_COEFF49_PAF_ADD_COEFF10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xec, DX_L2_NPU0_SFU_COEFF49_PAF_ADD_COEFF10_LEN, DX_L2_NPU0_SFU_COEFF49_PAF_ADD_COEFF10_MASK, DX_L2_NPU0_SFU_COEFF49_PAF_ADD_COEFF10_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF49.PAF_ADD_COEFF10", 
      Read_Dx_l2_npu0_Sfu_coeff49_PAF_ADD_COEFF10,
      Write_Dx_l2_npu0_Sfu_coeff49_PAF_ADD_COEFF10,
    },
    { /* 357 : INDEX_DX_L2_NPU0_SFU_COEFF50 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF50", 
      Read_Dx_l2_npu0_Sfu_coeff50,
      Write_Dx_l2_npu0_Sfu_coeff50,
    },
    { /* 358 : INDEX_DX_L2_NPU0_SFU_COEFF50_PAF_ADD_COEFF11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf0, DX_L2_NPU0_SFU_COEFF50_PAF_ADD_COEFF11_LEN, DX_L2_NPU0_SFU_COEFF50_PAF_ADD_COEFF11_MASK, DX_L2_NPU0_SFU_COEFF50_PAF_ADD_COEFF11_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF50.PAF_ADD_COEFF11", 
      Read_Dx_l2_npu0_Sfu_coeff50_PAF_ADD_COEFF11,
      Write_Dx_l2_npu0_Sfu_coeff50_PAF_ADD_COEFF11,
    },
    { /* 359 : INDEX_DX_L2_NPU0_SFU_COEFF51 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF51", 
      Read_Dx_l2_npu0_Sfu_coeff51,
      Write_Dx_l2_npu0_Sfu_coeff51,
    },
    { /* 360 : INDEX_DX_L2_NPU0_SFU_COEFF51_PAF_ADD_COEFF12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf4, DX_L2_NPU0_SFU_COEFF51_PAF_ADD_COEFF12_LEN, DX_L2_NPU0_SFU_COEFF51_PAF_ADD_COEFF12_MASK, DX_L2_NPU0_SFU_COEFF51_PAF_ADD_COEFF12_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF51.PAF_ADD_COEFF12", 
      Read_Dx_l2_npu0_Sfu_coeff51_PAF_ADD_COEFF12,
      Write_Dx_l2_npu0_Sfu_coeff51_PAF_ADD_COEFF12,
    },
    { /* 361 : INDEX_DX_L2_NPU0_SFU_COEFF52 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF52", 
      Read_Dx_l2_npu0_Sfu_coeff52,
      Write_Dx_l2_npu0_Sfu_coeff52,
    },
    { /* 362 : INDEX_DX_L2_NPU0_SFU_COEFF52_PAF_ADD_COEFF13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf8, DX_L2_NPU0_SFU_COEFF52_PAF_ADD_COEFF13_LEN, DX_L2_NPU0_SFU_COEFF52_PAF_ADD_COEFF13_MASK, DX_L2_NPU0_SFU_COEFF52_PAF_ADD_COEFF13_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF52.PAF_ADD_COEFF13", 
      Read_Dx_l2_npu0_Sfu_coeff52_PAF_ADD_COEFF13,
      Write_Dx_l2_npu0_Sfu_coeff52_PAF_ADD_COEFF13,
    },
    { /* 363 : INDEX_DX_L2_NPU0_SFU_COEFF53 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xfc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF53", 
      Read_Dx_l2_npu0_Sfu_coeff53,
      Write_Dx_l2_npu0_Sfu_coeff53,
    },
    { /* 364 : INDEX_DX_L2_NPU0_SFU_COEFF53_PAF_ADD_COEFF14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xfc, DX_L2_NPU0_SFU_COEFF53_PAF_ADD_COEFF14_LEN, DX_L2_NPU0_SFU_COEFF53_PAF_ADD_COEFF14_MASK, DX_L2_NPU0_SFU_COEFF53_PAF_ADD_COEFF14_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF53.PAF_ADD_COEFF14", 
      Read_Dx_l2_npu0_Sfu_coeff53_PAF_ADD_COEFF14,
      Write_Dx_l2_npu0_Sfu_coeff53_PAF_ADD_COEFF14,
    },
    { /* 365 : INDEX_DX_L2_NPU0_SFU_COEFF54 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x100, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF54", 
      Read_Dx_l2_npu0_Sfu_coeff54,
      Write_Dx_l2_npu0_Sfu_coeff54,
    },
    { /* 366 : INDEX_DX_L2_NPU0_SFU_COEFF54_PAF_ADD_COEFF15 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x100, DX_L2_NPU0_SFU_COEFF54_PAF_ADD_COEFF15_LEN, DX_L2_NPU0_SFU_COEFF54_PAF_ADD_COEFF15_MASK, DX_L2_NPU0_SFU_COEFF54_PAF_ADD_COEFF15_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF54.PAF_ADD_COEFF15", 
      Read_Dx_l2_npu0_Sfu_coeff54_PAF_ADD_COEFF15,
      Write_Dx_l2_npu0_Sfu_coeff54_PAF_ADD_COEFF15,
    },
    { /* 367 : INDEX_DX_L2_NPU0_RSVD1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x104, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD1", 
      Read_Dx_l2_npu0_Rsvd1,
      Write_Dx_l2_npu0_Rsvd1,
    },
    { /* 368 : INDEX_DX_L2_NPU0_RSVD1_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x104, DX_L2_NPU0_RSVD1_RESERVED3_LEN, DX_L2_NPU0_RSVD1_RESERVED3_MASK, DX_L2_NPU0_RSVD1_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD1.RESERVED3", 
      Read_Dx_l2_npu0_Rsvd1_RESERVED3,
      Write_Dx_l2_npu0_Rsvd1_RESERVED3,
    },
    { /* 369 : INDEX_DX_L2_NPU0_RSVD1_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x104, DX_L2_NPU0_RSVD1_RESERVED2_LEN, DX_L2_NPU0_RSVD1_RESERVED2_MASK, DX_L2_NPU0_RSVD1_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD1.RESERVED2", 
      Read_Dx_l2_npu0_Rsvd1_RESERVED2,
      Write_Dx_l2_npu0_Rsvd1_RESERVED2,
    },
    { /* 370 : INDEX_DX_L2_NPU0_RSVD1_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x104, DX_L2_NPU0_RSVD1_RESERVED1_LEN, DX_L2_NPU0_RSVD1_RESERVED1_MASK, DX_L2_NPU0_RSVD1_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD1.RESERVED1", 
      Read_Dx_l2_npu0_Rsvd1_RESERVED1,
      Write_Dx_l2_npu0_Rsvd1_RESERVED1,
    },
    { /* 371 : INDEX_DX_L2_NPU0_RSVD1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x104, DX_L2_NPU0_RSVD1_RESERVED0_LEN, DX_L2_NPU0_RSVD1_RESERVED0_MASK, DX_L2_NPU0_RSVD1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD1.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd1_RESERVED0,
      Write_Dx_l2_npu0_Rsvd1_RESERVED0,
    },
    { /* 372 : INDEX_DX_L2_NPU0_RSVD2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x108, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD2", 
      Read_Dx_l2_npu0_Rsvd2,
      Write_Dx_l2_npu0_Rsvd2,
    },
    { /* 373 : INDEX_DX_L2_NPU0_RSVD2_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x108, DX_L2_NPU0_RSVD2_RESERVED3_LEN, DX_L2_NPU0_RSVD2_RESERVED3_MASK, DX_L2_NPU0_RSVD2_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD2.RESERVED3", 
      Read_Dx_l2_npu0_Rsvd2_RESERVED3,
      Write_Dx_l2_npu0_Rsvd2_RESERVED3,
    },
    { /* 374 : INDEX_DX_L2_NPU0_RSVD2_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x108, DX_L2_NPU0_RSVD2_RESERVED2_LEN, DX_L2_NPU0_RSVD2_RESERVED2_MASK, DX_L2_NPU0_RSVD2_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD2.RESERVED2", 
      Read_Dx_l2_npu0_Rsvd2_RESERVED2,
      Write_Dx_l2_npu0_Rsvd2_RESERVED2,
    },
    { /* 375 : INDEX_DX_L2_NPU0_RSVD2_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x108, DX_L2_NPU0_RSVD2_RESERVED1_LEN, DX_L2_NPU0_RSVD2_RESERVED1_MASK, DX_L2_NPU0_RSVD2_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD2.RESERVED1", 
      Read_Dx_l2_npu0_Rsvd2_RESERVED1,
      Write_Dx_l2_npu0_Rsvd2_RESERVED1,
    },
    { /* 376 : INDEX_DX_L2_NPU0_RSVD2_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x108, DX_L2_NPU0_RSVD2_RESERVED0_LEN, DX_L2_NPU0_RSVD2_RESERVED0_MASK, DX_L2_NPU0_RSVD2_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD2.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd2_RESERVED0,
      Write_Dx_l2_npu0_Rsvd2_RESERVED0,
    },
    { /* 377 : INDEX_DX_L2_NPU0_PE0_IMG2COL0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_IMG2COL0", 
      Read_Dx_l2_npu0_Pe0_img2col0,
      Write_Dx_l2_npu0_Pe0_img2col0,
    },
    { /* 378 : INDEX_DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_CH_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10c, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_CH_OFFSET_LEN, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_CH_OFFSET_MASK, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_CH_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_CH_OFFSET", 
      Read_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_CH_OFFSET,
      Write_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_CH_OFFSET,
    },
    { /* 379 : INDEX_DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_LINE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10c, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_LINE_OFFSET_LEN, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_LINE_OFFSET_MASK, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_LINE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_LINE_OFFSET", 
      Read_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_LINE_OFFSET,
      Write_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_LINE_OFFSET,
    },
    { /* 380 : INDEX_DX_L2_NPU0_PE0_IMG2COL0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10c, DX_L2_NPU0_PE0_IMG2COL0_RESERVED0_LEN, DX_L2_NPU0_PE0_IMG2COL0_RESERVED0_MASK, DX_L2_NPU0_PE0_IMG2COL0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_IMG2COL0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_img2col0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_img2col0_RESERVED0,
    },
    { /* 381 : INDEX_DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10c, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_EN_LEN, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_EN_MASK, DX_L2_NPU0_PE0_IMG2COL0_PE0_IMG2COL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_IMG2COL0.PE0_IMG2COL_EN", 
      Read_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_EN,
      Write_Dx_l2_npu0_Pe0_img2col0_PE0_IMG2COL_EN,
    },
    { /* 382 : INDEX_DX_L2_NPU0_PE0_IMG2COL1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x110, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_IMG2COL1", 
      Read_Dx_l2_npu0_Pe0_img2col1,
      Write_Dx_l2_npu0_Pe0_img2col1,
    },
    { /* 383 : INDEX_DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OUT_FEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x110, DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OUT_FEATURE_WIDTH_LEN, DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OUT_FEATURE_WIDTH_MASK, DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OUT_FEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OUT_FEATURE_WIDTH", 
      Read_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OUT_FEATURE_WIDTH,
      Write_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OUT_FEATURE_WIDTH,
    },
    { /* 384 : INDEX_DX_L2_NPU0_PE0_IMG2COL1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x110, DX_L2_NPU0_PE0_IMG2COL1_RESERVED0_LEN, DX_L2_NPU0_PE0_IMG2COL1_RESERVED0_MASK, DX_L2_NPU0_PE0_IMG2COL1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_IMG2COL1.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_img2col1_RESERVED0,
      Write_Dx_l2_npu0_Pe0_img2col1_RESERVED0,
    },
    { /* 385 : INDEX_DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OHEIGHT_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x110, DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OHEIGHT_OFFSET_LEN, DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OHEIGHT_OFFSET_MASK, DX_L2_NPU0_PE0_IMG2COL1_PE0_IMG2COL_OHEIGHT_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_IMG2COL1.PE0_IMG2COL_OHEIGHT_OFFSET", 
      Read_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OHEIGHT_OFFSET,
      Write_Dx_l2_npu0_Pe0_img2col1_PE0_IMG2COL_OHEIGHT_OFFSET,
    },
    { /* 386 : INDEX_DX_L2_NPU0_PE0_FMT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x114, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_FMT", 
      Read_Dx_l2_npu0_Pe0_fmt,
      Write_Dx_l2_npu0_Pe0_fmt,
    },
    { /* 387 : INDEX_DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_LINE_OPT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x114, DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_LINE_OPT_LEN, DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_LINE_OPT_MASK, DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_LINE_OPT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_LINE_OPT", 
      Read_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_LINE_OPT,
      Write_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_LINE_OPT,
    },
    { /* 388 : INDEX_DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x114, DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_VALID_NUM_LEN, DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_VALID_NUM_MASK, DX_L2_NPU0_PE0_FMT_PE0_FMT_FIRST_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_FMT.PE0_FMT_FIRST_VALID_NUM", 
      Read_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_VALID_NUM,
      Write_Dx_l2_npu0_Pe0_fmt_PE0_FMT_FIRST_VALID_NUM,
    },
    { /* 389 : INDEX_DX_L2_NPU0_PE0_FMT_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x114, DX_L2_NPU0_PE0_FMT_RESERVED0_LEN, DX_L2_NPU0_PE0_FMT_RESERVED0_MASK, DX_L2_NPU0_PE0_FMT_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_FMT.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_fmt_RESERVED0,
      Write_Dx_l2_npu0_Pe0_fmt_RESERVED0,
    },
    { /* 390 : INDEX_DX_L2_NPU0_PE0_FMT_PE0_FMT_ENABLE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x114, DX_L2_NPU0_PE0_FMT_PE0_FMT_ENABLE_LEN, DX_L2_NPU0_PE0_FMT_PE0_FMT_ENABLE_MASK, DX_L2_NPU0_PE0_FMT_PE0_FMT_ENABLE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_FMT.PE0_FMT_ENABLE", 
      Read_Dx_l2_npu0_Pe0_fmt_PE0_FMT_ENABLE,
      Write_Dx_l2_npu0_Pe0_fmt_PE0_FMT_ENABLE,
    },
    { /* 391 : INDEX_DX_L2_NPU0_PE0_FMT_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x118, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_FMT_CFG0", 
      Read_Dx_l2_npu0_Pe0_fmt_cfg0,
      Write_Dx_l2_npu0_Pe0_fmt_cfg0,
    },
    { /* 392 : INDEX_DX_L2_NPU0_PE0_FMT_CFG0_PE0_FMT_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x118, DX_L2_NPU0_PE0_FMT_CFG0_PE0_FMT_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE0_FMT_CFG0_PE0_FMT_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE0_FMT_CFG0_PE0_FMT_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_FMT_CFG0.PE0_FMT_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_fmt_cfg0_PE0_FMT_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_fmt_cfg0_PE0_FMT_READ_BASE_ADDR,
    },
    { /* 393 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x11c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_ADDR_GEN0", 
      Read_Dx_l2_npu0_Pe0_addr_gen0,
      Write_Dx_l2_npu0_Pe0_addr_gen0,
    },
    { /* 394 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x11c, DX_L2_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_LEN, DX_L2_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_MASK, DX_L2_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM", 
      Read_Dx_l2_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
      Write_Dx_l2_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
    },
    { /* 395 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x11c, DX_L2_NPU0_PE0_ADDR_GEN0_RESERVED0_LEN, DX_L2_NPU0_PE0_ADDR_GEN0_RESERVED0_MASK, DX_L2_NPU0_PE0_ADDR_GEN0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_ADDR_GEN0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_addr_gen0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_addr_gen0_RESERVED0,
    },
    { /* 396 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x120, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN1", 
      Read_Dx_l2_npu0_Pe0_addr_gen1,
      Write_Dx_l2_npu0_Pe0_addr_gen1,
    },
    { /* 397 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x120, DX_L2_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR_LEN, DX_L2_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR_MASK, DX_L2_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR,
    },
    { /* 398 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x124, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_ADDR_GEN2", 
      Read_Dx_l2_npu0_Pe0_addr_gen2,
      Write_Dx_l2_npu0_Pe0_addr_gen2,
    },
    { /* 399 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN2_PE0_BN_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x124, DX_L2_NPU0_PE0_ADDR_GEN2_PE0_BN_ADDR_GEN_MODE_LEN, DX_L2_NPU0_PE0_ADDR_GEN2_PE0_BN_ADDR_GEN_MODE_MASK, DX_L2_NPU0_PE0_ADDR_GEN2_PE0_BN_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN2.PE0_BN_ADDR_GEN_MODE", 
      Read_Dx_l2_npu0_Pe0_addr_gen2_PE0_BN_ADDR_GEN_MODE,
      Write_Dx_l2_npu0_Pe0_addr_gen2_PE0_BN_ADDR_GEN_MODE,
    },
    { /* 400 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN2_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x124, DX_L2_NPU0_PE0_ADDR_GEN2_RESERVED0_LEN, DX_L2_NPU0_PE0_ADDR_GEN2_RESERVED0_MASK, DX_L2_NPU0_PE0_ADDR_GEN2_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_ADDR_GEN2.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_addr_gen2_RESERVED0,
      Write_Dx_l2_npu0_Pe0_addr_gen2_RESERVED0,
    },
    { /* 401 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x128, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN3", 
      Read_Dx_l2_npu0_Pe0_addr_gen3,
      Write_Dx_l2_npu0_Pe0_addr_gen3,
    },
    { /* 402 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x128, DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_OFFSET_LEN, DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_OFFSET_MASK, DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_OFFSET", 
      Read_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_OFFSET,
      Write_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_OFFSET,
    },
    { /* 403 : INDEX_DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x128, DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM_LEN, DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM_MASK, DX_L2_NPU0_PE0_ADDR_GEN3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN3.PE0_BN_ADDR_GEN_MODE1_MAX_NUM", 
      Read_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM,
      Write_Dx_l2_npu0_Pe0_addr_gen3_PE0_BN_ADDR_GEN_MODE1_MAX_NUM,
    },
    { /* 404 : INDEX_DX_L2_NPU0_PE0_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CTRL", 
      Read_Dx_l2_npu0_Pe0_ctrl,
      Write_Dx_l2_npu0_Pe0_ctrl,
    },
    { /* 405 : INDEX_DX_L2_NPU0_PE0_CTRL_PE0_CONV_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, DX_L2_NPU0_PE0_CTRL_PE0_CONV_TYPE_LEN, DX_L2_NPU0_PE0_CTRL_PE0_CONV_TYPE_MASK, DX_L2_NPU0_PE0_CTRL_PE0_CONV_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CTRL.PE0_CONV_TYPE", 
      Read_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_TYPE,
      Write_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_TYPE,
    },
    { /* 406 : INDEX_DX_L2_NPU0_PE0_CTRL_PE0_CONV_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, DX_L2_NPU0_PE0_CTRL_PE0_CONV_EN_LEN, DX_L2_NPU0_PE0_CTRL_PE0_CONV_EN_MASK, DX_L2_NPU0_PE0_CTRL_PE0_CONV_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CTRL.PE0_CONV_EN", 
      Read_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_EN,
      Write_Dx_l2_npu0_Pe0_ctrl_PE0_CONV_EN,
    },
    { /* 407 : INDEX_DX_L2_NPU0_PE0_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, DX_L2_NPU0_PE0_CTRL_RESERVED0_LEN, DX_L2_NPU0_PE0_CTRL_RESERVED0_MASK, DX_L2_NPU0_PE0_CTRL_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CTRL.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_ctrl_RESERVED0,
      Write_Dx_l2_npu0_Pe0_ctrl_RESERVED0,
    },
    { /* 408 : INDEX_DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH_LEN, DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH_MASK, DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH", 
      Read_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH,
      Write_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH,
    },
    { /* 409 : INDEX_DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN_LEN, DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN_MASK, DX_L2_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN", 
      Read_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN,
      Write_Dx_l2_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN,
    },
    { /* 410 : INDEX_DX_L2_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, DX_L2_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM_LEN, DX_L2_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM_MASK, DX_L2_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM", 
      Read_Dx_l2_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM,
      Write_Dx_l2_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM,
    },
    { /* 411 : INDEX_DX_L2_NPU0_PE0_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x130, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG0", 
      Read_Dx_l2_npu0_Pe0_cfg0,
      Write_Dx_l2_npu0_Pe0_cfg0,
    },
    { /* 412 : INDEX_DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x130, DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM_LEN, DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM_MASK, DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM", 
      Read_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM,
      Write_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM,
    },
    { /* 413 : INDEX_DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x130, DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD_LEN, DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD_MASK, DX_L2_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD", 
      Read_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD,
      Write_Dx_l2_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD,
    },
    { /* 414 : INDEX_DX_L2_NPU0_PE0_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x130, DX_L2_NPU0_PE0_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg0_RESERVED0,
    },
    { /* 415 : INDEX_DX_L2_NPU0_PE0_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x134, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG1", 
      Read_Dx_l2_npu0_Pe0_cfg1,
      Write_Dx_l2_npu0_Pe0_cfg1,
    },
    { /* 416 : INDEX_DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x134, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL_LEN, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL_MASK, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL", 
      Read_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL,
      Write_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL,
    },
    { /* 417 : INDEX_DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x134, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER_LEN, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER_MASK, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER", 
      Read_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER,
      Write_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER,
    },
    { /* 418 : INDEX_DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_DISABLE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x134, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_DISABLE_LEN, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_DISABLE_MASK, DX_L2_NPU0_PE0_CFG1_PE0_OFEATURE_DISABLE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG1.PE0_OFEATURE_DISABLE", 
      Read_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_DISABLE,
      Write_Dx_l2_npu0_Pe0_cfg1_PE0_OFEATURE_DISABLE,
    },
    { /* 419 : INDEX_DX_L2_NPU0_PE0_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x138, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG2", 
      Read_Dx_l2_npu0_Pe0_cfg2,
      Write_Dx_l2_npu0_Pe0_cfg2,
    },
    { /* 420 : INDEX_DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x138, DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH_LEN, DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH_MASK, DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH", 
      Read_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH,
      Write_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH,
    },
    { /* 421 : INDEX_DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x138, DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT_LEN, DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT_MASK, DX_L2_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT", 
      Read_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT,
      Write_Dx_l2_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT,
    },
    { /* 422 : INDEX_DX_L2_NPU0_PE0_CFG2_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x138, DX_L2_NPU0_PE0_CFG2_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG2_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG2_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG2.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg2_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg2_RESERVED0,
    },
    { /* 423 : INDEX_DX_L2_NPU0_PE0_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x13c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG3", 
      Read_Dx_l2_npu0_Pe0_cfg3,
      Write_Dx_l2_npu0_Pe0_cfg3,
    },
    { /* 424 : INDEX_DX_L2_NPU0_PE0_CFG3_PE0_FEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x13c, DX_L2_NPU0_PE0_CFG3_PE0_FEATURE_CHANNEL_LEN, DX_L2_NPU0_PE0_CFG3_PE0_FEATURE_CHANNEL_MASK, DX_L2_NPU0_PE0_CFG3_PE0_FEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG3.PE0_FEATURE_CHANNEL", 
      Read_Dx_l2_npu0_Pe0_cfg3_PE0_FEATURE_CHANNEL,
      Write_Dx_l2_npu0_Pe0_cfg3_PE0_FEATURE_CHANNEL,
    },
    { /* 425 : INDEX_DX_L2_NPU0_PE0_CFG3_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x13c, DX_L2_NPU0_PE0_CFG3_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG3_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG3_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG3.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg3_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg3_RESERVED0,
    },
    { /* 426 : INDEX_DX_L2_NPU0_PE0_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x140, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG4", 
      Read_Dx_l2_npu0_Pe0_cfg4,
      Write_Dx_l2_npu0_Pe0_cfg4,
    },
    { /* 427 : INDEX_DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x140, DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_WIDTH_LEN, DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_WIDTH_MASK, DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_WIDTH", 
      Read_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_WIDTH,
      Write_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_WIDTH,
    },
    { /* 428 : INDEX_DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x140, DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT_LEN, DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT_MASK, DX_L2_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT", 
      Read_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT,
      Write_Dx_l2_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT,
    },
    { /* 429 : INDEX_DX_L2_NPU0_PE0_CFG4_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x140, DX_L2_NPU0_PE0_CFG4_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG4_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG4_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG4.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg4_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg4_RESERVED0,
    },
    { /* 430 : INDEX_DX_L2_NPU0_PE0_CFG5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x144, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG5", 
      Read_Dx_l2_npu0_Pe0_cfg5,
      Write_Dx_l2_npu0_Pe0_cfg5,
    },
    { /* 431 : INDEX_DX_L2_NPU0_PE0_CFG5_PE0_FILTER_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x144, DX_L2_NPU0_PE0_CFG5_PE0_FILTER_CHANNEL_LEN, DX_L2_NPU0_PE0_CFG5_PE0_FILTER_CHANNEL_MASK, DX_L2_NPU0_PE0_CFG5_PE0_FILTER_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG5.PE0_FILTER_CHANNEL", 
      Read_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_CHANNEL,
      Write_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_CHANNEL,
    },
    { /* 432 : INDEX_DX_L2_NPU0_PE0_CFG5_PE0_FILTER_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x144, DX_L2_NPU0_PE0_CFG5_PE0_FILTER_NUMBER_LEN, DX_L2_NPU0_PE0_CFG5_PE0_FILTER_NUMBER_MASK, DX_L2_NPU0_PE0_CFG5_PE0_FILTER_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG5.PE0_FILTER_NUMBER", 
      Read_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_NUMBER,
      Write_Dx_l2_npu0_Pe0_cfg5_PE0_FILTER_NUMBER,
    },
    { /* 433 : INDEX_DX_L2_NPU0_PE0_CFG6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x148, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG6", 
      Read_Dx_l2_npu0_Pe0_cfg6,
      Write_Dx_l2_npu0_Pe0_cfg6,
    },
    { /* 434 : INDEX_DX_L2_NPU0_PE0_CFG6_PE0_FILTER_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x148, DX_L2_NPU0_PE0_CFG6_PE0_FILTER_WIDTH_LEN, DX_L2_NPU0_PE0_CFG6_PE0_FILTER_WIDTH_MASK, DX_L2_NPU0_PE0_CFG6_PE0_FILTER_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG6.PE0_FILTER_WIDTH", 
      Read_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_WIDTH,
      Write_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_WIDTH,
    },
    { /* 435 : INDEX_DX_L2_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x148, DX_L2_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT_LEN, DX_L2_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT_MASK, DX_L2_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT", 
      Read_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT,
      Write_Dx_l2_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT,
    },
    { /* 436 : INDEX_DX_L2_NPU0_PE0_CFG6_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x148, DX_L2_NPU0_PE0_CFG6_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG6_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG6_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG6.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg6_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg6_RESERVED0,
    },
    { /* 437 : INDEX_DX_L2_NPU0_PE0_CFG7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG7", 
      Read_Dx_l2_npu0_Pe0_cfg7,
      Write_Dx_l2_npu0_Pe0_cfg7,
    },
    { /* 438 : INDEX_DX_L2_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, DX_L2_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE_LEN, DX_L2_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE_MASK, DX_L2_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE", 
      Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE,
      Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE,
    },
    { /* 439 : INDEX_DX_L2_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, DX_L2_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE_LEN, DX_L2_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE_MASK, DX_L2_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE", 
      Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE,
      Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE,
    },
    { /* 440 : INDEX_DX_L2_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, DX_L2_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE_LEN, DX_L2_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE_MASK, DX_L2_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE", 
      Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE,
      Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE,
    },
    { /* 441 : INDEX_DX_L2_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, DX_L2_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE_LEN, DX_L2_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE_MASK, DX_L2_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE", 
      Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE,
      Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE,
    },
    { /* 442 : INDEX_DX_L2_NPU0_PE0_CFG7_PE0_PAD_VALUE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, DX_L2_NPU0_PE0_CFG7_PE0_PAD_VALUE_LEN, DX_L2_NPU0_PE0_CFG7_PE0_PAD_VALUE_MASK, DX_L2_NPU0_PE0_CFG7_PE0_PAD_VALUE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG7.PE0_PAD_VALUE", 
      Read_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_VALUE,
      Write_Dx_l2_npu0_Pe0_cfg7_PE0_PAD_VALUE,
    },
    { /* 443 : INDEX_DX_L2_NPU0_PE0_CFG7_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, DX_L2_NPU0_PE0_CFG7_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG7_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG7_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG7.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg7_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg7_RESERVED0,
    },
    { /* 444 : INDEX_DX_L2_NPU0_PE0_CFG8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8", 
      Read_Dx_l2_npu0_Pe0_cfg8,
      Write_Dx_l2_npu0_Pe0_cfg8,
    },
    { /* 445 : INDEX_DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_X */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_X_LEN, DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_X_MASK, DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_X_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_X", 
      Read_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_X,
      Write_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_X,
    },
    { /* 446 : INDEX_DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_Y */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_Y_LEN, DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_Y_MASK, DX_L2_NPU0_PE0_CFG8_PE0_STRIDE_Y_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8.PE0_STRIDE_Y", 
      Read_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_Y,
      Write_Dx_l2_npu0_Pe0_cfg8_PE0_STRIDE_Y,
    },
    { /* 447 : INDEX_DX_L2_NPU0_PE0_CFG8_PE0_DILATION_X */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, DX_L2_NPU0_PE0_CFG8_PE0_DILATION_X_LEN, DX_L2_NPU0_PE0_CFG8_PE0_DILATION_X_MASK, DX_L2_NPU0_PE0_CFG8_PE0_DILATION_X_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8.PE0_DILATION_X", 
      Read_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_X,
      Write_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_X,
    },
    { /* 448 : INDEX_DX_L2_NPU0_PE0_CFG8_PE0_DILATION_Y */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, DX_L2_NPU0_PE0_CFG8_PE0_DILATION_Y_LEN, DX_L2_NPU0_PE0_CFG8_PE0_DILATION_Y_MASK, DX_L2_NPU0_PE0_CFG8_PE0_DILATION_Y_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8.PE0_DILATION_Y", 
      Read_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_Y,
      Write_Dx_l2_npu0_Pe0_cfg8_PE0_DILATION_Y,
    },
    { /* 449 : INDEX_DX_L2_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, DX_L2_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET_LEN, DX_L2_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET_MASK, DX_L2_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET", 
      Read_Dx_l2_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET,
      Write_Dx_l2_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET,
    },
    { /* 450 : INDEX_DX_L2_NPU0_PE0_CFG9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x154, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG9", 
      Read_Dx_l2_npu0_Pe0_cfg9,
      Write_Dx_l2_npu0_Pe0_cfg9,
    },
    { /* 451 : INDEX_DX_L2_NPU0_PE0_CFG9_PE0_READ_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x154, DX_L2_NPU0_PE0_CFG9_PE0_READ_FEATURE_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG9_PE0_READ_FEATURE_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG9_PE0_READ_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG9.PE0_READ_FEATURE_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg9_PE0_READ_FEATURE_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg9_PE0_READ_FEATURE_BASE_ADDR,
    },
    { /* 452 : INDEX_DX_L2_NPU0_PE0_CFG10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x158, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG10", 
      Read_Dx_l2_npu0_Pe0_cfg10,
      Write_Dx_l2_npu0_Pe0_cfg10,
    },
    { /* 453 : INDEX_DX_L2_NPU0_PE0_CFG10_PE0_WRITE_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x158, DX_L2_NPU0_PE0_CFG10_PE0_WRITE_FEATURE_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG10_PE0_WRITE_FEATURE_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG10_PE0_WRITE_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG10.PE0_WRITE_FEATURE_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg10_PE0_WRITE_FEATURE_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg10_PE0_WRITE_FEATURE_BASE_ADDR,
    },
    { /* 454 : INDEX_DX_L2_NPU0_PE0_CFG11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x15c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG11", 
      Read_Dx_l2_npu0_Pe0_cfg11,
      Write_Dx_l2_npu0_Pe0_cfg11,
    },
    { /* 455 : INDEX_DX_L2_NPU0_PE0_CFG11_PE0_READ_WEIGHT_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x15c, DX_L2_NPU0_PE0_CFG11_PE0_READ_WEIGHT_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG11_PE0_READ_WEIGHT_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG11_PE0_READ_WEIGHT_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG11.PE0_READ_WEIGHT_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg11_PE0_READ_WEIGHT_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg11_PE0_READ_WEIGHT_BASE_ADDR,
    },
    { /* 456 : INDEX_DX_L2_NPU0_PE0_CFG12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x160, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG12", 
      Read_Dx_l2_npu0_Pe0_cfg12,
      Write_Dx_l2_npu0_Pe0_cfg12,
    },
    { /* 457 : INDEX_DX_L2_NPU0_PE0_CFG12_PE0_BN_COEFF_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x160, DX_L2_NPU0_PE0_CFG12_PE0_BN_COEFF_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG12_PE0_BN_COEFF_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG12_PE0_BN_COEFF_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG12.PE0_BN_COEFF_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg12_PE0_BN_COEFF_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg12_PE0_BN_COEFF_READ_BASE_ADDR,
    },
    { /* 458 : INDEX_DX_L2_NPU0_PE0_CFG13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x164, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG13", 
      Read_Dx_l2_npu0_Pe0_cfg13,
      Write_Dx_l2_npu0_Pe0_cfg13,
    },
    { /* 459 : INDEX_DX_L2_NPU0_PE0_CFG13_PE0_BIAS_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x164, DX_L2_NPU0_PE0_CFG13_PE0_BIAS_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG13_PE0_BIAS_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG13_PE0_BIAS_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG13.PE0_BIAS_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg13_PE0_BIAS_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg13_PE0_BIAS_READ_BASE_ADDR,
    },
    { /* 460 : INDEX_DX_L2_NPU0_PE0_CFG14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x168, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG14", 
      Read_Dx_l2_npu0_Pe0_cfg14,
      Write_Dx_l2_npu0_Pe0_cfg14,
    },
    { /* 461 : INDEX_DX_L2_NPU0_PE0_CFG14_PE0_MUL_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x168, DX_L2_NPU0_PE0_CFG14_PE0_MUL_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG14_PE0_MUL_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG14_PE0_MUL_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG14.PE0_MUL_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg14_PE0_MUL_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg14_PE0_MUL_READ_BASE_ADDR,
    },
    { /* 462 : INDEX_DX_L2_NPU0_PE0_CFG15 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x16c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG15", 
      Read_Dx_l2_npu0_Pe0_cfg15,
      Write_Dx_l2_npu0_Pe0_cfg15,
    },
    { /* 463 : INDEX_DX_L2_NPU0_PE0_CFG15_PE0_ELEM_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x16c, DX_L2_NPU0_PE0_CFG15_PE0_ELEM_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE0_CFG15_PE0_ELEM_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE0_CFG15_PE0_ELEM_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG15.PE0_ELEM_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg15_PE0_ELEM_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg15_PE0_ELEM_READ_BASE_ADDR,
    },
    { /* 464 : INDEX_DX_L2_NPU0_PE0_CFG16 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x170, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG16", 
      Read_Dx_l2_npu0_Pe0_cfg16,
      Write_Dx_l2_npu0_Pe0_cfg16,
    },
    { /* 465 : INDEX_DX_L2_NPU0_PE0_CFG16_PE0_ELEM_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x170, DX_L2_NPU0_PE0_CFG16_PE0_ELEM_CHANNEL_OFFSET_LEN, DX_L2_NPU0_PE0_CFG16_PE0_ELEM_CHANNEL_OFFSET_MASK, DX_L2_NPU0_PE0_CFG16_PE0_ELEM_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG16.PE0_ELEM_CHANNEL_OFFSET", 
      Read_Dx_l2_npu0_Pe0_cfg16_PE0_ELEM_CHANNEL_OFFSET,
      Write_Dx_l2_npu0_Pe0_cfg16_PE0_ELEM_CHANNEL_OFFSET,
    },
    { /* 466 : INDEX_DX_L2_NPU0_PE0_CFG16_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x170, DX_L2_NPU0_PE0_CFG16_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG16_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG16_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG16.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg16_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg16_RESERVED0,
    },
    { /* 467 : INDEX_DX_L2_NPU0_PE0_CFG17 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x174, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG17", 
      Read_Dx_l2_npu0_Pe0_cfg17,
      Write_Dx_l2_npu0_Pe0_cfg17,
    },
    { /* 468 : INDEX_DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_MODE1_LINE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x174, DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_MODE1_LINE_SIZE_LEN, DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_MODE1_LINE_SIZE_MASK, DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_MODE1_LINE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_MODE1_LINE_SIZE", 
      Read_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_MODE1_LINE_SIZE,
      Write_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_MODE1_LINE_SIZE,
    },
    { /* 469 : INDEX_DX_L2_NPU0_PE0_CFG17_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x174, DX_L2_NPU0_PE0_CFG17_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG17_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG17_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG17.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg17_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg17_RESERVED0,
    },
    { /* 470 : INDEX_DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x174, DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_GEN_MODE_LEN, DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_GEN_MODE_MASK, DX_L2_NPU0_PE0_CFG17_PE0_WF_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG17.PE0_WF_ADDR_GEN_MODE", 
      Read_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_GEN_MODE,
      Write_Dx_l2_npu0_Pe0_cfg17_PE0_WF_ADDR_GEN_MODE,
    },
    { /* 471 : INDEX_DX_L2_NPU0_PE0_CFG18 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x178, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG18", 
      Read_Dx_l2_npu0_Pe0_cfg18,
      Write_Dx_l2_npu0_Pe0_cfg18,
    },
    { /* 472 : INDEX_DX_L2_NPU0_PE0_CFG18_PE0_WF_ADDR_MODE1_LINE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x178, DX_L2_NPU0_PE0_CFG18_PE0_WF_ADDR_MODE1_LINE_STRIDE_LEN, DX_L2_NPU0_PE0_CFG18_PE0_WF_ADDR_MODE1_LINE_STRIDE_MASK, DX_L2_NPU0_PE0_CFG18_PE0_WF_ADDR_MODE1_LINE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG18.PE0_WF_ADDR_MODE1_LINE_STRIDE", 
      Read_Dx_l2_npu0_Pe0_cfg18_PE0_WF_ADDR_MODE1_LINE_STRIDE,
      Write_Dx_l2_npu0_Pe0_cfg18_PE0_WF_ADDR_MODE1_LINE_STRIDE,
    },
    { /* 473 : INDEX_DX_L2_NPU0_PE0_CFG19 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x17c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG19", 
      Read_Dx_l2_npu0_Pe0_cfg19,
      Write_Dx_l2_npu0_Pe0_cfg19,
    },
    { /* 474 : INDEX_DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_LINE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x17c, DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_LINE_STRIDE_LEN, DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_LINE_STRIDE_MASK, DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_LINE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_LINE_STRIDE", 
      Read_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_LINE_STRIDE,
      Write_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_LINE_STRIDE,
    },
    { /* 475 : INDEX_DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x17c, DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_SURFACE_STRIDE_LEN, DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_SURFACE_STRIDE_MASK, DX_L2_NPU0_PE0_CFG19_PE0_WF_ADDR_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG19.PE0_WF_ADDR_SURFACE_STRIDE", 
      Read_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_SURFACE_STRIDE,
      Write_Dx_l2_npu0_Pe0_cfg19_PE0_WF_ADDR_SURFACE_STRIDE,
    },
    { /* 476 : INDEX_DX_L2_NPU0_PE0_CFG20 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x180, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG20", 
      Read_Dx_l2_npu0_Pe0_cfg20,
      Write_Dx_l2_npu0_Pe0_cfg20,
    },
    { /* 477 : INDEX_DX_L2_NPU0_PE0_CFG20_PE0_WF_WRITE_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x180, DX_L2_NPU0_PE0_CFG20_PE0_WF_WRITE_CNT_LEN, DX_L2_NPU0_PE0_CFG20_PE0_WF_WRITE_CNT_MASK, DX_L2_NPU0_PE0_CFG20_PE0_WF_WRITE_CNT_OFFSET, 0xffff, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG20.PE0_WF_WRITE_CNT", 
      Read_Dx_l2_npu0_Pe0_cfg20_PE0_WF_WRITE_CNT,
      Write_Dx_l2_npu0_Pe0_cfg20_PE0_WF_WRITE_CNT,
    },
    { /* 478 : INDEX_DX_L2_NPU0_PE0_CFG20_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x180, DX_L2_NPU0_PE0_CFG20_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG20_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG20_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG20.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg20_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg20_RESERVED0,
    },
    { /* 479 : INDEX_DX_L2_NPU0_PE0_CFG20_PE0_WF_RF2RF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x180, DX_L2_NPU0_PE0_CFG20_PE0_WF_RF2RF_TIME_LEN, DX_L2_NPU0_PE0_CFG20_PE0_WF_RF2RF_TIME_MASK, DX_L2_NPU0_PE0_CFG20_PE0_WF_RF2RF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG20.PE0_WF_RF2RF_TIME", 
      Read_Dx_l2_npu0_Pe0_cfg20_PE0_WF_RF2RF_TIME,
      Write_Dx_l2_npu0_Pe0_cfg20_PE0_WF_RF2RF_TIME,
    },
    { /* 480 : INDEX_DX_L2_NPU0_PE0_CFG21 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x184, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG21", 
      Read_Dx_l2_npu0_Pe0_cfg21,
      Write_Dx_l2_npu0_Pe0_cfg21,
    },
    { /* 481 : INDEX_DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x184, DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_SIZE_LEN, DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_SIZE_MASK, DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_SIZE", 
      Read_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_SIZE,
      Write_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_SIZE,
    },
    { /* 482 : INDEX_DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_ADDR_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x184, DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_ADDR_STRIDE_LEN, DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_ADDR_STRIDE_MASK, DX_L2_NPU0_PE0_CFG21_PE0_WF_RF2RF_ADDR_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG21.PE0_WF_RF2RF_ADDR_STRIDE", 
      Read_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_ADDR_STRIDE,
      Write_Dx_l2_npu0_Pe0_cfg21_PE0_WF_RF2RF_ADDR_STRIDE,
    },
    { /* 483 : INDEX_DX_L2_NPU0_PE0_CFG22 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x188, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG22", 
      Read_Dx_l2_npu0_Pe0_cfg22,
      Write_Dx_l2_npu0_Pe0_cfg22,
    },
    { /* 484 : INDEX_DX_L2_NPU0_PE0_CFG22_PE0_WF_RF2RF_SRC_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x188, DX_L2_NPU0_PE0_CFG22_PE0_WF_RF2RF_SRC_ADDR_LEN, DX_L2_NPU0_PE0_CFG22_PE0_WF_RF2RF_SRC_ADDR_MASK, DX_L2_NPU0_PE0_CFG22_PE0_WF_RF2RF_SRC_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG22.PE0_WF_RF2RF_SRC_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg22_PE0_WF_RF2RF_SRC_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg22_PE0_WF_RF2RF_SRC_ADDR,
    },
    { /* 485 : INDEX_DX_L2_NPU0_PE0_CFG23 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x18c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG23", 
      Read_Dx_l2_npu0_Pe0_cfg23,
      Write_Dx_l2_npu0_Pe0_cfg23,
    },
    { /* 486 : INDEX_DX_L2_NPU0_PE0_CFG23_PE0_WF_RF2RF_DST_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x18c, DX_L2_NPU0_PE0_CFG23_PE0_WF_RF2RF_DST_ADDR_LEN, DX_L2_NPU0_PE0_CFG23_PE0_WF_RF2RF_DST_ADDR_MASK, DX_L2_NPU0_PE0_CFG23_PE0_WF_RF2RF_DST_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG23.PE0_WF_RF2RF_DST_ADDR", 
      Read_Dx_l2_npu0_Pe0_cfg23_PE0_WF_RF2RF_DST_ADDR,
      Write_Dx_l2_npu0_Pe0_cfg23_PE0_WF_RF2RF_DST_ADDR,
    },
    { /* 487 : INDEX_DX_L2_NPU0_PE0_CFG24 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x190, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG24", 
      Read_Dx_l2_npu0_Pe0_cfg24,
      Write_Dx_l2_npu0_Pe0_cfg24,
    },
    { /* 488 : INDEX_DX_L2_NPU0_PE0_CFG24_PE0_SFU_OUT_DATA_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x190, DX_L2_NPU0_PE0_CFG24_PE0_SFU_OUT_DATA_VALID_NUM_LEN, DX_L2_NPU0_PE0_CFG24_PE0_SFU_OUT_DATA_VALID_NUM_MASK, DX_L2_NPU0_PE0_CFG24_PE0_SFU_OUT_DATA_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG24.PE0_SFU_OUT_DATA_VALID_NUM", 
      Read_Dx_l2_npu0_Pe0_cfg24_PE0_SFU_OUT_DATA_VALID_NUM,
      Write_Dx_l2_npu0_Pe0_cfg24_PE0_SFU_OUT_DATA_VALID_NUM,
    },
    { /* 489 : INDEX_DX_L2_NPU0_PE0_CFG24_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x190, DX_L2_NPU0_PE0_CFG24_RESERVED1_LEN, DX_L2_NPU0_PE0_CFG24_RESERVED1_MASK, DX_L2_NPU0_PE0_CFG24_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG24.RESERVED1", 
      Read_Dx_l2_npu0_Pe0_cfg24_RESERVED1,
      Write_Dx_l2_npu0_Pe0_cfg24_RESERVED1,
    },
    { /* 490 : INDEX_DX_L2_NPU0_PE0_CFG24_PE0_ST_ADDR_GEN_SHIFT_LEN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x190, DX_L2_NPU0_PE0_CFG24_PE0_ST_ADDR_GEN_SHIFT_LEN_LEN, DX_L2_NPU0_PE0_CFG24_PE0_ST_ADDR_GEN_SHIFT_LEN_MASK, DX_L2_NPU0_PE0_CFG24_PE0_ST_ADDR_GEN_SHIFT_LEN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG24.PE0_ST_ADDR_GEN_SHIFT_LEN", 
      Read_Dx_l2_npu0_Pe0_cfg24_PE0_ST_ADDR_GEN_SHIFT_LEN,
      Write_Dx_l2_npu0_Pe0_cfg24_PE0_ST_ADDR_GEN_SHIFT_LEN,
    },
    { /* 491 : INDEX_DX_L2_NPU0_PE0_CFG24_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x190, DX_L2_NPU0_PE0_CFG24_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG24_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG24_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG24.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg24_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg24_RESERVED0,
    },
    { /* 492 : INDEX_DX_L2_NPU0_PE0_CFG25 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x194, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG25", 
      Read_Dx_l2_npu0_Pe0_cfg25,
      Write_Dx_l2_npu0_Pe0_cfg25,
    },
    { /* 493 : INDEX_DX_L2_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_MUL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x194, DX_L2_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_MUL_LEN, DX_L2_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_MUL_MASK, DX_L2_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_MUL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_MUL", 
      Read_Dx_l2_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_MUL,
      Write_Dx_l2_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_MUL,
    },
    { /* 494 : INDEX_DX_L2_NPU0_PE0_CFG25_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x194, DX_L2_NPU0_PE0_CFG25_RESERVED0_LEN, DX_L2_NPU0_PE0_CFG25_RESERVED0_MASK, DX_L2_NPU0_PE0_CFG25_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_CFG25.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_cfg25_RESERVED0,
      Write_Dx_l2_npu0_Pe0_cfg25_RESERVED0,
    },
    { /* 495 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_VMEM_CFG0", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0,
    },
    { /* 496 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF,
    },
    { /* 497 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED3_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED3_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED3", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED3,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED3,
    },
    { /* 498 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF,
    },
    { /* 499 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED2_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED2_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED2", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED2,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED2,
    },
    { /* 500 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF,
    },
    { /* 501 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED1_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED1_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED1", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED1,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED1,
    },
    { /* 502 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF,
    },
    { /* 503 : INDEX_DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_VMEM_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_VMEM_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0_RESERVED0,
    },
    { /* 504 : INDEX_DX_L2_NPU0_PE0_SMEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x19c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_SMEM_CFG0", 
      Read_Dx_l2_npu0_Pe0_smem_cfg0,
      Write_Dx_l2_npu0_Pe0_smem_cfg0,
    },
    { /* 505 : INDEX_DX_L2_NPU0_PE0_SMEM_CFG0_PE0_BN_BUFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x19c, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_BN_BUFF_SEL_LEN, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_BN_BUFF_SEL_MASK, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_BN_BUFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_SMEM_CFG0.PE0_BN_BUFF_SEL", 
      Read_Dx_l2_npu0_Pe0_smem_cfg0_PE0_BN_BUFF_SEL,
      Write_Dx_l2_npu0_Pe0_smem_cfg0_PE0_BN_BUFF_SEL,
    },
    { /* 506 : INDEX_DX_L2_NPU0_PE0_SMEM_CFG0_PE0_B_BUFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x19c, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_B_BUFF_SEL_LEN, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_B_BUFF_SEL_MASK, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_B_BUFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_SMEM_CFG0.PE0_B_BUFF_SEL", 
      Read_Dx_l2_npu0_Pe0_smem_cfg0_PE0_B_BUFF_SEL,
      Write_Dx_l2_npu0_Pe0_smem_cfg0_PE0_B_BUFF_SEL,
    },
    { /* 507 : INDEX_DX_L2_NPU0_PE0_SMEM_CFG0_PE0_MUL_BUFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x19c, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_MUL_BUFF_SEL_LEN, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_MUL_BUFF_SEL_MASK, DX_L2_NPU0_PE0_SMEM_CFG0_PE0_MUL_BUFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_SMEM_CFG0.PE0_MUL_BUFF_SEL", 
      Read_Dx_l2_npu0_Pe0_smem_cfg0_PE0_MUL_BUFF_SEL,
      Write_Dx_l2_npu0_Pe0_smem_cfg0_PE0_MUL_BUFF_SEL,
    },
    { /* 508 : INDEX_DX_L2_NPU0_PE0_SMEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x19c, DX_L2_NPU0_PE0_SMEM_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_SMEM_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_SMEM_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_SMEM_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_smem_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_smem_cfg0_RESERVED0,
    },
    { /* 509 : INDEX_DX_L2_NPU0_PE1_IMG2COL0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_IMG2COL0", 
      Read_Dx_l2_npu0_Pe1_img2col0,
      Write_Dx_l2_npu0_Pe1_img2col0,
    },
    { /* 510 : INDEX_DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_CH_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a0, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_CH_OFFSET_LEN, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_CH_OFFSET_MASK, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_CH_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_CH_OFFSET", 
      Read_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_CH_OFFSET,
      Write_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_CH_OFFSET,
    },
    { /* 511 : INDEX_DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_LINE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a0, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_LINE_OFFSET_LEN, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_LINE_OFFSET_MASK, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_LINE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_LINE_OFFSET", 
      Read_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_LINE_OFFSET,
      Write_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_LINE_OFFSET,
    },
    { /* 512 : INDEX_DX_L2_NPU0_PE1_IMG2COL0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a0, DX_L2_NPU0_PE1_IMG2COL0_RESERVED0_LEN, DX_L2_NPU0_PE1_IMG2COL0_RESERVED0_MASK, DX_L2_NPU0_PE1_IMG2COL0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_IMG2COL0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_img2col0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_img2col0_RESERVED0,
    },
    { /* 513 : INDEX_DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a0, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_EN_LEN, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_EN_MASK, DX_L2_NPU0_PE1_IMG2COL0_PE1_IMG2COL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_IMG2COL0.PE1_IMG2COL_EN", 
      Read_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_EN,
      Write_Dx_l2_npu0_Pe1_img2col0_PE1_IMG2COL_EN,
    },
    { /* 514 : INDEX_DX_L2_NPU0_PE1_IMG2COL1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_IMG2COL1", 
      Read_Dx_l2_npu0_Pe1_img2col1,
      Write_Dx_l2_npu0_Pe1_img2col1,
    },
    { /* 515 : INDEX_DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OUT_FEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a4, DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OUT_FEATURE_WIDTH_LEN, DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OUT_FEATURE_WIDTH_MASK, DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OUT_FEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OUT_FEATURE_WIDTH", 
      Read_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OUT_FEATURE_WIDTH,
      Write_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OUT_FEATURE_WIDTH,
    },
    { /* 516 : INDEX_DX_L2_NPU0_PE1_IMG2COL1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a4, DX_L2_NPU0_PE1_IMG2COL1_RESERVED0_LEN, DX_L2_NPU0_PE1_IMG2COL1_RESERVED0_MASK, DX_L2_NPU0_PE1_IMG2COL1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_IMG2COL1.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_img2col1_RESERVED0,
      Write_Dx_l2_npu0_Pe1_img2col1_RESERVED0,
    },
    { /* 517 : INDEX_DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OHEIGHT_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a4, DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OHEIGHT_OFFSET_LEN, DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OHEIGHT_OFFSET_MASK, DX_L2_NPU0_PE1_IMG2COL1_PE1_IMG2COL_OHEIGHT_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_IMG2COL1.PE1_IMG2COL_OHEIGHT_OFFSET", 
      Read_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OHEIGHT_OFFSET,
      Write_Dx_l2_npu0_Pe1_img2col1_PE1_IMG2COL_OHEIGHT_OFFSET,
    },
    { /* 518 : INDEX_DX_L2_NPU0_PE1_FMT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_FMT", 
      Read_Dx_l2_npu0_Pe1_fmt,
      Write_Dx_l2_npu0_Pe1_fmt,
    },
    { /* 519 : INDEX_DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_LINE_OPT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a8, DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_LINE_OPT_LEN, DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_LINE_OPT_MASK, DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_LINE_OPT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_LINE_OPT", 
      Read_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_LINE_OPT,
      Write_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_LINE_OPT,
    },
    { /* 520 : INDEX_DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a8, DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_VALID_NUM_LEN, DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_VALID_NUM_MASK, DX_L2_NPU0_PE1_FMT_PE1_FMT_FIRST_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_FMT.PE1_FMT_FIRST_VALID_NUM", 
      Read_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_VALID_NUM,
      Write_Dx_l2_npu0_Pe1_fmt_PE1_FMT_FIRST_VALID_NUM,
    },
    { /* 521 : INDEX_DX_L2_NPU0_PE1_FMT_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a8, DX_L2_NPU0_PE1_FMT_RESERVED0_LEN, DX_L2_NPU0_PE1_FMT_RESERVED0_MASK, DX_L2_NPU0_PE1_FMT_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_FMT.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_fmt_RESERVED0,
      Write_Dx_l2_npu0_Pe1_fmt_RESERVED0,
    },
    { /* 522 : INDEX_DX_L2_NPU0_PE1_FMT_PE1_FMT_ENABLE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a8, DX_L2_NPU0_PE1_FMT_PE1_FMT_ENABLE_LEN, DX_L2_NPU0_PE1_FMT_PE1_FMT_ENABLE_MASK, DX_L2_NPU0_PE1_FMT_PE1_FMT_ENABLE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_FMT.PE1_FMT_ENABLE", 
      Read_Dx_l2_npu0_Pe1_fmt_PE1_FMT_ENABLE,
      Write_Dx_l2_npu0_Pe1_fmt_PE1_FMT_ENABLE,
    },
    { /* 523 : INDEX_DX_L2_NPU0_PE1_FMT_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1ac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_FMT_CFG0", 
      Read_Dx_l2_npu0_Pe1_fmt_cfg0,
      Write_Dx_l2_npu0_Pe1_fmt_cfg0,
    },
    { /* 524 : INDEX_DX_L2_NPU0_PE1_FMT_CFG0_PE1_FMT_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1ac, DX_L2_NPU0_PE1_FMT_CFG0_PE1_FMT_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE1_FMT_CFG0_PE1_FMT_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE1_FMT_CFG0_PE1_FMT_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_FMT_CFG0.PE1_FMT_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_fmt_cfg0_PE1_FMT_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_fmt_cfg0_PE1_FMT_READ_BASE_ADDR,
    },
    { /* 525 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_ADDR_GEN0", 
      Read_Dx_l2_npu0_Pe1_addr_gen0,
      Write_Dx_l2_npu0_Pe1_addr_gen0,
    },
    { /* 526 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b0, DX_L2_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_LEN, DX_L2_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_MASK, DX_L2_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM", 
      Read_Dx_l2_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
      Write_Dx_l2_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
    },
    { /* 527 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b0, DX_L2_NPU0_PE1_ADDR_GEN0_RESERVED0_LEN, DX_L2_NPU0_PE1_ADDR_GEN0_RESERVED0_MASK, DX_L2_NPU0_PE1_ADDR_GEN0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_ADDR_GEN0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_addr_gen0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_addr_gen0_RESERVED0,
    },
    { /* 528 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN1", 
      Read_Dx_l2_npu0_Pe1_addr_gen1,
      Write_Dx_l2_npu0_Pe1_addr_gen1,
    },
    { /* 529 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b4, DX_L2_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR_LEN, DX_L2_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR_MASK, DX_L2_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR,
    },
    { /* 530 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_ADDR_GEN2", 
      Read_Dx_l2_npu0_Pe1_addr_gen2,
      Write_Dx_l2_npu0_Pe1_addr_gen2,
    },
    { /* 531 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN2_PE1_BN_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b8, DX_L2_NPU0_PE1_ADDR_GEN2_PE1_BN_ADDR_GEN_MODE_LEN, DX_L2_NPU0_PE1_ADDR_GEN2_PE1_BN_ADDR_GEN_MODE_MASK, DX_L2_NPU0_PE1_ADDR_GEN2_PE1_BN_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN2.PE1_BN_ADDR_GEN_MODE", 
      Read_Dx_l2_npu0_Pe1_addr_gen2_PE1_BN_ADDR_GEN_MODE,
      Write_Dx_l2_npu0_Pe1_addr_gen2_PE1_BN_ADDR_GEN_MODE,
    },
    { /* 532 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN2_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b8, DX_L2_NPU0_PE1_ADDR_GEN2_RESERVED0_LEN, DX_L2_NPU0_PE1_ADDR_GEN2_RESERVED0_MASK, DX_L2_NPU0_PE1_ADDR_GEN2_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_ADDR_GEN2.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_addr_gen2_RESERVED0,
      Write_Dx_l2_npu0_Pe1_addr_gen2_RESERVED0,
    },
    { /* 533 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1bc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN3", 
      Read_Dx_l2_npu0_Pe1_addr_gen3,
      Write_Dx_l2_npu0_Pe1_addr_gen3,
    },
    { /* 534 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1bc, DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_OFFSET_LEN, DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_OFFSET_MASK, DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_OFFSET", 
      Read_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_OFFSET,
      Write_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_OFFSET,
    },
    { /* 535 : INDEX_DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1bc, DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM_LEN, DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM_MASK, DX_L2_NPU0_PE1_ADDR_GEN3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN3.PE1_BN_ADDR_GEN_MODE1_MAX_NUM", 
      Read_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM,
      Write_Dx_l2_npu0_Pe1_addr_gen3_PE1_BN_ADDR_GEN_MODE1_MAX_NUM,
    },
    { /* 536 : INDEX_DX_L2_NPU0_PE1_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CTRL", 
      Read_Dx_l2_npu0_Pe1_ctrl,
      Write_Dx_l2_npu0_Pe1_ctrl,
    },
    { /* 537 : INDEX_DX_L2_NPU0_PE1_CTRL_PE1_CONV_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, DX_L2_NPU0_PE1_CTRL_PE1_CONV_TYPE_LEN, DX_L2_NPU0_PE1_CTRL_PE1_CONV_TYPE_MASK, DX_L2_NPU0_PE1_CTRL_PE1_CONV_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CTRL.PE1_CONV_TYPE", 
      Read_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_TYPE,
      Write_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_TYPE,
    },
    { /* 538 : INDEX_DX_L2_NPU0_PE1_CTRL_PE1_CONV_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, DX_L2_NPU0_PE1_CTRL_PE1_CONV_EN_LEN, DX_L2_NPU0_PE1_CTRL_PE1_CONV_EN_MASK, DX_L2_NPU0_PE1_CTRL_PE1_CONV_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CTRL.PE1_CONV_EN", 
      Read_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_EN,
      Write_Dx_l2_npu0_Pe1_ctrl_PE1_CONV_EN,
    },
    { /* 539 : INDEX_DX_L2_NPU0_PE1_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, DX_L2_NPU0_PE1_CTRL_RESERVED0_LEN, DX_L2_NPU0_PE1_CTRL_RESERVED0_MASK, DX_L2_NPU0_PE1_CTRL_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CTRL.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_ctrl_RESERVED0,
      Write_Dx_l2_npu0_Pe1_ctrl_RESERVED0,
    },
    { /* 540 : INDEX_DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH_LEN, DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH_MASK, DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH", 
      Read_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH,
      Write_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH,
    },
    { /* 541 : INDEX_DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN_LEN, DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN_MASK, DX_L2_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN", 
      Read_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN,
      Write_Dx_l2_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN,
    },
    { /* 542 : INDEX_DX_L2_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, DX_L2_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM_LEN, DX_L2_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM_MASK, DX_L2_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM", 
      Read_Dx_l2_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM,
      Write_Dx_l2_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM,
    },
    { /* 543 : INDEX_DX_L2_NPU0_PE1_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG0", 
      Read_Dx_l2_npu0_Pe1_cfg0,
      Write_Dx_l2_npu0_Pe1_cfg0,
    },
    { /* 544 : INDEX_DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c4, DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM_LEN, DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM_MASK, DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM", 
      Read_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM,
      Write_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM,
    },
    { /* 545 : INDEX_DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c4, DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD_LEN, DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD_MASK, DX_L2_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD", 
      Read_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD,
      Write_Dx_l2_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD,
    },
    { /* 546 : INDEX_DX_L2_NPU0_PE1_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c4, DX_L2_NPU0_PE1_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg0_RESERVED0,
    },
    { /* 547 : INDEX_DX_L2_NPU0_PE1_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG1", 
      Read_Dx_l2_npu0_Pe1_cfg1,
      Write_Dx_l2_npu0_Pe1_cfg1,
    },
    { /* 548 : INDEX_DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c8, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL_LEN, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL_MASK, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL", 
      Read_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL,
      Write_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL,
    },
    { /* 549 : INDEX_DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c8, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER_LEN, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER_MASK, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER", 
      Read_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER,
      Write_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER,
    },
    { /* 550 : INDEX_DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_DISABLE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c8, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_DISABLE_LEN, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_DISABLE_MASK, DX_L2_NPU0_PE1_CFG1_PE1_OFEATURE_DISABLE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG1.PE1_OFEATURE_DISABLE", 
      Read_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_DISABLE,
      Write_Dx_l2_npu0_Pe1_cfg1_PE1_OFEATURE_DISABLE,
    },
    { /* 551 : INDEX_DX_L2_NPU0_PE1_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1cc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG2", 
      Read_Dx_l2_npu0_Pe1_cfg2,
      Write_Dx_l2_npu0_Pe1_cfg2,
    },
    { /* 552 : INDEX_DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1cc, DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH_LEN, DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH_MASK, DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH", 
      Read_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH,
      Write_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH,
    },
    { /* 553 : INDEX_DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1cc, DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT_LEN, DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT_MASK, DX_L2_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT", 
      Read_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT,
      Write_Dx_l2_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT,
    },
    { /* 554 : INDEX_DX_L2_NPU0_PE1_CFG2_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1cc, DX_L2_NPU0_PE1_CFG2_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG2_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG2_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG2.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg2_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg2_RESERVED0,
    },
    { /* 555 : INDEX_DX_L2_NPU0_PE1_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG3", 
      Read_Dx_l2_npu0_Pe1_cfg3,
      Write_Dx_l2_npu0_Pe1_cfg3,
    },
    { /* 556 : INDEX_DX_L2_NPU0_PE1_CFG3_PE1_FEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d0, DX_L2_NPU0_PE1_CFG3_PE1_FEATURE_CHANNEL_LEN, DX_L2_NPU0_PE1_CFG3_PE1_FEATURE_CHANNEL_MASK, DX_L2_NPU0_PE1_CFG3_PE1_FEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG3.PE1_FEATURE_CHANNEL", 
      Read_Dx_l2_npu0_Pe1_cfg3_PE1_FEATURE_CHANNEL,
      Write_Dx_l2_npu0_Pe1_cfg3_PE1_FEATURE_CHANNEL,
    },
    { /* 557 : INDEX_DX_L2_NPU0_PE1_CFG3_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d0, DX_L2_NPU0_PE1_CFG3_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG3_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG3_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG3.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg3_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg3_RESERVED0,
    },
    { /* 558 : INDEX_DX_L2_NPU0_PE1_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG4", 
      Read_Dx_l2_npu0_Pe1_cfg4,
      Write_Dx_l2_npu0_Pe1_cfg4,
    },
    { /* 559 : INDEX_DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d4, DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_WIDTH_LEN, DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_WIDTH_MASK, DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_WIDTH", 
      Read_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_WIDTH,
      Write_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_WIDTH,
    },
    { /* 560 : INDEX_DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d4, DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT_LEN, DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT_MASK, DX_L2_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT", 
      Read_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT,
      Write_Dx_l2_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT,
    },
    { /* 561 : INDEX_DX_L2_NPU0_PE1_CFG4_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d4, DX_L2_NPU0_PE1_CFG4_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG4_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG4_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG4.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg4_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg4_RESERVED0,
    },
    { /* 562 : INDEX_DX_L2_NPU0_PE1_CFG5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG5", 
      Read_Dx_l2_npu0_Pe1_cfg5,
      Write_Dx_l2_npu0_Pe1_cfg5,
    },
    { /* 563 : INDEX_DX_L2_NPU0_PE1_CFG5_PE1_FILTER_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d8, DX_L2_NPU0_PE1_CFG5_PE1_FILTER_CHANNEL_LEN, DX_L2_NPU0_PE1_CFG5_PE1_FILTER_CHANNEL_MASK, DX_L2_NPU0_PE1_CFG5_PE1_FILTER_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG5.PE1_FILTER_CHANNEL", 
      Read_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_CHANNEL,
      Write_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_CHANNEL,
    },
    { /* 564 : INDEX_DX_L2_NPU0_PE1_CFG5_PE1_FILTER_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d8, DX_L2_NPU0_PE1_CFG5_PE1_FILTER_NUMBER_LEN, DX_L2_NPU0_PE1_CFG5_PE1_FILTER_NUMBER_MASK, DX_L2_NPU0_PE1_CFG5_PE1_FILTER_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG5.PE1_FILTER_NUMBER", 
      Read_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_NUMBER,
      Write_Dx_l2_npu0_Pe1_cfg5_PE1_FILTER_NUMBER,
    },
    { /* 565 : INDEX_DX_L2_NPU0_PE1_CFG6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1dc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG6", 
      Read_Dx_l2_npu0_Pe1_cfg6,
      Write_Dx_l2_npu0_Pe1_cfg6,
    },
    { /* 566 : INDEX_DX_L2_NPU0_PE1_CFG6_PE1_FILTER_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1dc, DX_L2_NPU0_PE1_CFG6_PE1_FILTER_WIDTH_LEN, DX_L2_NPU0_PE1_CFG6_PE1_FILTER_WIDTH_MASK, DX_L2_NPU0_PE1_CFG6_PE1_FILTER_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG6.PE1_FILTER_WIDTH", 
      Read_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_WIDTH,
      Write_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_WIDTH,
    },
    { /* 567 : INDEX_DX_L2_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1dc, DX_L2_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT_LEN, DX_L2_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT_MASK, DX_L2_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT", 
      Read_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT,
      Write_Dx_l2_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT,
    },
    { /* 568 : INDEX_DX_L2_NPU0_PE1_CFG6_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1dc, DX_L2_NPU0_PE1_CFG6_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG6_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG6_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG6.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg6_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg6_RESERVED0,
    },
    { /* 569 : INDEX_DX_L2_NPU0_PE1_CFG7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG7", 
      Read_Dx_l2_npu0_Pe1_cfg7,
      Write_Dx_l2_npu0_Pe1_cfg7,
    },
    { /* 570 : INDEX_DX_L2_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, DX_L2_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE_LEN, DX_L2_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE_MASK, DX_L2_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE", 
      Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE,
      Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE,
    },
    { /* 571 : INDEX_DX_L2_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, DX_L2_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE_LEN, DX_L2_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE_MASK, DX_L2_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE", 
      Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE,
      Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE,
    },
    { /* 572 : INDEX_DX_L2_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, DX_L2_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE_LEN, DX_L2_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE_MASK, DX_L2_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE", 
      Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE,
      Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE,
    },
    { /* 573 : INDEX_DX_L2_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, DX_L2_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE_LEN, DX_L2_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE_MASK, DX_L2_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE", 
      Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE,
      Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE,
    },
    { /* 574 : INDEX_DX_L2_NPU0_PE1_CFG7_PE1_PAD_VALUE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, DX_L2_NPU0_PE1_CFG7_PE1_PAD_VALUE_LEN, DX_L2_NPU0_PE1_CFG7_PE1_PAD_VALUE_MASK, DX_L2_NPU0_PE1_CFG7_PE1_PAD_VALUE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG7.PE1_PAD_VALUE", 
      Read_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_VALUE,
      Write_Dx_l2_npu0_Pe1_cfg7_PE1_PAD_VALUE,
    },
    { /* 575 : INDEX_DX_L2_NPU0_PE1_CFG7_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, DX_L2_NPU0_PE1_CFG7_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG7_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG7_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG7.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg7_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg7_RESERVED0,
    },
    { /* 576 : INDEX_DX_L2_NPU0_PE1_CFG8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8", 
      Read_Dx_l2_npu0_Pe1_cfg8,
      Write_Dx_l2_npu0_Pe1_cfg8,
    },
    { /* 577 : INDEX_DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_X */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_X_LEN, DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_X_MASK, DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_X_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_X", 
      Read_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_X,
      Write_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_X,
    },
    { /* 578 : INDEX_DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_Y */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_Y_LEN, DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_Y_MASK, DX_L2_NPU0_PE1_CFG8_PE1_STRIDE_Y_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8.PE1_STRIDE_Y", 
      Read_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_Y,
      Write_Dx_l2_npu0_Pe1_cfg8_PE1_STRIDE_Y,
    },
    { /* 579 : INDEX_DX_L2_NPU0_PE1_CFG8_PE1_DILATION_X */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, DX_L2_NPU0_PE1_CFG8_PE1_DILATION_X_LEN, DX_L2_NPU0_PE1_CFG8_PE1_DILATION_X_MASK, DX_L2_NPU0_PE1_CFG8_PE1_DILATION_X_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8.PE1_DILATION_X", 
      Read_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_X,
      Write_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_X,
    },
    { /* 580 : INDEX_DX_L2_NPU0_PE1_CFG8_PE1_DILATION_Y */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, DX_L2_NPU0_PE1_CFG8_PE1_DILATION_Y_LEN, DX_L2_NPU0_PE1_CFG8_PE1_DILATION_Y_MASK, DX_L2_NPU0_PE1_CFG8_PE1_DILATION_Y_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8.PE1_DILATION_Y", 
      Read_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_Y,
      Write_Dx_l2_npu0_Pe1_cfg8_PE1_DILATION_Y,
    },
    { /* 581 : INDEX_DX_L2_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, DX_L2_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET_LEN, DX_L2_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET_MASK, DX_L2_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET", 
      Read_Dx_l2_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET,
      Write_Dx_l2_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET,
    },
    { /* 582 : INDEX_DX_L2_NPU0_PE1_CFG9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG9", 
      Read_Dx_l2_npu0_Pe1_cfg9,
      Write_Dx_l2_npu0_Pe1_cfg9,
    },
    { /* 583 : INDEX_DX_L2_NPU0_PE1_CFG9_PE1_READ_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e8, DX_L2_NPU0_PE1_CFG9_PE1_READ_FEATURE_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG9_PE1_READ_FEATURE_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG9_PE1_READ_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG9.PE1_READ_FEATURE_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg9_PE1_READ_FEATURE_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg9_PE1_READ_FEATURE_BASE_ADDR,
    },
    { /* 584 : INDEX_DX_L2_NPU0_PE1_CFG10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1ec, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG10", 
      Read_Dx_l2_npu0_Pe1_cfg10,
      Write_Dx_l2_npu0_Pe1_cfg10,
    },
    { /* 585 : INDEX_DX_L2_NPU0_PE1_CFG10_PE1_WRITE_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1ec, DX_L2_NPU0_PE1_CFG10_PE1_WRITE_FEATURE_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG10_PE1_WRITE_FEATURE_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG10_PE1_WRITE_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG10.PE1_WRITE_FEATURE_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg10_PE1_WRITE_FEATURE_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg10_PE1_WRITE_FEATURE_BASE_ADDR,
    },
    { /* 586 : INDEX_DX_L2_NPU0_PE1_CFG11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG11", 
      Read_Dx_l2_npu0_Pe1_cfg11,
      Write_Dx_l2_npu0_Pe1_cfg11,
    },
    { /* 587 : INDEX_DX_L2_NPU0_PE1_CFG11_PE1_READ_WEIGHT_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f0, DX_L2_NPU0_PE1_CFG11_PE1_READ_WEIGHT_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG11_PE1_READ_WEIGHT_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG11_PE1_READ_WEIGHT_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG11.PE1_READ_WEIGHT_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg11_PE1_READ_WEIGHT_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg11_PE1_READ_WEIGHT_BASE_ADDR,
    },
    { /* 588 : INDEX_DX_L2_NPU0_PE1_CFG12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG12", 
      Read_Dx_l2_npu0_Pe1_cfg12,
      Write_Dx_l2_npu0_Pe1_cfg12,
    },
    { /* 589 : INDEX_DX_L2_NPU0_PE1_CFG12_PE1_BN_COEFF_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f4, DX_L2_NPU0_PE1_CFG12_PE1_BN_COEFF_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG12_PE1_BN_COEFF_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG12_PE1_BN_COEFF_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG12.PE1_BN_COEFF_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg12_PE1_BN_COEFF_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg12_PE1_BN_COEFF_READ_BASE_ADDR,
    },
    { /* 590 : INDEX_DX_L2_NPU0_PE1_CFG13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG13", 
      Read_Dx_l2_npu0_Pe1_cfg13,
      Write_Dx_l2_npu0_Pe1_cfg13,
    },
    { /* 591 : INDEX_DX_L2_NPU0_PE1_CFG13_PE1_BIAS_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f8, DX_L2_NPU0_PE1_CFG13_PE1_BIAS_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG13_PE1_BIAS_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG13_PE1_BIAS_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG13.PE1_BIAS_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg13_PE1_BIAS_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg13_PE1_BIAS_READ_BASE_ADDR,
    },
    { /* 592 : INDEX_DX_L2_NPU0_PE1_CFG14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1fc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG14", 
      Read_Dx_l2_npu0_Pe1_cfg14,
      Write_Dx_l2_npu0_Pe1_cfg14,
    },
    { /* 593 : INDEX_DX_L2_NPU0_PE1_CFG14_PE1_MUL_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1fc, DX_L2_NPU0_PE1_CFG14_PE1_MUL_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG14_PE1_MUL_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG14_PE1_MUL_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG14.PE1_MUL_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg14_PE1_MUL_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg14_PE1_MUL_READ_BASE_ADDR,
    },
    { /* 594 : INDEX_DX_L2_NPU0_PE1_CFG15 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x200, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG15", 
      Read_Dx_l2_npu0_Pe1_cfg15,
      Write_Dx_l2_npu0_Pe1_cfg15,
    },
    { /* 595 : INDEX_DX_L2_NPU0_PE1_CFG15_PE1_ELEM_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x200, DX_L2_NPU0_PE1_CFG15_PE1_ELEM_READ_BASE_ADDR_LEN, DX_L2_NPU0_PE1_CFG15_PE1_ELEM_READ_BASE_ADDR_MASK, DX_L2_NPU0_PE1_CFG15_PE1_ELEM_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG15.PE1_ELEM_READ_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg15_PE1_ELEM_READ_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg15_PE1_ELEM_READ_BASE_ADDR,
    },
    { /* 596 : INDEX_DX_L2_NPU0_PE1_CFG16 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x204, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG16", 
      Read_Dx_l2_npu0_Pe1_cfg16,
      Write_Dx_l2_npu0_Pe1_cfg16,
    },
    { /* 597 : INDEX_DX_L2_NPU0_PE1_CFG16_PE1_ELEM_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x204, DX_L2_NPU0_PE1_CFG16_PE1_ELEM_CHANNEL_OFFSET_LEN, DX_L2_NPU0_PE1_CFG16_PE1_ELEM_CHANNEL_OFFSET_MASK, DX_L2_NPU0_PE1_CFG16_PE1_ELEM_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG16.PE1_ELEM_CHANNEL_OFFSET", 
      Read_Dx_l2_npu0_Pe1_cfg16_PE1_ELEM_CHANNEL_OFFSET,
      Write_Dx_l2_npu0_Pe1_cfg16_PE1_ELEM_CHANNEL_OFFSET,
    },
    { /* 598 : INDEX_DX_L2_NPU0_PE1_CFG16_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x204, DX_L2_NPU0_PE1_CFG16_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG16_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG16_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG16.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg16_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg16_RESERVED0,
    },
    { /* 599 : INDEX_DX_L2_NPU0_PE1_CFG17 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x208, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG17", 
      Read_Dx_l2_npu0_Pe1_cfg17,
      Write_Dx_l2_npu0_Pe1_cfg17,
    },
    { /* 600 : INDEX_DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_MODE1_LINE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x208, DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_MODE1_LINE_SIZE_LEN, DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_MODE1_LINE_SIZE_MASK, DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_MODE1_LINE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_MODE1_LINE_SIZE", 
      Read_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_MODE1_LINE_SIZE,
      Write_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_MODE1_LINE_SIZE,
    },
    { /* 601 : INDEX_DX_L2_NPU0_PE1_CFG17_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x208, DX_L2_NPU0_PE1_CFG17_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG17_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG17_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG17.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg17_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg17_RESERVED0,
    },
    { /* 602 : INDEX_DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x208, DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_GEN_MODE_LEN, DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_GEN_MODE_MASK, DX_L2_NPU0_PE1_CFG17_PE1_WF_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG17.PE1_WF_ADDR_GEN_MODE", 
      Read_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_GEN_MODE,
      Write_Dx_l2_npu0_Pe1_cfg17_PE1_WF_ADDR_GEN_MODE,
    },
    { /* 603 : INDEX_DX_L2_NPU0_PE1_CFG18 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x20c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG18", 
      Read_Dx_l2_npu0_Pe1_cfg18,
      Write_Dx_l2_npu0_Pe1_cfg18,
    },
    { /* 604 : INDEX_DX_L2_NPU0_PE1_CFG18_PE1_WF_ADDR_MODE1_LINE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x20c, DX_L2_NPU0_PE1_CFG18_PE1_WF_ADDR_MODE1_LINE_STRIDE_LEN, DX_L2_NPU0_PE1_CFG18_PE1_WF_ADDR_MODE1_LINE_STRIDE_MASK, DX_L2_NPU0_PE1_CFG18_PE1_WF_ADDR_MODE1_LINE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG18.PE1_WF_ADDR_MODE1_LINE_STRIDE", 
      Read_Dx_l2_npu0_Pe1_cfg18_PE1_WF_ADDR_MODE1_LINE_STRIDE,
      Write_Dx_l2_npu0_Pe1_cfg18_PE1_WF_ADDR_MODE1_LINE_STRIDE,
    },
    { /* 605 : INDEX_DX_L2_NPU0_PE1_CFG19 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x210, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG19", 
      Read_Dx_l2_npu0_Pe1_cfg19,
      Write_Dx_l2_npu0_Pe1_cfg19,
    },
    { /* 606 : INDEX_DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_LINE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x210, DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_LINE_STRIDE_LEN, DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_LINE_STRIDE_MASK, DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_LINE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_LINE_STRIDE", 
      Read_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_LINE_STRIDE,
      Write_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_LINE_STRIDE,
    },
    { /* 607 : INDEX_DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x210, DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_SURFACE_STRIDE_LEN, DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_SURFACE_STRIDE_MASK, DX_L2_NPU0_PE1_CFG19_PE1_WF_ADDR_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG19.PE1_WF_ADDR_SURFACE_STRIDE", 
      Read_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_SURFACE_STRIDE,
      Write_Dx_l2_npu0_Pe1_cfg19_PE1_WF_ADDR_SURFACE_STRIDE,
    },
    { /* 608 : INDEX_DX_L2_NPU0_PE1_CFG20 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x214, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG20", 
      Read_Dx_l2_npu0_Pe1_cfg20,
      Write_Dx_l2_npu0_Pe1_cfg20,
    },
    { /* 609 : INDEX_DX_L2_NPU0_PE1_CFG20_PE1_WF_WRITE_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x214, DX_L2_NPU0_PE1_CFG20_PE1_WF_WRITE_CNT_LEN, DX_L2_NPU0_PE1_CFG20_PE1_WF_WRITE_CNT_MASK, DX_L2_NPU0_PE1_CFG20_PE1_WF_WRITE_CNT_OFFSET, 0xffff, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG20.PE1_WF_WRITE_CNT", 
      Read_Dx_l2_npu0_Pe1_cfg20_PE1_WF_WRITE_CNT,
      Write_Dx_l2_npu0_Pe1_cfg20_PE1_WF_WRITE_CNT,
    },
    { /* 610 : INDEX_DX_L2_NPU0_PE1_CFG20_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x214, DX_L2_NPU0_PE1_CFG20_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG20_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG20_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG20.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg20_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg20_RESERVED0,
    },
    { /* 611 : INDEX_DX_L2_NPU0_PE1_CFG20_PE1_WF_RF2RF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x214, DX_L2_NPU0_PE1_CFG20_PE1_WF_RF2RF_TIME_LEN, DX_L2_NPU0_PE1_CFG20_PE1_WF_RF2RF_TIME_MASK, DX_L2_NPU0_PE1_CFG20_PE1_WF_RF2RF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG20.PE1_WF_RF2RF_TIME", 
      Read_Dx_l2_npu0_Pe1_cfg20_PE1_WF_RF2RF_TIME,
      Write_Dx_l2_npu0_Pe1_cfg20_PE1_WF_RF2RF_TIME,
    },
    { /* 612 : INDEX_DX_L2_NPU0_PE1_CFG21 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x218, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG21", 
      Read_Dx_l2_npu0_Pe1_cfg21,
      Write_Dx_l2_npu0_Pe1_cfg21,
    },
    { /* 613 : INDEX_DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x218, DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_SIZE_LEN, DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_SIZE_MASK, DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_SIZE", 
      Read_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_SIZE,
      Write_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_SIZE,
    },
    { /* 614 : INDEX_DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_ADDR_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x218, DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_ADDR_STRIDE_LEN, DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_ADDR_STRIDE_MASK, DX_L2_NPU0_PE1_CFG21_PE1_WF_RF2RF_ADDR_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG21.PE1_WF_RF2RF_ADDR_STRIDE", 
      Read_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_ADDR_STRIDE,
      Write_Dx_l2_npu0_Pe1_cfg21_PE1_WF_RF2RF_ADDR_STRIDE,
    },
    { /* 615 : INDEX_DX_L2_NPU0_PE1_CFG22 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x21c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG22", 
      Read_Dx_l2_npu0_Pe1_cfg22,
      Write_Dx_l2_npu0_Pe1_cfg22,
    },
    { /* 616 : INDEX_DX_L2_NPU0_PE1_CFG22_PE1_WF_RF2RF_SRC_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x21c, DX_L2_NPU0_PE1_CFG22_PE1_WF_RF2RF_SRC_ADDR_LEN, DX_L2_NPU0_PE1_CFG22_PE1_WF_RF2RF_SRC_ADDR_MASK, DX_L2_NPU0_PE1_CFG22_PE1_WF_RF2RF_SRC_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG22.PE1_WF_RF2RF_SRC_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg22_PE1_WF_RF2RF_SRC_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg22_PE1_WF_RF2RF_SRC_ADDR,
    },
    { /* 617 : INDEX_DX_L2_NPU0_PE1_CFG23 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x220, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG23", 
      Read_Dx_l2_npu0_Pe1_cfg23,
      Write_Dx_l2_npu0_Pe1_cfg23,
    },
    { /* 618 : INDEX_DX_L2_NPU0_PE1_CFG23_PE1_WF_RF2RF_DST_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x220, DX_L2_NPU0_PE1_CFG23_PE1_WF_RF2RF_DST_ADDR_LEN, DX_L2_NPU0_PE1_CFG23_PE1_WF_RF2RF_DST_ADDR_MASK, DX_L2_NPU0_PE1_CFG23_PE1_WF_RF2RF_DST_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG23.PE1_WF_RF2RF_DST_ADDR", 
      Read_Dx_l2_npu0_Pe1_cfg23_PE1_WF_RF2RF_DST_ADDR,
      Write_Dx_l2_npu0_Pe1_cfg23_PE1_WF_RF2RF_DST_ADDR,
    },
    { /* 619 : INDEX_DX_L2_NPU0_PE1_CFG24 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x224, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG24", 
      Read_Dx_l2_npu0_Pe1_cfg24,
      Write_Dx_l2_npu0_Pe1_cfg24,
    },
    { /* 620 : INDEX_DX_L2_NPU0_PE1_CFG24_PE1_SFU_OUT_DATA_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x224, DX_L2_NPU0_PE1_CFG24_PE1_SFU_OUT_DATA_VALID_NUM_LEN, DX_L2_NPU0_PE1_CFG24_PE1_SFU_OUT_DATA_VALID_NUM_MASK, DX_L2_NPU0_PE1_CFG24_PE1_SFU_OUT_DATA_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG24.PE1_SFU_OUT_DATA_VALID_NUM", 
      Read_Dx_l2_npu0_Pe1_cfg24_PE1_SFU_OUT_DATA_VALID_NUM,
      Write_Dx_l2_npu0_Pe1_cfg24_PE1_SFU_OUT_DATA_VALID_NUM,
    },
    { /* 621 : INDEX_DX_L2_NPU0_PE1_CFG24_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x224, DX_L2_NPU0_PE1_CFG24_RESERVED1_LEN, DX_L2_NPU0_PE1_CFG24_RESERVED1_MASK, DX_L2_NPU0_PE1_CFG24_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG24.RESERVED1", 
      Read_Dx_l2_npu0_Pe1_cfg24_RESERVED1,
      Write_Dx_l2_npu0_Pe1_cfg24_RESERVED1,
    },
    { /* 622 : INDEX_DX_L2_NPU0_PE1_CFG24_PE1_ST_ADDR_GEN_SHIFT_LEN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x224, DX_L2_NPU0_PE1_CFG24_PE1_ST_ADDR_GEN_SHIFT_LEN_LEN, DX_L2_NPU0_PE1_CFG24_PE1_ST_ADDR_GEN_SHIFT_LEN_MASK, DX_L2_NPU0_PE1_CFG24_PE1_ST_ADDR_GEN_SHIFT_LEN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG24.PE1_ST_ADDR_GEN_SHIFT_LEN", 
      Read_Dx_l2_npu0_Pe1_cfg24_PE1_ST_ADDR_GEN_SHIFT_LEN,
      Write_Dx_l2_npu0_Pe1_cfg24_PE1_ST_ADDR_GEN_SHIFT_LEN,
    },
    { /* 623 : INDEX_DX_L2_NPU0_PE1_CFG24_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x224, DX_L2_NPU0_PE1_CFG24_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG24_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG24_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG24.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg24_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg24_RESERVED0,
    },
    { /* 624 : INDEX_DX_L2_NPU0_PE1_CFG25 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x228, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG25", 
      Read_Dx_l2_npu0_Pe1_cfg25,
      Write_Dx_l2_npu0_Pe1_cfg25,
    },
    { /* 625 : INDEX_DX_L2_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_MUL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x228, DX_L2_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_MUL_LEN, DX_L2_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_MUL_MASK, DX_L2_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_MUL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_MUL", 
      Read_Dx_l2_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_MUL,
      Write_Dx_l2_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_MUL,
    },
    { /* 626 : INDEX_DX_L2_NPU0_PE1_CFG25_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x228, DX_L2_NPU0_PE1_CFG25_RESERVED0_LEN, DX_L2_NPU0_PE1_CFG25_RESERVED0_MASK, DX_L2_NPU0_PE1_CFG25_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_CFG25.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_cfg25_RESERVED0,
      Write_Dx_l2_npu0_Pe1_cfg25_RESERVED0,
    },
    { /* 627 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_VMEM_CFG0", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0,
    },
    { /* 628 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF,
    },
    { /* 629 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED3_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED3_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED3", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED3,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED3,
    },
    { /* 630 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF,
    },
    { /* 631 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED2_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED2_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED2", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED2,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED2,
    },
    { /* 632 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF,
    },
    { /* 633 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED1_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED1_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED1", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED1,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED1,
    },
    { /* 634 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF,
    },
    { /* 635 : INDEX_DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_VMEM_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_VMEM_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0_RESERVED0,
    },
    { /* 636 : INDEX_DX_L2_NPU0_PE1_SMEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x230, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_SMEM_CFG0", 
      Read_Dx_l2_npu0_Pe1_smem_cfg0,
      Write_Dx_l2_npu0_Pe1_smem_cfg0,
    },
    { /* 637 : INDEX_DX_L2_NPU0_PE1_SMEM_CFG0_PE1_BN_BUFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x230, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_BN_BUFF_SEL_LEN, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_BN_BUFF_SEL_MASK, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_BN_BUFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_SMEM_CFG0.PE1_BN_BUFF_SEL", 
      Read_Dx_l2_npu0_Pe1_smem_cfg0_PE1_BN_BUFF_SEL,
      Write_Dx_l2_npu0_Pe1_smem_cfg0_PE1_BN_BUFF_SEL,
    },
    { /* 638 : INDEX_DX_L2_NPU0_PE1_SMEM_CFG0_PE1_B_BUFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x230, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_B_BUFF_SEL_LEN, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_B_BUFF_SEL_MASK, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_B_BUFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_SMEM_CFG0.PE1_B_BUFF_SEL", 
      Read_Dx_l2_npu0_Pe1_smem_cfg0_PE1_B_BUFF_SEL,
      Write_Dx_l2_npu0_Pe1_smem_cfg0_PE1_B_BUFF_SEL,
    },
    { /* 639 : INDEX_DX_L2_NPU0_PE1_SMEM_CFG0_PE1_MUL_BUFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x230, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_MUL_BUFF_SEL_LEN, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_MUL_BUFF_SEL_MASK, DX_L2_NPU0_PE1_SMEM_CFG0_PE1_MUL_BUFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_SMEM_CFG0.PE1_MUL_BUFF_SEL", 
      Read_Dx_l2_npu0_Pe1_smem_cfg0_PE1_MUL_BUFF_SEL,
      Write_Dx_l2_npu0_Pe1_smem_cfg0_PE1_MUL_BUFF_SEL,
    },
    { /* 640 : INDEX_DX_L2_NPU0_PE1_SMEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x230, DX_L2_NPU0_PE1_SMEM_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_SMEM_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_SMEM_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_SMEM_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_smem_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_smem_cfg0_RESERVED0,
    },
    { /* 641 : INDEX_DX_L2_NPU0_PE0_DMA_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x234, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_CTRL", 
      Read_Dx_l2_npu0_Pe0_dma_ctrl,
      Write_Dx_l2_npu0_Pe0_dma_ctrl,
    },
    { /* 642 : INDEX_DX_L2_NPU0_PE0_DMA_CTRL_PE0_START_OP_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x234, DX_L2_NPU0_PE0_DMA_CTRL_PE0_START_OP_EN_LEN, DX_L2_NPU0_PE0_DMA_CTRL_PE0_START_OP_EN_MASK, DX_L2_NPU0_PE0_DMA_CTRL_PE0_START_OP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_CTRL.PE0_START_OP_EN", 
      Read_Dx_l2_npu0_Pe0_dma_ctrl_PE0_START_OP_EN,
      Write_Dx_l2_npu0_Pe0_dma_ctrl_PE0_START_OP_EN,
    },
    { /* 643 : INDEX_DX_L2_NPU0_PE0_DMA_CTRL_PE0_DMA_CTRL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x234, DX_L2_NPU0_PE0_DMA_CTRL_PE0_DMA_CTRL_MODE_LEN, DX_L2_NPU0_PE0_DMA_CTRL_PE0_DMA_CTRL_MODE_MASK, DX_L2_NPU0_PE0_DMA_CTRL_PE0_DMA_CTRL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_CTRL.PE0_DMA_CTRL_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_ctrl_PE0_DMA_CTRL_MODE,
      Write_Dx_l2_npu0_Pe0_dma_ctrl_PE0_DMA_CTRL_MODE,
    },
    { /* 644 : INDEX_DX_L2_NPU0_PE0_DMA_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x234, DX_L2_NPU0_PE0_DMA_CTRL_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_CTRL_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_CTRL_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_CTRL.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_ctrl_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_ctrl_RESERVED0,
    },
    { /* 645 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0,
    },
    { /* 646 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_TIME_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_TIME_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_TIME,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_TIME,
    },
    { /* 647 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_MODE_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_MODE_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_MODE,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_MODE,
    },
    { /* 648 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_SEL_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_SEL_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_SEL", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_SEL,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_SEL,
    },
    { /* 649 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_EN_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_EN_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG0_PE0_RD_BN_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0.PE0_RD_BN_EN", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_EN,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_PE0_RD_BN_EN,
    },
    { /* 650 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, DX_L2_NPU0_PE0_DMA_BN_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0_RESERVED0,
    },
    { /* 651 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x23c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_BN_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg1,
    },
    { /* 652 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x23c, DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_STRIDE,
    },
    { /* 653 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x23c, DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_SIZE_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_SIZE_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG1_PE0_RD_BN_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG1.PE0_RD_BN_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg1_PE0_RD_BN_SIZE,
    },
    { /* 654 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x23c, DX_L2_NPU0_PE0_DMA_BN_CFG1_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG1_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG1.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg1_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg1_RESERVED0,
    },
    { /* 655 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x240, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg2,
    },
    { /* 656 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG2_PE0_RD_BN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x240, DX_L2_NPU0_PE0_DMA_BN_CFG2_PE0_RD_BN_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG2_PE0_RD_BN_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG2_PE0_RD_BN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG2.PE0_RD_BN_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg2_PE0_RD_BN_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg2_PE0_RD_BN_BASE_ADDR,
    },
    { /* 657 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x244, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg3,
    },
    { /* 658 : INDEX_DX_L2_NPU0_PE0_DMA_BN_CFG3_PE0_WT_BN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x244, DX_L2_NPU0_PE0_DMA_BN_CFG3_PE0_WT_BN_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_BN_CFG3_PE0_WT_BN_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_BN_CFG3_PE0_WT_BN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG3.PE0_WT_BN_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg3_PE0_WT_BN_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg3_PE0_WT_BN_BASE_ADDR,
    },
    { /* 659 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_B_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0,
    },
    { /* 660 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_TIME_LEN, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_TIME_MASK, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_TIME,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_TIME,
    },
    { /* 661 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_MODE_LEN, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_MODE_MASK, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_MODE,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_MODE,
    },
    { /* 662 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_SEL_LEN, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_SEL_MASK, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_SEL", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_SEL,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_SEL,
    },
    { /* 663 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_EN_LEN, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_EN_MASK, DX_L2_NPU0_PE0_DMA_B_CFG0_PE0_RD_B_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG0.PE0_RD_B_EN", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_EN,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0_PE0_RD_B_EN,
    },
    { /* 664 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, DX_L2_NPU0_PE0_DMA_B_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_B_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_B_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0_RESERVED0,
    },
    { /* 665 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_B_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg1,
    },
    { /* 666 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24c, DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_STRIDE,
    },
    { /* 667 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24c, DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_SIZE_LEN, DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_SIZE_MASK, DX_L2_NPU0_PE0_DMA_B_CFG1_PE0_RD_B_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG1.PE0_RD_B_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg1_PE0_RD_B_SIZE,
    },
    { /* 668 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24c, DX_L2_NPU0_PE0_DMA_B_CFG1_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_B_CFG1_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_B_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG1.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg1_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg1_RESERVED0,
    },
    { /* 669 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x250, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg2,
    },
    { /* 670 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG2_PE0_RD_B_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x250, DX_L2_NPU0_PE0_DMA_B_CFG2_PE0_RD_B_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_B_CFG2_PE0_RD_B_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_B_CFG2_PE0_RD_B_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG2.PE0_RD_B_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg2_PE0_RD_B_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg2_PE0_RD_B_BASE_ADDR,
    },
    { /* 671 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x254, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg3,
    },
    { /* 672 : INDEX_DX_L2_NPU0_PE0_DMA_B_CFG3_PE0_WT_B_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x254, DX_L2_NPU0_PE0_DMA_B_CFG3_PE0_WT_B_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_B_CFG3_PE0_WT_B_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_B_CFG3_PE0_WT_B_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG3.PE0_WT_B_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg3_PE0_WT_B_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg3_PE0_WT_B_BASE_ADDR,
    },
    { /* 673 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0,
    },
    { /* 674 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_TIME_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_TIME_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_TIME,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_TIME,
    },
    { /* 675 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_MODE_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_MODE_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_MODE,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_MODE,
    },
    { /* 676 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_SEL_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_SEL_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_SEL", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_SEL,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_SEL,
    },
    { /* 677 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_EN_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_EN_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG0_PE0_RD_MUL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0.PE0_RD_MUL_EN", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_EN,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_PE0_RD_MUL_EN,
    },
    { /* 678 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, DX_L2_NPU0_PE0_DMA_MUL_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0_RESERVED0,
    },
    { /* 679 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x25c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg1,
    },
    { /* 680 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x25c, DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_STRIDE,
    },
    { /* 681 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x25c, DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_SIZE_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_SIZE_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG1_PE0_RD_MUL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG1.PE0_RD_MUL_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg1_PE0_RD_MUL_SIZE,
    },
    { /* 682 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x25c, DX_L2_NPU0_PE0_DMA_MUL_CFG1_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG1_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG1.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg1_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg1_RESERVED0,
    },
    { /* 683 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x260, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg2,
    },
    { /* 684 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG2_PE0_RD_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x260, DX_L2_NPU0_PE0_DMA_MUL_CFG2_PE0_RD_MUL_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG2_PE0_RD_MUL_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG2_PE0_RD_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG2.PE0_RD_MUL_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg2_PE0_RD_MUL_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg2_PE0_RD_MUL_BASE_ADDR,
    },
    { /* 685 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x264, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg3,
    },
    { /* 686 : INDEX_DX_L2_NPU0_PE0_DMA_MUL_CFG3_PE0_WT_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x264, DX_L2_NPU0_PE0_DMA_MUL_CFG3_PE0_WT_MUL_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_MUL_CFG3_PE0_WT_MUL_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_MUL_CFG3_PE0_WT_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG3.PE0_WT_MUL_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg3_PE0_WT_MUL_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg3_PE0_WT_MUL_BASE_ADDR,
    },
    { /* 687 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0,
    },
    { /* 688 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_SIZE_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_SIZE_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_SIZE,
    },
    { /* 689 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_TIME_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_TIME_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_TIME,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_TIME,
    },
    { /* 690 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_MODE_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_MODE_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_MODE,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_MODE,
    },
    { /* 691 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_EN_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_EN_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_PE0_RD_ELEM_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0.PE0_RD_ELEM_EN", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_EN,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_PE0_RD_ELEM_EN,
    },
    { /* 692 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0_RESERVED0,
    },
    { /* 693 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x26c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg1,
    },
    { /* 694 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG1_PE0_RD_ELEM_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x26c, DX_L2_NPU0_PE0_DMA_ELEM_CFG1_PE0_RD_ELEM_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG1_PE0_RD_ELEM_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG1_PE0_RD_ELEM_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG1.PE0_RD_ELEM_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg1_PE0_RD_ELEM_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg1_PE0_RD_ELEM_STRIDE,
    },
    { /* 695 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x270, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg2,
    },
    { /* 696 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG2_PE0_RD_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x270, DX_L2_NPU0_PE0_DMA_ELEM_CFG2_PE0_RD_ELEM_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG2_PE0_RD_ELEM_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG2_PE0_RD_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG2.PE0_RD_ELEM_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg2_PE0_RD_ELEM_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg2_PE0_RD_ELEM_BASE_ADDR,
    },
    { /* 697 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x274, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg3,
    },
    { /* 698 : INDEX_DX_L2_NPU0_PE0_DMA_ELEM_CFG3_PE0_WT_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x274, DX_L2_NPU0_PE0_DMA_ELEM_CFG3_PE0_WT_ELEM_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_ELEM_CFG3_PE0_WT_ELEM_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_ELEM_CFG3_PE0_WT_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG3.PE0_WT_ELEM_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg3_PE0_WT_ELEM_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg3_PE0_WT_ELEM_BASE_ADDR,
    },
    { /* 699 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x278, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_W_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg0,
    },
    { /* 700 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x278, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_TIME_LEN, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_TIME_MASK, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_TIME,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_TIME,
    },
    { /* 701 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x278, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_MODE_LEN, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_MODE_MASK, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_MODE,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_MODE,
    },
    { /* 702 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x278, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_EN_LEN, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_EN_MASK, DX_L2_NPU0_PE0_DMA_W_CFG0_PE0_RD_W_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG0.PE0_RD_W_EN", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_EN,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg0_PE0_RD_W_EN,
    },
    { /* 703 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x278, DX_L2_NPU0_PE0_DMA_W_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_W_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_W_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg0_RESERVED0,
    },
    { /* 704 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x27c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg1,
    },
    { /* 705 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x27c, DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_STRIDE,
    },
    { /* 706 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x27c, DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_SIZE_LEN, DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_SIZE_MASK, DX_L2_NPU0_PE0_DMA_W_CFG1_PE0_RD_W_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG1.PE0_RD_W_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg1_PE0_RD_W_SIZE,
    },
    { /* 707 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x280, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg2,
    },
    { /* 708 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG2_PE0_RD_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x280, DX_L2_NPU0_PE0_DMA_W_CFG2_PE0_RD_W_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_W_CFG2_PE0_RD_W_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_W_CFG2_PE0_RD_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG2.PE0_RD_W_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg2_PE0_RD_W_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg2_PE0_RD_W_BASE_ADDR,
    },
    { /* 709 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x284, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg3,
    },
    { /* 710 : INDEX_DX_L2_NPU0_PE0_DMA_W_CFG3_PE0_WT_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x284, DX_L2_NPU0_PE0_DMA_W_CFG3_PE0_WT_W_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_W_CFG3_PE0_WT_W_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_W_CFG3_PE0_WT_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG3.PE0_WT_W_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg3_PE0_WT_W_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg3_PE0_WT_W_BASE_ADDR,
    },
    { /* 711 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0,
    },
    { /* 712 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_SIZE_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_SIZE_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_SIZE,
    },
    { /* 713 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_TIME_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_TIME_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_TIME,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_TIME,
    },
    { /* 714 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_MODE_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_MODE_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_MODE", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_MODE,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_MODE,
    },
    { /* 715 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_EN_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_EN_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG0_PE0_RD_INF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0.PE0_RD_INF_EN", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_EN,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_PE0_RD_INF_EN,
    },
    { /* 716 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, DX_L2_NPU0_PE0_DMA_INF_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0_RESERVED0,
    },
    { /* 717 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x28c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg1,
    },
    { /* 718 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG1_PE0_RD_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x28c, DX_L2_NPU0_PE0_DMA_INF_CFG1_PE0_RD_INF_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG1_PE0_RD_INF_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG1_PE0_RD_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG1.PE0_RD_INF_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg1_PE0_RD_INF_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg1_PE0_RD_INF_STRIDE,
    },
    { /* 719 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x290, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg2,
    },
    { /* 720 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG2_PE0_RD_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x290, DX_L2_NPU0_PE0_DMA_INF_CFG2_PE0_RD_INF_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG2_PE0_RD_INF_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG2_PE0_RD_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG2.PE0_RD_INF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg2_PE0_RD_INF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg2_PE0_RD_INF_BASE_ADDR,
    },
    { /* 721 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x294, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg3,
    },
    { /* 722 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG3_PE0_WT_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x294, DX_L2_NPU0_PE0_DMA_INF_CFG3_PE0_WT_INF_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG3_PE0_WT_INF_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG3_PE0_WT_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG3.PE0_WT_INF_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg3_PE0_WT_INF_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg3_PE0_WT_INF_STRIDE,
    },
    { /* 723 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x298, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG4", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg4,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg4,
    },
    { /* 724 : INDEX_DX_L2_NPU0_PE0_DMA_INF_CFG4_PE0_WT_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x298, DX_L2_NPU0_PE0_DMA_INF_CFG4_PE0_WT_INF_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_INF_CFG4_PE0_WT_INF_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_INF_CFG4_PE0_WT_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG4.PE0_WT_INF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg4_PE0_WT_INF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg4_PE0_WT_INF_BASE_ADDR,
    },
    { /* 725 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0,
    },
    { /* 726 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_SIZE_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_SIZE_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_SIZE", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_SIZE,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_SIZE,
    },
    { /* 727 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_TIME_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_TIME_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_TIME", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_TIME,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_TIME,
    },
    { /* 728 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED1,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED1,
    },
    { /* 729 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_EN_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_EN_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_PE0_WT_OUTF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0.PE0_WT_OUTF_EN", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_EN,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_PE0_WT_OUTF_EN,
    },
    { /* 730 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0_RESERVED0,
    },
    { /* 731 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg1,
    },
    { /* 732 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG1_PE0_WT_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a0, DX_L2_NPU0_PE0_DMA_OUTF_CFG1_PE0_WT_OUTF_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG1_PE0_WT_OUTF_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG1_PE0_WT_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG1.PE0_WT_OUTF_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg1_PE0_WT_OUTF_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg1_PE0_WT_OUTF_STRIDE,
    },
    { /* 733 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg2,
    },
    { /* 734 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG2_PE0_WT_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a4, DX_L2_NPU0_PE0_DMA_OUTF_CFG2_PE0_WT_OUTF_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG2_PE0_WT_OUTF_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG2_PE0_WT_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG2.PE0_WT_OUTF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg2_PE0_WT_OUTF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg2_PE0_WT_OUTF_BASE_ADDR,
    },
    { /* 735 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg3,
    },
    { /* 736 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG3_PE0_RD_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a8, DX_L2_NPU0_PE0_DMA_OUTF_CFG3_PE0_RD_OUTF_STRIDE_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG3_PE0_RD_OUTF_STRIDE_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG3_PE0_RD_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG3.PE0_RD_OUTF_STRIDE", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg3_PE0_RD_OUTF_STRIDE,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg3_PE0_RD_OUTF_STRIDE,
    },
    { /* 737 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG4", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg4,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg4,
    },
    { /* 738 : INDEX_DX_L2_NPU0_PE0_DMA_OUTF_CFG4_PE0_RD_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ac, DX_L2_NPU0_PE0_DMA_OUTF_CFG4_PE0_RD_OUTF_BASE_ADDR_LEN, DX_L2_NPU0_PE0_DMA_OUTF_CFG4_PE0_RD_OUTF_BASE_ADDR_MASK, DX_L2_NPU0_PE0_DMA_OUTF_CFG4_PE0_RD_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG4.PE0_RD_OUTF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg4_PE0_RD_OUTF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg4_PE0_RD_OUTF_BASE_ADDR,
    },
    { /* 739 : INDEX_DX_L2_NPU0_RSVD5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b0, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD5", 
      Read_Dx_l2_npu0_Rsvd5,
      Write_Dx_l2_npu0_Rsvd5,
    },
    { /* 740 : INDEX_DX_L2_NPU0_RSVD5_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b0, DX_L2_NPU0_RSVD5_RESERVED3_LEN, DX_L2_NPU0_RSVD5_RESERVED3_MASK, DX_L2_NPU0_RSVD5_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD5.RESERVED3", 
      Read_Dx_l2_npu0_Rsvd5_RESERVED3,
      Write_Dx_l2_npu0_Rsvd5_RESERVED3,
    },
    { /* 741 : INDEX_DX_L2_NPU0_RSVD5_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b0, DX_L2_NPU0_RSVD5_RESERVED2_LEN, DX_L2_NPU0_RSVD5_RESERVED2_MASK, DX_L2_NPU0_RSVD5_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD5.RESERVED2", 
      Read_Dx_l2_npu0_Rsvd5_RESERVED2,
      Write_Dx_l2_npu0_Rsvd5_RESERVED2,
    },
    { /* 742 : INDEX_DX_L2_NPU0_RSVD5_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b0, DX_L2_NPU0_RSVD5_RESERVED1_LEN, DX_L2_NPU0_RSVD5_RESERVED1_MASK, DX_L2_NPU0_RSVD5_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD5.RESERVED1", 
      Read_Dx_l2_npu0_Rsvd5_RESERVED1,
      Write_Dx_l2_npu0_Rsvd5_RESERVED1,
    },
    { /* 743 : INDEX_DX_L2_NPU0_RSVD5_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b0, DX_L2_NPU0_RSVD5_RESERVED0_LEN, DX_L2_NPU0_RSVD5_RESERVED0_MASK, DX_L2_NPU0_RSVD5_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD5.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd5_RESERVED0,
      Write_Dx_l2_npu0_Rsvd5_RESERVED0,
    },
    { /* 744 : INDEX_DX_L2_NPU0_RSVD6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b4, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD6", 
      Read_Dx_l2_npu0_Rsvd6,
      Write_Dx_l2_npu0_Rsvd6,
    },
    { /* 745 : INDEX_DX_L2_NPU0_RSVD6_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b4, DX_L2_NPU0_RSVD6_RESERVED3_LEN, DX_L2_NPU0_RSVD6_RESERVED3_MASK, DX_L2_NPU0_RSVD6_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD6.RESERVED3", 
      Read_Dx_l2_npu0_Rsvd6_RESERVED3,
      Write_Dx_l2_npu0_Rsvd6_RESERVED3,
    },
    { /* 746 : INDEX_DX_L2_NPU0_RSVD6_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b4, DX_L2_NPU0_RSVD6_RESERVED2_LEN, DX_L2_NPU0_RSVD6_RESERVED2_MASK, DX_L2_NPU0_RSVD6_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD6.RESERVED2", 
      Read_Dx_l2_npu0_Rsvd6_RESERVED2,
      Write_Dx_l2_npu0_Rsvd6_RESERVED2,
    },
    { /* 747 : INDEX_DX_L2_NPU0_RSVD6_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b4, DX_L2_NPU0_RSVD6_RESERVED1_LEN, DX_L2_NPU0_RSVD6_RESERVED1_MASK, DX_L2_NPU0_RSVD6_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD6.RESERVED1", 
      Read_Dx_l2_npu0_Rsvd6_RESERVED1,
      Write_Dx_l2_npu0_Rsvd6_RESERVED1,
    },
    { /* 748 : INDEX_DX_L2_NPU0_RSVD6_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b4, DX_L2_NPU0_RSVD6_RESERVED0_LEN, DX_L2_NPU0_RSVD6_RESERVED0_MASK, DX_L2_NPU0_RSVD6_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD6.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd6_RESERVED0,
      Write_Dx_l2_npu0_Rsvd6_RESERVED0,
    },
    { /* 749 : INDEX_DX_L2_NPU0_PE1_DMA_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_CTRL", 
      Read_Dx_l2_npu0_Pe1_dma_ctrl,
      Write_Dx_l2_npu0_Pe1_dma_ctrl,
    },
    { /* 750 : INDEX_DX_L2_NPU0_PE1_DMA_CTRL_PE1_START_OP_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b8, DX_L2_NPU0_PE1_DMA_CTRL_PE1_START_OP_EN_LEN, DX_L2_NPU0_PE1_DMA_CTRL_PE1_START_OP_EN_MASK, DX_L2_NPU0_PE1_DMA_CTRL_PE1_START_OP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_CTRL.PE1_START_OP_EN", 
      Read_Dx_l2_npu0_Pe1_dma_ctrl_PE1_START_OP_EN,
      Write_Dx_l2_npu0_Pe1_dma_ctrl_PE1_START_OP_EN,
    },
    { /* 751 : INDEX_DX_L2_NPU0_PE1_DMA_CTRL_PE1_DMA_CTRL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b8, DX_L2_NPU0_PE1_DMA_CTRL_PE1_DMA_CTRL_MODE_LEN, DX_L2_NPU0_PE1_DMA_CTRL_PE1_DMA_CTRL_MODE_MASK, DX_L2_NPU0_PE1_DMA_CTRL_PE1_DMA_CTRL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_CTRL.PE1_DMA_CTRL_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_ctrl_PE1_DMA_CTRL_MODE,
      Write_Dx_l2_npu0_Pe1_dma_ctrl_PE1_DMA_CTRL_MODE,
    },
    { /* 752 : INDEX_DX_L2_NPU0_PE1_DMA_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b8, DX_L2_NPU0_PE1_DMA_CTRL_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_CTRL_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_CTRL_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_CTRL.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_ctrl_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_ctrl_RESERVED0,
    },
    { /* 753 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0,
    },
    { /* 754 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_TIME_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_TIME_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_TIME,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_TIME,
    },
    { /* 755 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_MODE_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_MODE_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_MODE,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_MODE,
    },
    { /* 756 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_SEL_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_SEL_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_SEL", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_SEL,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_SEL,
    },
    { /* 757 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_EN_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_EN_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG0_PE1_RD_BN_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0.PE1_RD_BN_EN", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_EN,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_PE1_RD_BN_EN,
    },
    { /* 758 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, DX_L2_NPU0_PE1_DMA_BN_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0_RESERVED0,
    },
    { /* 759 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_BN_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg1,
    },
    { /* 760 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c0, DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_STRIDE,
    },
    { /* 761 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c0, DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_SIZE_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_SIZE_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG1_PE1_RD_BN_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG1.PE1_RD_BN_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg1_PE1_RD_BN_SIZE,
    },
    { /* 762 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c0, DX_L2_NPU0_PE1_DMA_BN_CFG1_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG1_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG1.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg1_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg1_RESERVED0,
    },
    { /* 763 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg2,
    },
    { /* 764 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG2_PE1_RD_BN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c4, DX_L2_NPU0_PE1_DMA_BN_CFG2_PE1_RD_BN_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG2_PE1_RD_BN_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG2_PE1_RD_BN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG2.PE1_RD_BN_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg2_PE1_RD_BN_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg2_PE1_RD_BN_BASE_ADDR,
    },
    { /* 765 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg3,
    },
    { /* 766 : INDEX_DX_L2_NPU0_PE1_DMA_BN_CFG3_PE1_WT_BN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c8, DX_L2_NPU0_PE1_DMA_BN_CFG3_PE1_WT_BN_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_BN_CFG3_PE1_WT_BN_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_BN_CFG3_PE1_WT_BN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG3.PE1_WT_BN_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg3_PE1_WT_BN_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg3_PE1_WT_BN_BASE_ADDR,
    },
    { /* 767 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_B_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0,
    },
    { /* 768 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_TIME_LEN, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_TIME_MASK, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_TIME,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_TIME,
    },
    { /* 769 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_MODE_LEN, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_MODE_MASK, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_MODE,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_MODE,
    },
    { /* 770 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_SEL_LEN, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_SEL_MASK, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_SEL", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_SEL,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_SEL,
    },
    { /* 771 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_EN_LEN, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_EN_MASK, DX_L2_NPU0_PE1_DMA_B_CFG0_PE1_RD_B_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG0.PE1_RD_B_EN", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_EN,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0_PE1_RD_B_EN,
    },
    { /* 772 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, DX_L2_NPU0_PE1_DMA_B_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_B_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_B_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0_RESERVED0,
    },
    { /* 773 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_B_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg1,
    },
    { /* 774 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d0, DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_STRIDE,
    },
    { /* 775 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d0, DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_SIZE_LEN, DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_SIZE_MASK, DX_L2_NPU0_PE1_DMA_B_CFG1_PE1_RD_B_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG1.PE1_RD_B_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg1_PE1_RD_B_SIZE,
    },
    { /* 776 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d0, DX_L2_NPU0_PE1_DMA_B_CFG1_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_B_CFG1_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_B_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG1.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg1_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg1_RESERVED0,
    },
    { /* 777 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg2,
    },
    { /* 778 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG2_PE1_RD_B_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d4, DX_L2_NPU0_PE1_DMA_B_CFG2_PE1_RD_B_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_B_CFG2_PE1_RD_B_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_B_CFG2_PE1_RD_B_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG2.PE1_RD_B_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg2_PE1_RD_B_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg2_PE1_RD_B_BASE_ADDR,
    },
    { /* 779 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg3,
    },
    { /* 780 : INDEX_DX_L2_NPU0_PE1_DMA_B_CFG3_PE1_WT_B_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d8, DX_L2_NPU0_PE1_DMA_B_CFG3_PE1_WT_B_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_B_CFG3_PE1_WT_B_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_B_CFG3_PE1_WT_B_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG3.PE1_WT_B_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg3_PE1_WT_B_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg3_PE1_WT_B_BASE_ADDR,
    },
    { /* 781 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0,
    },
    { /* 782 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_TIME_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_TIME_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_TIME,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_TIME,
    },
    { /* 783 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_MODE_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_MODE_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_MODE,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_MODE,
    },
    { /* 784 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_SEL_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_SEL_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_SEL", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_SEL,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_SEL,
    },
    { /* 785 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_EN_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_EN_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG0_PE1_RD_MUL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0.PE1_RD_MUL_EN", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_EN,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_PE1_RD_MUL_EN,
    },
    { /* 786 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, DX_L2_NPU0_PE1_DMA_MUL_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0_RESERVED0,
    },
    { /* 787 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg1,
    },
    { /* 788 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e0, DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_STRIDE,
    },
    { /* 789 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e0, DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_SIZE_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_SIZE_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG1_PE1_RD_MUL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG1.PE1_RD_MUL_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg1_PE1_RD_MUL_SIZE,
    },
    { /* 790 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e0, DX_L2_NPU0_PE1_DMA_MUL_CFG1_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG1_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG1_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG1.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg1_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg1_RESERVED0,
    },
    { /* 791 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg2,
    },
    { /* 792 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG2_PE1_RD_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e4, DX_L2_NPU0_PE1_DMA_MUL_CFG2_PE1_RD_MUL_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG2_PE1_RD_MUL_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG2_PE1_RD_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG2.PE1_RD_MUL_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg2_PE1_RD_MUL_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg2_PE1_RD_MUL_BASE_ADDR,
    },
    { /* 793 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg3,
    },
    { /* 794 : INDEX_DX_L2_NPU0_PE1_DMA_MUL_CFG3_PE1_WT_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e8, DX_L2_NPU0_PE1_DMA_MUL_CFG3_PE1_WT_MUL_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_MUL_CFG3_PE1_WT_MUL_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_MUL_CFG3_PE1_WT_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG3.PE1_WT_MUL_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg3_PE1_WT_MUL_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg3_PE1_WT_MUL_BASE_ADDR,
    },
    { /* 795 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0,
    },
    { /* 796 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_SIZE_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_SIZE_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_SIZE,
    },
    { /* 797 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_TIME_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_TIME_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_TIME,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_TIME,
    },
    { /* 798 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_MODE_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_MODE_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_MODE,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_MODE,
    },
    { /* 799 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_EN_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_EN_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_PE1_RD_ELEM_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0.PE1_RD_ELEM_EN", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_EN,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_PE1_RD_ELEM_EN,
    },
    { /* 800 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0_RESERVED0,
    },
    { /* 801 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg1,
    },
    { /* 802 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG1_PE1_RD_ELEM_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f0, DX_L2_NPU0_PE1_DMA_ELEM_CFG1_PE1_RD_ELEM_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG1_PE1_RD_ELEM_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG1_PE1_RD_ELEM_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG1.PE1_RD_ELEM_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg1_PE1_RD_ELEM_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg1_PE1_RD_ELEM_STRIDE,
    },
    { /* 803 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg2,
    },
    { /* 804 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG2_PE1_RD_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f4, DX_L2_NPU0_PE1_DMA_ELEM_CFG2_PE1_RD_ELEM_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG2_PE1_RD_ELEM_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG2_PE1_RD_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG2.PE1_RD_ELEM_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg2_PE1_RD_ELEM_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg2_PE1_RD_ELEM_BASE_ADDR,
    },
    { /* 805 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg3,
    },
    { /* 806 : INDEX_DX_L2_NPU0_PE1_DMA_ELEM_CFG3_PE1_WT_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f8, DX_L2_NPU0_PE1_DMA_ELEM_CFG3_PE1_WT_ELEM_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_ELEM_CFG3_PE1_WT_ELEM_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_ELEM_CFG3_PE1_WT_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG3.PE1_WT_ELEM_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg3_PE1_WT_ELEM_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg3_PE1_WT_ELEM_BASE_ADDR,
    },
    { /* 807 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2fc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_W_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg0,
    },
    { /* 808 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2fc, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_TIME_LEN, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_TIME_MASK, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_TIME,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_TIME,
    },
    { /* 809 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2fc, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_MODE_LEN, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_MODE_MASK, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_MODE,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_MODE,
    },
    { /* 810 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2fc, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_EN_LEN, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_EN_MASK, DX_L2_NPU0_PE1_DMA_W_CFG0_PE1_RD_W_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG0.PE1_RD_W_EN", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_EN,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg0_PE1_RD_W_EN,
    },
    { /* 811 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2fc, DX_L2_NPU0_PE1_DMA_W_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_W_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_W_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg0_RESERVED0,
    },
    { /* 812 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x300, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg1,
    },
    { /* 813 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x300, DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_STRIDE,
    },
    { /* 814 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x300, DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_SIZE_LEN, DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_SIZE_MASK, DX_L2_NPU0_PE1_DMA_W_CFG1_PE1_RD_W_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG1.PE1_RD_W_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg1_PE1_RD_W_SIZE,
    },
    { /* 815 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x304, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg2,
    },
    { /* 816 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG2_PE1_RD_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x304, DX_L2_NPU0_PE1_DMA_W_CFG2_PE1_RD_W_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_W_CFG2_PE1_RD_W_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_W_CFG2_PE1_RD_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG2.PE1_RD_W_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg2_PE1_RD_W_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg2_PE1_RD_W_BASE_ADDR,
    },
    { /* 817 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x308, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg3,
    },
    { /* 818 : INDEX_DX_L2_NPU0_PE1_DMA_W_CFG3_PE1_WT_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x308, DX_L2_NPU0_PE1_DMA_W_CFG3_PE1_WT_W_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_W_CFG3_PE1_WT_W_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_W_CFG3_PE1_WT_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG3.PE1_WT_W_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg3_PE1_WT_W_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg3_PE1_WT_W_BASE_ADDR,
    },
    { /* 819 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0,
    },
    { /* 820 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_SIZE_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_SIZE_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_SIZE,
    },
    { /* 821 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_TIME_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_TIME_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_TIME,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_TIME,
    },
    { /* 822 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_MODE_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_MODE_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_MODE", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_MODE,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_MODE,
    },
    { /* 823 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_EN_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_EN_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG0_PE1_RD_INF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0.PE1_RD_INF_EN", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_EN,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_PE1_RD_INF_EN,
    },
    { /* 824 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, DX_L2_NPU0_PE1_DMA_INF_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0_RESERVED0,
    },
    { /* 825 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x310, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg1,
    },
    { /* 826 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG1_PE1_RD_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x310, DX_L2_NPU0_PE1_DMA_INF_CFG1_PE1_RD_INF_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG1_PE1_RD_INF_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG1_PE1_RD_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG1.PE1_RD_INF_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg1_PE1_RD_INF_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg1_PE1_RD_INF_STRIDE,
    },
    { /* 827 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x314, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg2,
    },
    { /* 828 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG2_PE1_RD_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x314, DX_L2_NPU0_PE1_DMA_INF_CFG2_PE1_RD_INF_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG2_PE1_RD_INF_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG2_PE1_RD_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG2.PE1_RD_INF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg2_PE1_RD_INF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg2_PE1_RD_INF_BASE_ADDR,
    },
    { /* 829 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x318, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg3,
    },
    { /* 830 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG3_PE1_WT_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x318, DX_L2_NPU0_PE1_DMA_INF_CFG3_PE1_WT_INF_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG3_PE1_WT_INF_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG3_PE1_WT_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG3.PE1_WT_INF_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg3_PE1_WT_INF_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg3_PE1_WT_INF_STRIDE,
    },
    { /* 831 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x31c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG4", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg4,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg4,
    },
    { /* 832 : INDEX_DX_L2_NPU0_PE1_DMA_INF_CFG4_PE1_WT_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x31c, DX_L2_NPU0_PE1_DMA_INF_CFG4_PE1_WT_INF_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_INF_CFG4_PE1_WT_INF_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_INF_CFG4_PE1_WT_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG4.PE1_WT_INF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg4_PE1_WT_INF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg4_PE1_WT_INF_BASE_ADDR,
    },
    { /* 833 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0,
    },
    { /* 834 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_SIZE_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_SIZE_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_SIZE", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_SIZE,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_SIZE,
    },
    { /* 835 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_TIME_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_TIME_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_TIME", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_TIME,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_TIME,
    },
    { /* 836 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED1,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED1,
    },
    { /* 837 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_EN_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_EN_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_PE1_WT_OUTF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0.PE1_WT_OUTF_EN", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_EN,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_PE1_WT_OUTF_EN,
    },
    { /* 838 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED0,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0_RESERVED0,
    },
    { /* 839 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x324, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg1,
    },
    { /* 840 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG1_PE1_WT_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x324, DX_L2_NPU0_PE1_DMA_OUTF_CFG1_PE1_WT_OUTF_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG1_PE1_WT_OUTF_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG1_PE1_WT_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG1.PE1_WT_OUTF_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg1_PE1_WT_OUTF_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg1_PE1_WT_OUTF_STRIDE,
    },
    { /* 841 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x328, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg2,
    },
    { /* 842 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG2_PE1_WT_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x328, DX_L2_NPU0_PE1_DMA_OUTF_CFG2_PE1_WT_OUTF_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG2_PE1_WT_OUTF_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG2_PE1_WT_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG2.PE1_WT_OUTF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg2_PE1_WT_OUTF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg2_PE1_WT_OUTF_BASE_ADDR,
    },
    { /* 843 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x32c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg3,
    },
    { /* 844 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG3_PE1_RD_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x32c, DX_L2_NPU0_PE1_DMA_OUTF_CFG3_PE1_RD_OUTF_STRIDE_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG3_PE1_RD_OUTF_STRIDE_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG3_PE1_RD_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG3.PE1_RD_OUTF_STRIDE", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg3_PE1_RD_OUTF_STRIDE,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg3_PE1_RD_OUTF_STRIDE,
    },
    { /* 845 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x330, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG4", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg4,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg4,
    },
    { /* 846 : INDEX_DX_L2_NPU0_PE1_DMA_OUTF_CFG4_PE1_RD_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x330, DX_L2_NPU0_PE1_DMA_OUTF_CFG4_PE1_RD_OUTF_BASE_ADDR_LEN, DX_L2_NPU0_PE1_DMA_OUTF_CFG4_PE1_RD_OUTF_BASE_ADDR_MASK, DX_L2_NPU0_PE1_DMA_OUTF_CFG4_PE1_RD_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG4.PE1_RD_OUTF_BASE_ADDR", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg4_PE1_RD_OUTF_BASE_ADDR,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg4_PE1_RD_OUTF_BASE_ADDR,
    },
    { /* 847 : INDEX_DX_L2_NPU0_RSVD7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x334, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD7", 
      Read_Dx_l2_npu0_Rsvd7,
      Write_Dx_l2_npu0_Rsvd7,
    },
    { /* 848 : INDEX_DX_L2_NPU0_RSVD7_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x334, DX_L2_NPU0_RSVD7_RESERVED3_LEN, DX_L2_NPU0_RSVD7_RESERVED3_MASK, DX_L2_NPU0_RSVD7_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD7.RESERVED3", 
      Read_Dx_l2_npu0_Rsvd7_RESERVED3,
      Write_Dx_l2_npu0_Rsvd7_RESERVED3,
    },
    { /* 849 : INDEX_DX_L2_NPU0_RSVD7_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x334, DX_L2_NPU0_RSVD7_RESERVED2_LEN, DX_L2_NPU0_RSVD7_RESERVED2_MASK, DX_L2_NPU0_RSVD7_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD7.RESERVED2", 
      Read_Dx_l2_npu0_Rsvd7_RESERVED2,
      Write_Dx_l2_npu0_Rsvd7_RESERVED2,
    },
    { /* 850 : INDEX_DX_L2_NPU0_RSVD7_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x334, DX_L2_NPU0_RSVD7_RESERVED1_LEN, DX_L2_NPU0_RSVD7_RESERVED1_MASK, DX_L2_NPU0_RSVD7_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD7.RESERVED1", 
      Read_Dx_l2_npu0_Rsvd7_RESERVED1,
      Write_Dx_l2_npu0_Rsvd7_RESERVED1,
    },
    { /* 851 : INDEX_DX_L2_NPU0_RSVD7_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x334, DX_L2_NPU0_RSVD7_RESERVED0_LEN, DX_L2_NPU0_RSVD7_RESERVED0_MASK, DX_L2_NPU0_RSVD7_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD7.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd7_RESERVED0,
      Write_Dx_l2_npu0_Rsvd7_RESERVED0,
    },
    { /* 852 : INDEX_DX_L2_NPU0_RSVD8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x338, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_L2_NPU0.RSVD8", 
      Read_Dx_l2_npu0_Rsvd8,
      Write_Dx_l2_npu0_Rsvd8,
    },
    { /* 853 : INDEX_DX_L2_NPU0_RSVD8_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x338, DX_L2_NPU0_RSVD8_RESERVED3_LEN, DX_L2_NPU0_RSVD8_RESERVED3_MASK, DX_L2_NPU0_RSVD8_RESERVED3_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD8.RESERVED3", 
      Read_Dx_l2_npu0_Rsvd8_RESERVED3,
      Write_Dx_l2_npu0_Rsvd8_RESERVED3,
    },
    { /* 854 : INDEX_DX_L2_NPU0_RSVD8_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x338, DX_L2_NPU0_RSVD8_RESERVED2_LEN, DX_L2_NPU0_RSVD8_RESERVED2_MASK, DX_L2_NPU0_RSVD8_RESERVED2_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD8.RESERVED2", 
      Read_Dx_l2_npu0_Rsvd8_RESERVED2,
      Write_Dx_l2_npu0_Rsvd8_RESERVED2,
    },
    { /* 855 : INDEX_DX_L2_NPU0_RSVD8_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x338, DX_L2_NPU0_RSVD8_RESERVED1_LEN, DX_L2_NPU0_RSVD8_RESERVED1_MASK, DX_L2_NPU0_RSVD8_RESERVED1_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD8.RESERVED1", 
      Read_Dx_l2_npu0_Rsvd8_RESERVED1,
      Write_Dx_l2_npu0_Rsvd8_RESERVED1,
    },
    { /* 856 : INDEX_DX_L2_NPU0_RSVD8_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x338, DX_L2_NPU0_RSVD8_RESERVED0_LEN, DX_L2_NPU0_RSVD8_RESERVED0_MASK, DX_L2_NPU0_RSVD8_RESERVED0_OFFSET, 0x0, true, true, false, false,
      "DX_L2_NPU0.RSVD8.RESERVED0", 
      Read_Dx_l2_npu0_Rsvd8_RESERVED0,
      Write_Dx_l2_npu0_Rsvd8_RESERVED0,
    },
  },
};

vector<NpuReg> gNpuRmapRegs_DX_L2[1] = {

  [0] = {
    /* type, baseaddr, addr, len, mask, offset, reset_val, read, write, enable, name */
    { /* 0 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.DATA_CFG0", 
      Read_Dx_l2_npu0_Data_cfg0,
      Write_Dx_l2_npu0_Data_cfg0,
    },
    { /* 1 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.DATA_CFG1", 
      Read_Dx_l2_npu0_Data_cfg1,
      Write_Dx_l2_npu0_Data_cfg1,
    },
    { /* 2 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.IM2COL", 
      Read_Dx_l2_npu0_Im2col,
      Write_Dx_l2_npu0_Im2col,
    },
    { /* 3 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.CTRL", 
      Read_Dx_l2_npu0_Ctrl,
      Write_Dx_l2_npu0_Ctrl,
    },
    { /* 4 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.MISC", 
      Read_Dx_l2_npu0_Misc,
      Write_Dx_l2_npu0_Misc,
    },
    { /* 5 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.ACTIVE", 
      Read_Dx_l2_npu0_Active,
      Write_Dx_l2_npu0_Active,
    },
    { /* 6 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x18, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD0", 
      Read_Dx_l2_npu0_Rsvd0,
      Write_Dx_l2_npu0_Rsvd0,
    },
    { /* 7 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CTRL", 
      Read_Dx_l2_npu0_Sfu_ctrl,
      Write_Dx_l2_npu0_Sfu_ctrl,
    },
    { /* 8 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x20, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CLIP_MAX", 
      Read_Dx_l2_npu0_Sfu_clip_max,
      Write_Dx_l2_npu0_Sfu_clip_max,
    },
    { /* 9 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_CLIP_MIN", 
      Read_Dx_l2_npu0_Sfu_clip_min,
      Write_Dx_l2_npu0_Sfu_clip_min,
    },
    { /* 10 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x28, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.SFU_COEFF0", 
      Read_Dx_l2_npu0_Sfu_coeff0,
      Write_Dx_l2_npu0_Sfu_coeff0,
    },
    { /* 11 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF1", 
      Read_Dx_l2_npu0_Sfu_coeff1,
      Write_Dx_l2_npu0_Sfu_coeff1,
    },
    { /* 12 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF2", 
      Read_Dx_l2_npu0_Sfu_coeff2,
      Write_Dx_l2_npu0_Sfu_coeff2,
    },
    { /* 13 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x34, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF3", 
      Read_Dx_l2_npu0_Sfu_coeff3,
      Write_Dx_l2_npu0_Sfu_coeff3,
    },
    { /* 14 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x38, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF4", 
      Read_Dx_l2_npu0_Sfu_coeff4,
      Write_Dx_l2_npu0_Sfu_coeff4,
    },
    { /* 15 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x3c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF5", 
      Read_Dx_l2_npu0_Sfu_coeff5,
      Write_Dx_l2_npu0_Sfu_coeff5,
    },
    { /* 16 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x40, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF6", 
      Read_Dx_l2_npu0_Sfu_coeff6,
      Write_Dx_l2_npu0_Sfu_coeff6,
    },
    { /* 17 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x44, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF7", 
      Read_Dx_l2_npu0_Sfu_coeff7,
      Write_Dx_l2_npu0_Sfu_coeff7,
    },
    { /* 18 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x48, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF8", 
      Read_Dx_l2_npu0_Sfu_coeff8,
      Write_Dx_l2_npu0_Sfu_coeff8,
    },
    { /* 19 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x4c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF9", 
      Read_Dx_l2_npu0_Sfu_coeff9,
      Write_Dx_l2_npu0_Sfu_coeff9,
    },
    { /* 20 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x50, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF10", 
      Read_Dx_l2_npu0_Sfu_coeff10,
      Write_Dx_l2_npu0_Sfu_coeff10,
    },
    { /* 21 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x54, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF11", 
      Read_Dx_l2_npu0_Sfu_coeff11,
      Write_Dx_l2_npu0_Sfu_coeff11,
    },
    { /* 22 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x58, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF12", 
      Read_Dx_l2_npu0_Sfu_coeff12,
      Write_Dx_l2_npu0_Sfu_coeff12,
    },
    { /* 23 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x5c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF13", 
      Read_Dx_l2_npu0_Sfu_coeff13,
      Write_Dx_l2_npu0_Sfu_coeff13,
    },
    { /* 24 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x60, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF14", 
      Read_Dx_l2_npu0_Sfu_coeff14,
      Write_Dx_l2_npu0_Sfu_coeff14,
    },
    { /* 25 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x64, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF15", 
      Read_Dx_l2_npu0_Sfu_coeff15,
      Write_Dx_l2_npu0_Sfu_coeff15,
    },
    { /* 26 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x68, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF16", 
      Read_Dx_l2_npu0_Sfu_coeff16,
      Write_Dx_l2_npu0_Sfu_coeff16,
    },
    { /* 27 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x6c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF17", 
      Read_Dx_l2_npu0_Sfu_coeff17,
      Write_Dx_l2_npu0_Sfu_coeff17,
    },
    { /* 28 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x70, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF18", 
      Read_Dx_l2_npu0_Sfu_coeff18,
      Write_Dx_l2_npu0_Sfu_coeff18,
    },
    { /* 29 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x74, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF19", 
      Read_Dx_l2_npu0_Sfu_coeff19,
      Write_Dx_l2_npu0_Sfu_coeff19,
    },
    { /* 30 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x78, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF20", 
      Read_Dx_l2_npu0_Sfu_coeff20,
      Write_Dx_l2_npu0_Sfu_coeff20,
    },
    { /* 31 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x7c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF21", 
      Read_Dx_l2_npu0_Sfu_coeff21,
      Write_Dx_l2_npu0_Sfu_coeff21,
    },
    { /* 32 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x80, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF22", 
      Read_Dx_l2_npu0_Sfu_coeff22,
      Write_Dx_l2_npu0_Sfu_coeff22,
    },
    { /* 33 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x84, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF23", 
      Read_Dx_l2_npu0_Sfu_coeff23,
      Write_Dx_l2_npu0_Sfu_coeff23,
    },
    { /* 34 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x88, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF24", 
      Read_Dx_l2_npu0_Sfu_coeff24,
      Write_Dx_l2_npu0_Sfu_coeff24,
    },
    { /* 35 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x8c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF25", 
      Read_Dx_l2_npu0_Sfu_coeff25,
      Write_Dx_l2_npu0_Sfu_coeff25,
    },
    { /* 36 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x90, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF26", 
      Read_Dx_l2_npu0_Sfu_coeff26,
      Write_Dx_l2_npu0_Sfu_coeff26,
    },
    { /* 37 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x94, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF27", 
      Read_Dx_l2_npu0_Sfu_coeff27,
      Write_Dx_l2_npu0_Sfu_coeff27,
    },
    { /* 38 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x98, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF28", 
      Read_Dx_l2_npu0_Sfu_coeff28,
      Write_Dx_l2_npu0_Sfu_coeff28,
    },
    { /* 39 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x9c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF29", 
      Read_Dx_l2_npu0_Sfu_coeff29,
      Write_Dx_l2_npu0_Sfu_coeff29,
    },
    { /* 40 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF30", 
      Read_Dx_l2_npu0_Sfu_coeff30,
      Write_Dx_l2_npu0_Sfu_coeff30,
    },
    { /* 41 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF31", 
      Read_Dx_l2_npu0_Sfu_coeff31,
      Write_Dx_l2_npu0_Sfu_coeff31,
    },
    { /* 42 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xa8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF32", 
      Read_Dx_l2_npu0_Sfu_coeff32,
      Write_Dx_l2_npu0_Sfu_coeff32,
    },
    { /* 43 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF33", 
      Read_Dx_l2_npu0_Sfu_coeff33,
      Write_Dx_l2_npu0_Sfu_coeff33,
    },
    { /* 44 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF34", 
      Read_Dx_l2_npu0_Sfu_coeff34,
      Write_Dx_l2_npu0_Sfu_coeff34,
    },
    { /* 45 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF35", 
      Read_Dx_l2_npu0_Sfu_coeff35,
      Write_Dx_l2_npu0_Sfu_coeff35,
    },
    { /* 46 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xb8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF36", 
      Read_Dx_l2_npu0_Sfu_coeff36,
      Write_Dx_l2_npu0_Sfu_coeff36,
    },
    { /* 47 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xbc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF37", 
      Read_Dx_l2_npu0_Sfu_coeff37,
      Write_Dx_l2_npu0_Sfu_coeff37,
    },
    { /* 48 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF38", 
      Read_Dx_l2_npu0_Sfu_coeff38,
      Write_Dx_l2_npu0_Sfu_coeff38,
    },
    { /* 49 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF39", 
      Read_Dx_l2_npu0_Sfu_coeff39,
      Write_Dx_l2_npu0_Sfu_coeff39,
    },
    { /* 50 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xc8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF40", 
      Read_Dx_l2_npu0_Sfu_coeff40,
      Write_Dx_l2_npu0_Sfu_coeff40,
    },
    { /* 51 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xcc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF41", 
      Read_Dx_l2_npu0_Sfu_coeff41,
      Write_Dx_l2_npu0_Sfu_coeff41,
    },
    { /* 52 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF42", 
      Read_Dx_l2_npu0_Sfu_coeff42,
      Write_Dx_l2_npu0_Sfu_coeff42,
    },
    { /* 53 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF43", 
      Read_Dx_l2_npu0_Sfu_coeff43,
      Write_Dx_l2_npu0_Sfu_coeff43,
    },
    { /* 54 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xd8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF44", 
      Read_Dx_l2_npu0_Sfu_coeff44,
      Write_Dx_l2_npu0_Sfu_coeff44,
    },
    { /* 55 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xdc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF45", 
      Read_Dx_l2_npu0_Sfu_coeff45,
      Write_Dx_l2_npu0_Sfu_coeff45,
    },
    { /* 56 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF46", 
      Read_Dx_l2_npu0_Sfu_coeff46,
      Write_Dx_l2_npu0_Sfu_coeff46,
    },
    { /* 57 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF47", 
      Read_Dx_l2_npu0_Sfu_coeff47,
      Write_Dx_l2_npu0_Sfu_coeff47,
    },
    { /* 58 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xe8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF48", 
      Read_Dx_l2_npu0_Sfu_coeff48,
      Write_Dx_l2_npu0_Sfu_coeff48,
    },
    { /* 59 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xec, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF49", 
      Read_Dx_l2_npu0_Sfu_coeff49,
      Write_Dx_l2_npu0_Sfu_coeff49,
    },
    { /* 60 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF50", 
      Read_Dx_l2_npu0_Sfu_coeff50,
      Write_Dx_l2_npu0_Sfu_coeff50,
    },
    { /* 61 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF51", 
      Read_Dx_l2_npu0_Sfu_coeff51,
      Write_Dx_l2_npu0_Sfu_coeff51,
    },
    { /* 62 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xf8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF52", 
      Read_Dx_l2_npu0_Sfu_coeff52,
      Write_Dx_l2_npu0_Sfu_coeff52,
    },
    { /* 63 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0xfc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF53", 
      Read_Dx_l2_npu0_Sfu_coeff53,
      Write_Dx_l2_npu0_Sfu_coeff53,
    },
    { /* 64 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x100, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.SFU_COEFF54", 
      Read_Dx_l2_npu0_Sfu_coeff54,
      Write_Dx_l2_npu0_Sfu_coeff54,
    },
    { /* 65 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x104, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD1", 
      Read_Dx_l2_npu0_Rsvd1,
      Write_Dx_l2_npu0_Rsvd1,
    },
    { /* 66 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x108, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD2", 
      Read_Dx_l2_npu0_Rsvd2,
      Write_Dx_l2_npu0_Rsvd2,
    },
    { /* 67 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x10c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_IMG2COL0", 
      Read_Dx_l2_npu0_Pe0_img2col0,
      Write_Dx_l2_npu0_Pe0_img2col0,
    },
    { /* 68 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x110, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_IMG2COL1", 
      Read_Dx_l2_npu0_Pe0_img2col1,
      Write_Dx_l2_npu0_Pe0_img2col1,
    },
    { /* 69 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x114, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_FMT", 
      Read_Dx_l2_npu0_Pe0_fmt,
      Write_Dx_l2_npu0_Pe0_fmt,
    },
    { /* 70 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x118, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_FMT_CFG0", 
      Read_Dx_l2_npu0_Pe0_fmt_cfg0,
      Write_Dx_l2_npu0_Pe0_fmt_cfg0,
    },
    { /* 71 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x11c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_ADDR_GEN0", 
      Read_Dx_l2_npu0_Pe0_addr_gen0,
      Write_Dx_l2_npu0_Pe0_addr_gen0,
    },
    { /* 72 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x120, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN1", 
      Read_Dx_l2_npu0_Pe0_addr_gen1,
      Write_Dx_l2_npu0_Pe0_addr_gen1,
    },
    { /* 73 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x124, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_ADDR_GEN2", 
      Read_Dx_l2_npu0_Pe0_addr_gen2,
      Write_Dx_l2_npu0_Pe0_addr_gen2,
    },
    { /* 74 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x128, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_ADDR_GEN3", 
      Read_Dx_l2_npu0_Pe0_addr_gen3,
      Write_Dx_l2_npu0_Pe0_addr_gen3,
    },
    { /* 75 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x12c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CTRL", 
      Read_Dx_l2_npu0_Pe0_ctrl,
      Write_Dx_l2_npu0_Pe0_ctrl,
    },
    { /* 76 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x130, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG0", 
      Read_Dx_l2_npu0_Pe0_cfg0,
      Write_Dx_l2_npu0_Pe0_cfg0,
    },
    { /* 77 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x134, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG1", 
      Read_Dx_l2_npu0_Pe0_cfg1,
      Write_Dx_l2_npu0_Pe0_cfg1,
    },
    { /* 78 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x138, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG2", 
      Read_Dx_l2_npu0_Pe0_cfg2,
      Write_Dx_l2_npu0_Pe0_cfg2,
    },
    { /* 79 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x13c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG3", 
      Read_Dx_l2_npu0_Pe0_cfg3,
      Write_Dx_l2_npu0_Pe0_cfg3,
    },
    { /* 80 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x140, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG4", 
      Read_Dx_l2_npu0_Pe0_cfg4,
      Write_Dx_l2_npu0_Pe0_cfg4,
    },
    { /* 81 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x144, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG5", 
      Read_Dx_l2_npu0_Pe0_cfg5,
      Write_Dx_l2_npu0_Pe0_cfg5,
    },
    { /* 82 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x148, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG6", 
      Read_Dx_l2_npu0_Pe0_cfg6,
      Write_Dx_l2_npu0_Pe0_cfg6,
    },
    { /* 83 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x14c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG7", 
      Read_Dx_l2_npu0_Pe0_cfg7,
      Write_Dx_l2_npu0_Pe0_cfg7,
    },
    { /* 84 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x150, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG8", 
      Read_Dx_l2_npu0_Pe0_cfg8,
      Write_Dx_l2_npu0_Pe0_cfg8,
    },
    { /* 85 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x154, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG9", 
      Read_Dx_l2_npu0_Pe0_cfg9,
      Write_Dx_l2_npu0_Pe0_cfg9,
    },
    { /* 86 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x158, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG10", 
      Read_Dx_l2_npu0_Pe0_cfg10,
      Write_Dx_l2_npu0_Pe0_cfg10,
    },
    { /* 87 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x15c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG11", 
      Read_Dx_l2_npu0_Pe0_cfg11,
      Write_Dx_l2_npu0_Pe0_cfg11,
    },
    { /* 88 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x160, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG12", 
      Read_Dx_l2_npu0_Pe0_cfg12,
      Write_Dx_l2_npu0_Pe0_cfg12,
    },
    { /* 89 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x164, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG13", 
      Read_Dx_l2_npu0_Pe0_cfg13,
      Write_Dx_l2_npu0_Pe0_cfg13,
    },
    { /* 90 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x168, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG14", 
      Read_Dx_l2_npu0_Pe0_cfg14,
      Write_Dx_l2_npu0_Pe0_cfg14,
    },
    { /* 91 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x16c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG15", 
      Read_Dx_l2_npu0_Pe0_cfg15,
      Write_Dx_l2_npu0_Pe0_cfg15,
    },
    { /* 92 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x170, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG16", 
      Read_Dx_l2_npu0_Pe0_cfg16,
      Write_Dx_l2_npu0_Pe0_cfg16,
    },
    { /* 93 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x174, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG17", 
      Read_Dx_l2_npu0_Pe0_cfg17,
      Write_Dx_l2_npu0_Pe0_cfg17,
    },
    { /* 94 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x178, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG18", 
      Read_Dx_l2_npu0_Pe0_cfg18,
      Write_Dx_l2_npu0_Pe0_cfg18,
    },
    { /* 95 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x17c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG19", 
      Read_Dx_l2_npu0_Pe0_cfg19,
      Write_Dx_l2_npu0_Pe0_cfg19,
    },
    { /* 96 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x180, 32, 0xffffffff, 0x0, 0xffff, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG20", 
      Read_Dx_l2_npu0_Pe0_cfg20,
      Write_Dx_l2_npu0_Pe0_cfg20,
    },
    { /* 97 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x184, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG21", 
      Read_Dx_l2_npu0_Pe0_cfg21,
      Write_Dx_l2_npu0_Pe0_cfg21,
    },
    { /* 98 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x188, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG22", 
      Read_Dx_l2_npu0_Pe0_cfg22,
      Write_Dx_l2_npu0_Pe0_cfg22,
    },
    { /* 99 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x18c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_CFG23", 
      Read_Dx_l2_npu0_Pe0_cfg23,
      Write_Dx_l2_npu0_Pe0_cfg23,
    },
    { /* 100 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x190, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG24", 
      Read_Dx_l2_npu0_Pe0_cfg24,
      Write_Dx_l2_npu0_Pe0_cfg24,
    },
    { /* 101 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x194, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_CFG25", 
      Read_Dx_l2_npu0_Pe0_cfg25,
      Write_Dx_l2_npu0_Pe0_cfg25,
    },
    { /* 102 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x198, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_VMEM_CFG0", 
      Read_Dx_l2_npu0_Pe0_vmem_cfg0,
      Write_Dx_l2_npu0_Pe0_vmem_cfg0,
    },
    { /* 103 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x19c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_SMEM_CFG0", 
      Read_Dx_l2_npu0_Pe0_smem_cfg0,
      Write_Dx_l2_npu0_Pe0_smem_cfg0,
    },
    { /* 104 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_IMG2COL0", 
      Read_Dx_l2_npu0_Pe1_img2col0,
      Write_Dx_l2_npu0_Pe1_img2col0,
    },
    { /* 105 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_IMG2COL1", 
      Read_Dx_l2_npu0_Pe1_img2col1,
      Write_Dx_l2_npu0_Pe1_img2col1,
    },
    { /* 106 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1a8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_FMT", 
      Read_Dx_l2_npu0_Pe1_fmt,
      Write_Dx_l2_npu0_Pe1_fmt,
    },
    { /* 107 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1ac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_FMT_CFG0", 
      Read_Dx_l2_npu0_Pe1_fmt_cfg0,
      Write_Dx_l2_npu0_Pe1_fmt_cfg0,
    },
    { /* 108 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_ADDR_GEN0", 
      Read_Dx_l2_npu0_Pe1_addr_gen0,
      Write_Dx_l2_npu0_Pe1_addr_gen0,
    },
    { /* 109 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN1", 
      Read_Dx_l2_npu0_Pe1_addr_gen1,
      Write_Dx_l2_npu0_Pe1_addr_gen1,
    },
    { /* 110 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1b8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_ADDR_GEN2", 
      Read_Dx_l2_npu0_Pe1_addr_gen2,
      Write_Dx_l2_npu0_Pe1_addr_gen2,
    },
    { /* 111 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1bc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_ADDR_GEN3", 
      Read_Dx_l2_npu0_Pe1_addr_gen3,
      Write_Dx_l2_npu0_Pe1_addr_gen3,
    },
    { /* 112 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CTRL", 
      Read_Dx_l2_npu0_Pe1_ctrl,
      Write_Dx_l2_npu0_Pe1_ctrl,
    },
    { /* 113 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG0", 
      Read_Dx_l2_npu0_Pe1_cfg0,
      Write_Dx_l2_npu0_Pe1_cfg0,
    },
    { /* 114 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1c8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG1", 
      Read_Dx_l2_npu0_Pe1_cfg1,
      Write_Dx_l2_npu0_Pe1_cfg1,
    },
    { /* 115 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1cc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG2", 
      Read_Dx_l2_npu0_Pe1_cfg2,
      Write_Dx_l2_npu0_Pe1_cfg2,
    },
    { /* 116 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG3", 
      Read_Dx_l2_npu0_Pe1_cfg3,
      Write_Dx_l2_npu0_Pe1_cfg3,
    },
    { /* 117 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG4", 
      Read_Dx_l2_npu0_Pe1_cfg4,
      Write_Dx_l2_npu0_Pe1_cfg4,
    },
    { /* 118 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1d8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG5", 
      Read_Dx_l2_npu0_Pe1_cfg5,
      Write_Dx_l2_npu0_Pe1_cfg5,
    },
    { /* 119 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1dc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG6", 
      Read_Dx_l2_npu0_Pe1_cfg6,
      Write_Dx_l2_npu0_Pe1_cfg6,
    },
    { /* 120 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG7", 
      Read_Dx_l2_npu0_Pe1_cfg7,
      Write_Dx_l2_npu0_Pe1_cfg7,
    },
    { /* 121 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG8", 
      Read_Dx_l2_npu0_Pe1_cfg8,
      Write_Dx_l2_npu0_Pe1_cfg8,
    },
    { /* 122 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1e8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG9", 
      Read_Dx_l2_npu0_Pe1_cfg9,
      Write_Dx_l2_npu0_Pe1_cfg9,
    },
    { /* 123 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1ec, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG10", 
      Read_Dx_l2_npu0_Pe1_cfg10,
      Write_Dx_l2_npu0_Pe1_cfg10,
    },
    { /* 124 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG11", 
      Read_Dx_l2_npu0_Pe1_cfg11,
      Write_Dx_l2_npu0_Pe1_cfg11,
    },
    { /* 125 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG12", 
      Read_Dx_l2_npu0_Pe1_cfg12,
      Write_Dx_l2_npu0_Pe1_cfg12,
    },
    { /* 126 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1f8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG13", 
      Read_Dx_l2_npu0_Pe1_cfg13,
      Write_Dx_l2_npu0_Pe1_cfg13,
    },
    { /* 127 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x1fc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG14", 
      Read_Dx_l2_npu0_Pe1_cfg14,
      Write_Dx_l2_npu0_Pe1_cfg14,
    },
    { /* 128 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x200, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG15", 
      Read_Dx_l2_npu0_Pe1_cfg15,
      Write_Dx_l2_npu0_Pe1_cfg15,
    },
    { /* 129 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x204, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG16", 
      Read_Dx_l2_npu0_Pe1_cfg16,
      Write_Dx_l2_npu0_Pe1_cfg16,
    },
    { /* 130 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x208, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG17", 
      Read_Dx_l2_npu0_Pe1_cfg17,
      Write_Dx_l2_npu0_Pe1_cfg17,
    },
    { /* 131 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x20c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG18", 
      Read_Dx_l2_npu0_Pe1_cfg18,
      Write_Dx_l2_npu0_Pe1_cfg18,
    },
    { /* 132 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x210, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG19", 
      Read_Dx_l2_npu0_Pe1_cfg19,
      Write_Dx_l2_npu0_Pe1_cfg19,
    },
    { /* 133 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x214, 32, 0xffffffff, 0x0, 0xffff, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG20", 
      Read_Dx_l2_npu0_Pe1_cfg20,
      Write_Dx_l2_npu0_Pe1_cfg20,
    },
    { /* 134 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x218, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG21", 
      Read_Dx_l2_npu0_Pe1_cfg21,
      Write_Dx_l2_npu0_Pe1_cfg21,
    },
    { /* 135 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x21c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG22", 
      Read_Dx_l2_npu0_Pe1_cfg22,
      Write_Dx_l2_npu0_Pe1_cfg22,
    },
    { /* 136 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x220, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_CFG23", 
      Read_Dx_l2_npu0_Pe1_cfg23,
      Write_Dx_l2_npu0_Pe1_cfg23,
    },
    { /* 137 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x224, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG24", 
      Read_Dx_l2_npu0_Pe1_cfg24,
      Write_Dx_l2_npu0_Pe1_cfg24,
    },
    { /* 138 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x228, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_CFG25", 
      Read_Dx_l2_npu0_Pe1_cfg25,
      Write_Dx_l2_npu0_Pe1_cfg25,
    },
    { /* 139 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x22c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_VMEM_CFG0", 
      Read_Dx_l2_npu0_Pe1_vmem_cfg0,
      Write_Dx_l2_npu0_Pe1_vmem_cfg0,
    },
    { /* 140 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x230, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_SMEM_CFG0", 
      Read_Dx_l2_npu0_Pe1_smem_cfg0,
      Write_Dx_l2_npu0_Pe1_smem_cfg0,
    },
    { /* 141 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x234, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_CTRL", 
      Read_Dx_l2_npu0_Pe0_dma_ctrl,
      Write_Dx_l2_npu0_Pe0_dma_ctrl,
    },
    { /* 142 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x238, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_BN_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg0,
    },
    { /* 143 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x23c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_BN_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg1,
    },
    { /* 144 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x240, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg2,
    },
    { /* 145 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x244, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_BN_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_bn_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_bn_cfg3,
    },
    { /* 146 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x248, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_B_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg0,
    },
    { /* 147 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x24c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_B_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg1,
    },
    { /* 148 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x250, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg2,
    },
    { /* 149 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x254, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_B_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_b_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_b_cfg3,
    },
    { /* 150 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x258, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg0,
    },
    { /* 151 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x25c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg1,
    },
    { /* 152 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x260, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg2,
    },
    { /* 153 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x264, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_MUL_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_mul_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_mul_cfg3,
    },
    { /* 154 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x268, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg0,
    },
    { /* 155 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x26c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg1,
    },
    { /* 156 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x270, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg2,
    },
    { /* 157 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x274, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_ELEM_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_elem_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_elem_cfg3,
    },
    { /* 158 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x278, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_W_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg0,
    },
    { /* 159 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x27c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg1,
    },
    { /* 160 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x280, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg2,
    },
    { /* 161 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x284, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_W_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_w_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_w_cfg3,
    },
    { /* 162 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x288, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_INF_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg0,
    },
    { /* 163 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x28c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg1,
    },
    { /* 164 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x290, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg2,
    },
    { /* 165 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x294, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg3,
    },
    { /* 166 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x298, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_INF_CFG4", 
      Read_Dx_l2_npu0_Pe0_dma_inf_cfg4,
      Write_Dx_l2_npu0_Pe0_dma_inf_cfg4,
    },
    { /* 167 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x29c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG0", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg0,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg0,
    },
    { /* 168 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG1", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg1,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg1,
    },
    { /* 169 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG2", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg2,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg2,
    },
    { /* 170 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2a8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG3", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg3,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg3,
    },
    { /* 171 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE0_DMA_OUTF_CFG4", 
      Read_Dx_l2_npu0_Pe0_dma_outf_cfg4,
      Write_Dx_l2_npu0_Pe0_dma_outf_cfg4,
    },
    { /* 172 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b0, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD5", 
      Read_Dx_l2_npu0_Rsvd5,
      Write_Dx_l2_npu0_Rsvd5,
    },
    { /* 173 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b4, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD6", 
      Read_Dx_l2_npu0_Rsvd6,
      Write_Dx_l2_npu0_Rsvd6,
    },
    { /* 174 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2b8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_CTRL", 
      Read_Dx_l2_npu0_Pe1_dma_ctrl,
      Write_Dx_l2_npu0_Pe1_dma_ctrl,
    },
    { /* 175 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2bc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_BN_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg0,
    },
    { /* 176 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_BN_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg1,
    },
    { /* 177 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg2,
    },
    { /* 178 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2c8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_BN_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_bn_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_bn_cfg3,
    },
    { /* 179 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2cc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_B_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg0,
    },
    { /* 180 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_B_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg1,
    },
    { /* 181 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg2,
    },
    { /* 182 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2d8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_B_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_b_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_b_cfg3,
    },
    { /* 183 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2dc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg0,
    },
    { /* 184 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg1,
    },
    { /* 185 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg2,
    },
    { /* 186 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2e8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_MUL_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_mul_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_mul_cfg3,
    },
    { /* 187 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2ec, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg0,
    },
    { /* 188 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg1,
    },
    { /* 189 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg2,
    },
    { /* 190 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2f8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_ELEM_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_elem_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_elem_cfg3,
    },
    { /* 191 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x2fc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_W_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg0,
    },
    { /* 192 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x300, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg1,
    },
    { /* 193 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x304, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg2,
    },
    { /* 194 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x308, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_W_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_w_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_w_cfg3,
    },
    { /* 195 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x30c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_INF_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg0,
    },
    { /* 196 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x310, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg1,
    },
    { /* 197 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x314, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg2,
    },
    { /* 198 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x318, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg3,
    },
    { /* 199 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x31c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_INF_CFG4", 
      Read_Dx_l2_npu0_Pe1_dma_inf_cfg4,
      Write_Dx_l2_npu0_Pe1_dma_inf_cfg4,
    },
    { /* 200 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x320, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG0", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg0,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg0,
    },
    { /* 201 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x324, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG1", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg1,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg1,
    },
    { /* 202 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x328, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG2", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg2,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg2,
    },
    { /* 203 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x32c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG3", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg3,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg3,
    },
    { /* 204 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x330, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_L2_NPU0.PE1_DMA_OUTF_CFG4", 
      Read_Dx_l2_npu0_Pe1_dma_outf_cfg4,
      Write_Dx_l2_npu0_Pe1_dma_outf_cfg4,
    },
    { /* 205 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x334, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD7", 
      Read_Dx_l2_npu0_Rsvd7,
      Write_Dx_l2_npu0_Rsvd7,
    },
    { /* 206 */
      DXRT_NPU_REG_NPU0, REG_DX_L2_NPU0_OFFSET, REG_DX_L2_NPU0_OFFSET + 0x338, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_L2_NPU0.RSVD8", 
      Read_Dx_l2_npu0_Rsvd8,
      Write_Dx_l2_npu0_Rsvd8,
    },
  },
};

} /* namespace dxrt */