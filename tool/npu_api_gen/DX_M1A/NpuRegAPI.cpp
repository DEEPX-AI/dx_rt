/* Automatically generated from DX_M1A.xlsx
 * by Deepx Neural Network Generator v1.0
 */
#include "dxrt/common.h"
#include "dxrt/npuif/npuif.h"
#include <cassert>
#include <sstream>

using namespace std;

namespace dxrt {
int DX_M1A_VerifyGeneratedStruct(void)
{
    int cnt = 0;
    if(sizeof(DX_M1A_SYSTEM_ID_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_ID_t)==4);
    if(sizeof(DX_M1A_SYSTEM_RUN_OPT_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_RUN_OPT_t)==4);
    if(sizeof(DX_M1A_SYSTEM_STATUS1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_STATUS1_t)==4);
    if(sizeof(DX_M1A_SYSTEM_STATUS2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_STATUS2_t)==4);
    if(sizeof(DX_M1A_SYSTEM_NET_INFO_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_NET_INFO_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_STATUS_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_SET_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_SET_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_CNT0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_CNT0_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_CNT1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_CNT1_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_CNT2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_CNT2_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_CNT3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_CNT3_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_CNT4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_CNT4_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IN_FEATURE_BASE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IN_FEATURE_BASE_t)==4);
    if(sizeof(DX_M1A_SYSTEM_OUT_FEATURE_BASE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_OUT_FEATURE_BASE_t)==4);
    if(sizeof(DX_M1A_SYSTEM_WEIGHT_BASE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_WEIGHT_BASE_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_TIMER_DMA_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_TIMER_DMA_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_TIMER_OP_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_TIMER_OP_t)==4);
    if(sizeof(DX_M1A_SYSTEM_CMD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_CMD_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG0_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG1_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG2_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG3_t)==4);
    if(sizeof(DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_t)==4);
    if(sizeof(DX_M1A_SYSTEM_RSV0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_RSV0_t)==4);
    if(sizeof(DX_M1A_SYSTEM_RSV1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_RSV1_t)==4);
    if(sizeof(DX_M1A_SYSTEM_RSV2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_RSV2_t)==4);
    if(sizeof(DX_M1A_SYSTEM_CPU_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_CPU_STATUS_t)==4);
    if(sizeof(DX_M1A_SYSTEM_CPU_IRQ_SET_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_CPU_IRQ_SET_t)==4);
    if(sizeof(DX_M1A_SYSTEM_CPU_IRQ_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_CPU_IRQ_STATUS_t)==4);
    if(sizeof(DX_M1A_SYSTEM_CPU_START_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_CPU_START_t)==4);
    if(sizeof(DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_t)==4);
    if(sizeof(DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_t)==4);
    if(sizeof(DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG4_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG5_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG6_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG7_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG8_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG9_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG10_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG11_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG12_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG12_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG13_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG13_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG14_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG14_t)==4);
    if(sizeof(DX_M1A_SYSTEM_SWREG15_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_SYSTEM_SWREG15_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP0_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP1_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP2_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP3_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP4_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP5_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP6_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP7_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP8_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP9_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP10_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP11_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP12_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP12_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP13_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP13_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP14_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP14_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP15_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP15_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP16_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP16_t)==4);
    if(sizeof(DX_M1A_DEBUG_STAMP17_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_STAMP17_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE0_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE0_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE0_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE0_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE1_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE1_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE1_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE1_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE2_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE2_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE2_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE2_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE3_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE3_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_PE3_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_PE3_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_CMD_ARB_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_CMD_ARB_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_AXI_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_AXI_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_AXI_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_AXI_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_MEM_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_MEM_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_MEM_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_MEM_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_MEM_CP_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_MEM_CP_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_SFR_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_SFR_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_CMEM_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_CMEM_RD_t)==4);
    if(sizeof(DX_M1A_DEBUG_DMA_CMEM_WR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_DMA_CMEM_WR_t)==4);
    if(sizeof(DX_M1A_DEBUG_SFU_FIFO_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_SFU_FIFO_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG0_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG1_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG2_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG3_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG4_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG5_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG6_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG7_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG8_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG9_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG10_t)==4);
    if(sizeof(DX_M1A_DEBUG_NPU_DBG11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_NPU_DBG11_t)==4);
    if(sizeof(DX_M1A_DEBUG_FSM_RD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DEBUG_FSM_RD_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_BASE_ADDR_LOW_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_BASE_ADDR_LOW_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_BASE_ADDR_HIGH_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_BASE_ADDR_HIGH_t)==4);
    if(sizeof(DX_M1A_DMA_AXI4_RADDR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI4_RADDR_t)==4);
    if(sizeof(DX_M1A_DMA_AXI4_WADDR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI4_WADDR_t)==4);
    if(sizeof(DX_M1A_DMA_RSVD0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_RSVD0_t)==4);
    if(sizeof(DX_M1A_DMA_RSVD1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_RSVD1_t)==4);
    if(sizeof(DX_M1A_DMA_SRAM_DST_ADDR0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SRAM_DST_ADDR0_t)==4);
    if(sizeof(DX_M1A_DMA_SRAM_DST_ADDR1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SRAM_DST_ADDR1_t)==4);
    if(sizeof(DX_M1A_DMA_SRAM_SRC_ADDR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SRAM_SRC_ADDR_t)==4);
    if(sizeof(DX_M1A_DMA_READ_SIZE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_READ_SIZE_t)==4);
    if(sizeof(DX_M1A_DMA_WRITE_SIZE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_WRITE_SIZE_t)==4);
    if(sizeof(DX_M1A_DMA_RSVD2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_RSVD2_t)==4);
    if(sizeof(DX_M1A_DMA_RSVD3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_RSVD3_t)==4);
    if(sizeof(DX_M1A_DMA_RSVD4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_RSVD4_t)==4);
    if(sizeof(DX_M1A_DMA_RSVD5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_RSVD5_t)==4);
    if(sizeof(DX_M1A_DMA_IRQ_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_IRQ_t)==4);
    if(sizeof(DX_M1A_DMA_CMD_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_CMD_t)==4);
    if(sizeof(DX_M1A_DMA_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_STATUS_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_BASE_ADDR_LOW_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_BASE_ADDR_LOW_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_BASE_ADDR_HIGH_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_BASE_ADDR_HIGH_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_ADDR_OFFS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_ADDR_OFFS_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_START_ADDR_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_START_ADDR_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_MOVE_CNT_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_MOVE_CNT_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_ID_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_ID_t)==4);
    if(sizeof(DX_M1A_DMA_SFR_DMA_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_SFR_DMA_STATUS_t)==4);
    if(sizeof(DX_M1A_DMA_DMA_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_DMA_CTRL_t)==4);
    if(sizeof(DX_M1A_DMA_FLUSH_STATUS_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_FLUSH_STATUS_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG0_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG1_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG2_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG3_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG4_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG5_t)==4);
    if(sizeof(DX_M1A_DMA_AXI_CFG6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_AXI_CFG6_t)==4);
    if(sizeof(DX_M1A_DMA_VIRT_RD_EN_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_VIRT_RD_EN_t)==4);
    if(sizeof(DX_M1A_DMA_VIRT_RD_PTRN_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_DMA_VIRT_RD_PTRN_t)==4);
    if(sizeof(DX_M1A_NPU0_DATA_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_DATA_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_CTRL_t)==4);
    if(sizeof(DX_M1A_NPU0_MISC_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_MISC_t)==4);
    if(sizeof(DX_M1A_NPU0_PSEUDO_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PSEUDO_t)==4);
    if(sizeof(DX_M1A_NPU0_TRP0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_TRP0_t)==4);
    if(sizeof(DX_M1A_NPU0_TRP1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_TRP1_t)==4);
    if(sizeof(DX_M1A_NPU0_TRP2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_TRP2_t)==4);
    if(sizeof(DX_M1A_NPU0_TRP3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_TRP3_t)==4);
    if(sizeof(DX_M1A_NPU0_TRP4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_TRP4_t)==4);
    if(sizeof(DX_M1A_NPU0_ARG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_ARG0_t)==4);
    if(sizeof(DX_M1A_NPU0_POOL0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_POOL0_t)==4);
    if(sizeof(DX_M1A_NPU0_POOL1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_POOL1_t)==4);
    if(sizeof(DX_M1A_NPU0_POOL2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_POOL2_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_CTRL0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_CTRL0_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF0_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF1_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF2_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF3_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF4_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF5_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF6_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF7_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF8_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_COEFF9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_COEFF9_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF0_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF1_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF2_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF3_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF4_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF5_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF6_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF7_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF8_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF9_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF10_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF11_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF12_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF12_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF13_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF13_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF14_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF14_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF15_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF15_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF16_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF16_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF17_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF17_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF18_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF18_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF19_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF19_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF20_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF20_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF21_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF21_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF22_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF22_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF23_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF23_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF24_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF24_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF25_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF25_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF26_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF26_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF27_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF27_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF28_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF28_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF29_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF29_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF30_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF30_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF31_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF31_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF32_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF32_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF33_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF33_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF34_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF34_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF35_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF35_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF36_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF36_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF37_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF37_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF38_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF38_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF39_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF39_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF40_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF40_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF41_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF41_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF42_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF42_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF43_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF43_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF44_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF44_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF45_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF45_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF46_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF46_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_SCALE_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_ELEM_BRD0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_ELEM_BRD0_t)==4);
    if(sizeof(DX_M1A_NPU0_SFU_PAF_DISABLE_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_SFU_PAF_DISABLE_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE0_I2C0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE0_I2C0_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE0_I2C1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE0_I2C1_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE0_I2C2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE0_I2C2_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE0_I2C3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE0_I2C3_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE0_FMT0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE0_FMT0_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE0_FMT1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE0_FMT1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN5_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN6_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN7_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_ADDR_GEN8_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CTRL_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG5_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG6_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG7_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG8_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG9_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG10_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG11_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG12_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG12_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG13_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG13_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG14_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG14_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG15_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG15_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG16_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG16_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG17_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG17_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG18_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG18_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG19_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG19_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG20_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG20_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG21_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG21_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG22_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG22_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG23_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG23_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG24_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG24_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG25_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG25_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_CFG26_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_CFG26_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_VMEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_VMEM_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE0_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE0_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE0_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE0_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE0_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE0_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE0_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE0_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_CTRL_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_ELEM_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_W_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_INF_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_OUTF_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG5_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG6_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG7_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG8_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG9_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG10_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG11_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG12_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG12_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG13_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG13_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG14_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG14_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG15_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG15_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG16_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG16_t)==4);
    if(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG17_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE0_DMA_RF_CFG17_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE1_I2C0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE1_I2C0_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE1_I2C1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE1_I2C1_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE1_I2C2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE1_I2C2_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE1_I2C3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE1_I2C3_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE1_FMT0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE1_FMT0_t)==4);
    if(sizeof(DX_M1A_NPU0_PRE1_FMT1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PRE1_FMT1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN5_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN6_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN7_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_ADDR_GEN8_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CTRL_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG5_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG5_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG6_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG7_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG8_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG8_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG9_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG10_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG10_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG11_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG11_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG12_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG12_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG13_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG13_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG14_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG14_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG15_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG15_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG16_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG16_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG17_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG17_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG18_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG18_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG19_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG19_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG20_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG20_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG21_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG21_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG22_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG22_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG23_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG23_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG24_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG24_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG25_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG25_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_CFG26_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_CFG26_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_VMEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_VMEM_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE1_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE1_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE1_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE1_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE1_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE1_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_REDUCE1_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_REDUCE1_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_CTRL_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_CTRL_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_ELEM_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_W_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_INF_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG1_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG2_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG3_t)==4);
    if(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PE1_DMA_OUTF_CFG4_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_0_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_0_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_1_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_1_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_2_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_2_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_3_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_3_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_4_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_4_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_6_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_6_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_7_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_7_t)==4);
    if(sizeof(DX_M1A_NPU0_PPU_CFG_9_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_PPU_CFG_9_t)==4);
    if(sizeof(DX_M1A_NPU0_CHECKSUM_t)!=4) cnt--;
    //assert(sizeof(DX_M1A_NPU0_CHECKSUM_t)==4);
    LOG_DBG(cnt);
    return cnt;
}

/* Register access API */
/* DX_M1A_SYSTEM.ID (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Id(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID : " << ((dxDX_M1A_SYSTEM_t*) base)->ID.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->ID.U;
}
void Write_Dx_m1a_system_Id(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->ID.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->ID.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.ID.RMAP_ID (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Id_RMAP_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.RMAP_ID : " << ((dxDX_M1A_SYSTEM_t*) base)->ID.RMAP_ID << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->ID.RMAP_ID;
}
void Write_Dx_m1a_system_Id_RMAP_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.RMAP_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->ID.RMAP_ID = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.ID.REVISION_ID (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Id_REVISION_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.REVISION_ID : " << ((dxDX_M1A_SYSTEM_t*) base)->ID.REVISION_ID << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->ID.REVISION_ID;
}
void Write_Dx_m1a_system_Id_REVISION_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.REVISION_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->ID.REVISION_ID = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.ID.NPU_ID (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Id_NPU_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.NPU_ID : " << ((dxDX_M1A_SYSTEM_t*) base)->ID.NPU_ID << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->ID.NPU_ID;
}
void Write_Dx_m1a_system_Id_NPU_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.NPU_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->ID.NPU_ID = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.ID.DEVICE_ID (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Id_DEVICE_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.DEVICE_ID : " << ((dxDX_M1A_SYSTEM_t*) base)->ID.DEVICE_ID << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->ID.DEVICE_ID;
}
void Write_Dx_m1a_system_Id_DEVICE_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_SYSTEM.ID.DEVICE_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->ID.DEVICE_ID = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.RUN_OPT (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Run_opt(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_SYSTEM.RUN_OPT : " << ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.U;
}
void Write_Dx_m1a_system_Run_opt(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_SYSTEM.RUN_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.RUN_OPT.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Run_opt_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_SYSTEM.RUN_OPT.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.RESERVED0;
}
void Write_Dx_m1a_system_Run_opt_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_SYSTEM.RUN_OPT.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.RUN_OPT.AUTORUN_EN (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Run_opt_AUTORUN_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_SYSTEM.RUN_OPT.AUTORUN_EN : " << ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.AUTORUN_EN << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.AUTORUN_EN;
}
void Write_Dx_m1a_system_Run_opt_AUTORUN_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_SYSTEM.RUN_OPT.AUTORUN_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RUN_OPT.AUTORUN_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.STATUS1 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Status1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_SYSTEM.STATUS1 : " << ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.U;
}
void Write_Dx_m1a_system_Status1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_SYSTEM.STATUS1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->STATUS1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.STATUS1.CMD_NUM (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Status1_CMD_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_SYSTEM.STATUS1.CMD_NUM : " << ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.CMD_NUM << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.CMD_NUM;
}
void Write_Dx_m1a_system_Status1_CMD_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_SYSTEM.STATUS1.CMD_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.CMD_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.STATUS1.ARGMAX_ID (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Status1_ARGMAX_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_SYSTEM.STATUS1.ARGMAX_ID : " << ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.ARGMAX_ID << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.ARGMAX_ID;
}
void Write_Dx_m1a_system_Status1_ARGMAX_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_SYSTEM.STATUS1.ARGMAX_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->STATUS1.ARGMAX_ID = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.STATUS2 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Status2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_SYSTEM.STATUS2 : " << ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.U;
}
void Write_Dx_m1a_system_Status2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_SYSTEM.STATUS2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->STATUS2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.STATUS2.BUSY (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Status2_BUSY(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_SYSTEM.STATUS2.BUSY : " << ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.BUSY << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.BUSY;
}
void Write_Dx_m1a_system_Status2_BUSY(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_SYSTEM.STATUS2.BUSY : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.BUSY = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.STATUS2.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Status2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_SYSTEM.STATUS2.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.RESERVED0;
}
void Write_Dx_m1a_system_Status2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_SYSTEM.STATUS2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->STATUS2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.NET_INFO (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Net_info(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_SYSTEM.NET_INFO : " << ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.U;
}
void Write_Dx_m1a_system_Net_info(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_SYSTEM.NET_INFO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.NET_INFO.LAST_CMD_NUM (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Net_info_LAST_CMD_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_SYSTEM.NET_INFO.LAST_CMD_NUM : " << ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.LAST_CMD_NUM << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.LAST_CMD_NUM;
}
void Write_Dx_m1a_system_Net_info_LAST_CMD_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_SYSTEM.NET_INFO.LAST_CMD_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.LAST_CMD_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.NET_INFO.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Net_info_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_SYSTEM.NET_INFO.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.RESERVED0;
}
void Write_Dx_m1a_system_Net_info_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_SYSTEM.NET_INFO.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->NET_INFO.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.U;
}
void Write_Dx_m1a_system_Irq_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_STATUS.STATUS_TILE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_STATUS_TILE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.STATUS_TILE : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.STATUS_TILE << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.STATUS_TILE;
}
void Write_Dx_m1a_system_Irq_status_STATUS_TILE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.STATUS_TILE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.STATUS_TILE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.STATUS_OP (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_STATUS_OP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.STATUS_OP : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.STATUS_OP << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.STATUS_OP;
}
void Write_Dx_m1a_system_Irq_status_STATUS_OP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.STATUS_OP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.STATUS_OP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_MEM_COLLISION (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_MEM_COLLISION(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_MEM_COLLISION : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_MEM_COLLISION << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_MEM_COLLISION;
}
void Write_Dx_m1a_system_Irq_status_IRQ_MEM_COLLISION(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_MEM_COLLISION : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_MEM_COLLISION = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_REACHED (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_CMD_REACHED(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_REACHED : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_CMD_REACHED << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_CMD_REACHED;
}
void Write_Dx_m1a_system_Irq_status_IRQ_CMD_REACHED(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_REACHED : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_CMD_REACHED = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_CKSUM (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_CMD_CKSUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_CKSUM : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_CMD_CKSUM << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_CMD_CKSUM;
}
void Write_Dx_m1a_system_Irq_status_IRQ_CMD_CKSUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_CKSUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_CMD_CKSUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_NPU_FIFO (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_NPU_FIFO(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_NPU_FIFO : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_NPU_FIFO << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_NPU_FIFO;
}
void Write_Dx_m1a_system_Irq_status_IRQ_NPU_FIFO(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_NPU_FIFO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_NPU_FIFO = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_CCLK (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_CCLK(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_CCLK : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_CCLK << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_CCLK;
}
void Write_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_CCLK(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_CCLK : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_CCLK = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_NCLK (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_NCLK(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_NCLK : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_NCLK << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_NCLK;
}
void Write_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_NCLK(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_NCLK : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_NCLK = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_ACLK (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_ACLK(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_ACLK : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_ACLK << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_ACLK;
}
void Write_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_ACLK(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_ACLK : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_DMA_FIFO_ACLK = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_OP (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_OP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_OP : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TIMEOUT_OP << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TIMEOUT_OP;
}
void Write_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_OP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_OP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TIMEOUT_OP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_DMA (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_DMA(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_DMA : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TIMEOUT_DMA << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TIMEOUT_DMA;
}
void Write_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_DMA(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_DMA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TIMEOUT_DMA = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_INPUT_DONE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_INPUT_DONE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_INPUT_DONE : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_INPUT_DONE << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_INPUT_DONE;
}
void Write_Dx_m1a_system_Irq_status_IRQ_INPUT_DONE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_INPUT_DONE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_INPUT_DONE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TILE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_TILE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TILE : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TILE << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TILE;
}
void Write_Dx_m1a_system_Irq_status_IRQ_TILE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TILE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_TILE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_STATUS.IRQ_FRAME (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_status_IRQ_FRAME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_FRAME : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_FRAME << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_FRAME;
}
void Write_Dx_m1a_system_Irq_status_IRQ_FRAME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_SYSTEM.IRQ_STATUS.IRQ_FRAME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_STATUS.IRQ_FRAME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.U;
}
void Write_Dx_m1a_system_Irq_set(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_SET.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.RESERVED0;
}
void Write_Dx_m1a_system_Irq_set_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_MEM_COLLISION_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_MEM_COLLISION_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_MEM_COLLISION_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_MEM_COLLISION_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_MEM_COLLISION_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_MEM_COLLISION_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_MEM_COLLISION_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_MEM_COLLISION_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_REACHED_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_CMD_REACHED_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_REACHED_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_CMD_REACHED_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_CMD_REACHED_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_CMD_REACHED_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_REACHED_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_CMD_REACHED_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_CKSUM_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_CMD_CKSUM_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_CKSUM_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_CMD_CKSUM_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_CMD_CKSUM_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_CMD_CKSUM_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_CKSUM_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_CMD_CKSUM_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_NPU_FIFO_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_NPU_FIFO_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_NPU_FIFO_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_NPU_FIFO_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_NPU_FIFO_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_NPU_FIFO_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_NPU_FIFO_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_NPU_FIFO_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_DMA_FIFO_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_DMA_FIFO_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_DMA_FIFO_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_DMA_FIFO_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_DMA_FIFO_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_DMA_FIFO_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_DMA_FIFO_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_DMA_FIFO_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_OP_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_OP_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_OP_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TIMEOUT_OP_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TIMEOUT_OP_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_OP_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_OP_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TIMEOUT_OP_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_DMA_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_DMA_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_DMA_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TIMEOUT_DMA_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TIMEOUT_DMA_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_DMA_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_DMA_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TIMEOUT_DMA_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_INPUT_DONE_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_INPUT_DONE_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_INPUT_DONE_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_INPUT_DONE_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_INPUT_DONE_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_INPUT_DONE_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_INPUT_DONE_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_INPUT_DONE_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_TILE_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_TILE_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_TILE_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TILE_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TILE_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_TILE_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_TILE_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_TILE_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_SET.IRQ_FRAME_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_set_IRQ_FRAME_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_FRAME_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_FRAME_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_FRAME_SET;
}
void Write_Dx_m1a_system_Irq_set_IRQ_FRAME_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_SYSTEM.IRQ_SET.IRQ_FRAME_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_SET.IRQ_FRAME_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_CNT0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_SYSTEM.IRQ_CNT0 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.U;
}
void Write_Dx_m1a_system_Irq_cnt0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_SYSTEM.IRQ_CNT0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_CNT0.IRQ_CNT_NPU_NORMAL (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt0_IRQ_CNT_NPU_NORMAL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_SYSTEM.IRQ_CNT0.IRQ_CNT_NPU_NORMAL : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.IRQ_CNT_NPU_NORMAL << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.IRQ_CNT_NPU_NORMAL;
}
void Write_Dx_m1a_system_Irq_cnt0_IRQ_CNT_NPU_NORMAL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_SYSTEM.IRQ_CNT0.IRQ_CNT_NPU_NORMAL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT0.IRQ_CNT_NPU_NORMAL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_CNT1 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_SYSTEM.IRQ_CNT1 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.U;
}
void Write_Dx_m1a_system_Irq_cnt1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_SYSTEM.IRQ_CNT1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt1_IRQ_CNT_NPU_INPUT_DONE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_SYSTEM.IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE;
}
void Write_Dx_m1a_system_Irq_cnt1_IRQ_CNT_NPU_INPUT_DONE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_SYSTEM.IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_CNT2 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_SYSTEM.IRQ_CNT2 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.U;
}
void Write_Dx_m1a_system_Irq_cnt2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_SYSTEM.IRQ_CNT2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt2_IRQ_CNT_NPU_ABNORMAL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_SYSTEM.IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL;
}
void Write_Dx_m1a_system_Irq_cnt2_IRQ_CNT_NPU_ABNORMAL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_SYSTEM.IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_CNT3 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_SYSTEM.IRQ_CNT3 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.U;
}
void Write_Dx_m1a_system_Irq_cnt3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_SYSTEM.IRQ_CNT3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_CNT3.IRQ_CNT_CPU_FINISH (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt3_IRQ_CNT_CPU_FINISH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_SYSTEM.IRQ_CNT3.IRQ_CNT_CPU_FINISH : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.IRQ_CNT_CPU_FINISH << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.IRQ_CNT_CPU_FINISH;
}
void Write_Dx_m1a_system_Irq_cnt3_IRQ_CNT_CPU_FINISH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_SYSTEM.IRQ_CNT3.IRQ_CNT_CPU_FINISH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT3.IRQ_CNT_CPU_FINISH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_CNT4 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_SYSTEM.IRQ_CNT4 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.U;
}
void Write_Dx_m1a_system_Irq_cnt4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_SYSTEM.IRQ_CNT4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_CNT4.IRQ_CNT_CPU_INIT (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_cnt4_IRQ_CNT_CPU_INIT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_SYSTEM.IRQ_CNT4.IRQ_CNT_CPU_INIT : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.IRQ_CNT_CPU_INIT << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.IRQ_CNT_CPU_INIT;
}
void Write_Dx_m1a_system_Irq_cnt4_IRQ_CNT_CPU_INIT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_SYSTEM.IRQ_CNT4.IRQ_CNT_CPU_INIT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_CNT4.IRQ_CNT_CPU_INIT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IN_FEATURE_BASE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_In_feature_base(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_SYSTEM.IN_FEATURE_BASE : " << ((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.U;
}
void Write_Dx_m1a_system_In_feature_base(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_SYSTEM.IN_FEATURE_BASE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IN_FEATURE_BASE.IN_FEATURE_OFFSET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_In_feature_base_IN_FEATURE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_SYSTEM.IN_FEATURE_BASE.IN_FEATURE_OFFSET : " << ((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.IN_FEATURE_OFFSET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.IN_FEATURE_OFFSET;
}
void Write_Dx_m1a_system_In_feature_base_IN_FEATURE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_SYSTEM.IN_FEATURE_BASE.IN_FEATURE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IN_FEATURE_BASE.IN_FEATURE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.OUT_FEATURE_BASE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Out_feature_base(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_SYSTEM.OUT_FEATURE_BASE : " << ((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.U;
}
void Write_Dx_m1a_system_Out_feature_base(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_SYSTEM.OUT_FEATURE_BASE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.OUT_FEATURE_BASE.OUT_FEATURE_OFFSET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Out_feature_base_OUT_FEATURE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_SYSTEM.OUT_FEATURE_BASE.OUT_FEATURE_OFFSET : " << ((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.OUT_FEATURE_OFFSET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.OUT_FEATURE_OFFSET;
}
void Write_Dx_m1a_system_Out_feature_base_OUT_FEATURE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_SYSTEM.OUT_FEATURE_BASE.OUT_FEATURE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->OUT_FEATURE_BASE.OUT_FEATURE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.WEIGHT_BASE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Weight_base(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_SYSTEM.WEIGHT_BASE : " << ((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.U;
}
void Write_Dx_m1a_system_Weight_base(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_SYSTEM.WEIGHT_BASE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.WEIGHT_BASE.WEIGHT_OFFSET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Weight_base_WEIGHT_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_SYSTEM.WEIGHT_BASE.WEIGHT_OFFSET : " << ((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.WEIGHT_OFFSET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.WEIGHT_OFFSET;
}
void Write_Dx_m1a_system_Weight_base_WEIGHT_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_SYSTEM.WEIGHT_BASE.WEIGHT_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->WEIGHT_BASE.WEIGHT_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_TIMER_DMA (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_timer_dma(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_SYSTEM.IRQ_TIMER_DMA : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.U;
}
void Write_Dx_m1a_system_Irq_timer_dma(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_SYSTEM.IRQ_TIMER_DMA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_TIMER_DMA.IRQ_TIMER_DMA (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_timer_dma_IRQ_TIMER_DMA(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_SYSTEM.IRQ_TIMER_DMA.IRQ_TIMER_DMA : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.IRQ_TIMER_DMA << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.IRQ_TIMER_DMA;
}
void Write_Dx_m1a_system_Irq_timer_dma_IRQ_TIMER_DMA(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_SYSTEM.IRQ_TIMER_DMA.IRQ_TIMER_DMA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_DMA.IRQ_TIMER_DMA = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_TIMER_OP (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_timer_op(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_SYSTEM.IRQ_TIMER_OP : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.U;
}
void Write_Dx_m1a_system_Irq_timer_op(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_SYSTEM.IRQ_TIMER_OP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_TIMER_OP.IRQ_TIMER_OP (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_timer_op_IRQ_TIMER_OP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_SYSTEM.IRQ_TIMER_OP.IRQ_TIMER_OP : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.IRQ_TIMER_OP << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.IRQ_TIMER_OP;
}
void Write_Dx_m1a_system_Irq_timer_op_IRQ_TIMER_OP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_SYSTEM.IRQ_TIMER_OP.IRQ_TIMER_OP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_TIMER_OP.IRQ_TIMER_OP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CMD (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cmd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_SYSTEM.CMD : " << ((dxDX_M1A_SYSTEM_t*) base)->CMD.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CMD.U;
}
void Write_Dx_m1a_system_Cmd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_SYSTEM.CMD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CMD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->CMD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.CMD.START (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cmd_START(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_SYSTEM.CMD.START : " << ((dxDX_M1A_SYSTEM_t*) base)->CMD.START << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CMD.START;
}
void Write_Dx_m1a_system_Cmd_START(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_SYSTEM.CMD.START : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CMD.START = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CMD.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cmd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_SYSTEM.CMD.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->CMD.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CMD.RESERVED0;
}
void Write_Dx_m1a_system_Cmd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_SYSTEM.CMD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CMD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_SYSTEM.SWREG0 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG0.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG0.U;
}
void Write_Dx_m1a_system_Swreg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_SYSTEM.SWREG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG0.SWREG0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg0_SWREG0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_SYSTEM.SWREG0.SWREG0 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG0.SWREG0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG0.SWREG0;
}
void Write_Dx_m1a_system_Swreg0_SWREG0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_SYSTEM.SWREG0.SWREG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG0.SWREG0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG1 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_SYSTEM.SWREG1 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG1.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG1.U;
}
void Write_Dx_m1a_system_Swreg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_SYSTEM.SWREG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG1.SWREG1 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg1_SWREG1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_SYSTEM.SWREG1.SWREG1 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG1.SWREG1 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG1.SWREG1;
}
void Write_Dx_m1a_system_Swreg1_SWREG1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_SYSTEM.SWREG1.SWREG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG1.SWREG1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG2 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_SYSTEM.SWREG2 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG2.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG2.U;
}
void Write_Dx_m1a_system_Swreg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_SYSTEM.SWREG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG2.SWREG2 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg2_SWREG2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_SYSTEM.SWREG2.SWREG2 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG2.SWREG2 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG2.SWREG2;
}
void Write_Dx_m1a_system_Swreg2_SWREG2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_SYSTEM.SWREG2.SWREG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG2.SWREG2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG3 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_SYSTEM.SWREG3 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG3.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG3.U;
}
void Write_Dx_m1a_system_Swreg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_SYSTEM.SWREG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG3.SWREG3 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg3_SWREG3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_SYSTEM.SWREG3.SWREG3 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG3.SWREG3 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG3.SWREG3;
}
void Write_Dx_m1a_system_Swreg3_SWREG3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_SYSTEM.SWREG3.SWREG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG3.SWREG3 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_ext_clr_opt(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.U;
}
void Write_Dx_m1a_system_Irq_ext_clr_opt(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_ext_clr_opt_IRQ_EXT_CLR_OPT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT;
}
void Write_Dx_m1a_system_Irq_ext_clr_opt_IRQ_EXT_CLR_OPT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Irq_ext_clr_opt_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.RESERVED0;
}
void Write_Dx_m1a_system_Irq_ext_clr_opt_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->IRQ_EXT_CLR_OPT.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.RSV0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Rsv0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_SYSTEM.RSV0 : " << ((dxDX_M1A_SYSTEM_t*) base)->RSV0.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RSV0.U;
}
void Write_Dx_m1a_system_Rsv0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_SYSTEM.RSV0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RSV0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->RSV0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.RSV0.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Rsv0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_SYSTEM.RSV0.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->RSV0.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RSV0.RESERVED0;
}
void Write_Dx_m1a_system_Rsv0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_SYSTEM.RSV0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RSV0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.RSV1 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Rsv1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_SYSTEM.RSV1 : " << ((dxDX_M1A_SYSTEM_t*) base)->RSV1.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RSV1.U;
}
void Write_Dx_m1a_system_Rsv1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_SYSTEM.RSV1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RSV1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->RSV1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.RSV1.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Rsv1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_SYSTEM.RSV1.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->RSV1.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RSV1.RESERVED0;
}
void Write_Dx_m1a_system_Rsv1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_SYSTEM.RSV1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RSV1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.RSV2 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Rsv2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_SYSTEM.RSV2 : " << ((dxDX_M1A_SYSTEM_t*) base)->RSV2.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RSV2.U;
}
void Write_Dx_m1a_system_Rsv2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_SYSTEM.RSV2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RSV2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->RSV2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.RSV2.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Rsv2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_SYSTEM.RSV2.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->RSV2.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->RSV2.RESERVED0;
}
void Write_Dx_m1a_system_Rsv2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_SYSTEM.RSV2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->RSV2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_STATUS (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.U;
}
void Write_Dx_m1a_system_Cpu_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.CPU_STATUS.CPU_LOCKUP (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_status_CPU_LOCKUP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_LOCKUP : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_LOCKUP << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_LOCKUP;
}
void Write_Dx_m1a_system_Cpu_status_CPU_LOCKUP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_LOCKUP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_LOCKUP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_STATUS.CPU_HALTED (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_status_CPU_HALTED(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_HALTED : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_HALTED << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_HALTED;
}
void Write_Dx_m1a_system_Cpu_status_CPU_HALTED(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_HALTED : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_HALTED = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPDEEP (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_status_CPU_SLEEPDEEP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPDEEP : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_SLEEPDEEP << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_SLEEPDEEP;
}
void Write_Dx_m1a_system_Cpu_status_CPU_SLEEPDEEP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPDEEP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_SLEEPDEEP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPING (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_status_CPU_SLEEPING(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPING : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_SLEEPING << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_SLEEPING;
}
void Write_Dx_m1a_system_Cpu_status_CPU_SLEEPING(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPING : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.CPU_SLEEPING = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_STATUS.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.RESERVED0;
}
void Write_Dx_m1a_system_Cpu_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_SYSTEM.CPU_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_set(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.U;
}
void Write_Dx_m1a_system_Cpu_irq_set(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_INIT_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_INIT_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_INIT_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.IRQ_CPU_INIT_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.IRQ_CPU_INIT_SET;
}
void Write_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_INIT_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_INIT_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.IRQ_CPU_INIT_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_FINISH_SET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_FINISH_SET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_FINISH_SET : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.IRQ_CPU_FINISH_SET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.IRQ_CPU_FINISH_SET;
}
void Write_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_FINISH_SET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_FINISH_SET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.IRQ_CPU_FINISH_SET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_SET.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_set_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.RESERVED0;
}
void Write_Dx_m1a_system_Cpu_irq_set_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_SYSTEM.CPU_IRQ_SET.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_SET.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_STATUS (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.U;
}
void Write_Dx_m1a_system_Cpu_irq_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_INIT (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_INIT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_INIT : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.IRQ_CPU_INIT << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.IRQ_CPU_INIT;
}
void Write_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_INIT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_INIT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.IRQ_CPU_INIT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_FINISH (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_FINISH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_FINISH : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.IRQ_CPU_FINISH << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.IRQ_CPU_FINISH;
}
void Write_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_FINISH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_FINISH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.IRQ_CPU_FINISH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_STATUS.CPU_BUSY (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_status_CPU_BUSY(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.CPU_BUSY : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.CPU_BUSY << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.CPU_BUSY;
}
void Write_Dx_m1a_system_Cpu_irq_status_CPU_BUSY(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.CPU_BUSY : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.CPU_BUSY = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_IRQ_STATUS.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_irq_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.RESERVED0;
}
void Write_Dx_m1a_system_Cpu_irq_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_SYSTEM.CPU_IRQ_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_IRQ_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_START (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_start(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_SYSTEM.CPU_START : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.U;
}
void Write_Dx_m1a_system_Cpu_start(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_SYSTEM.CPU_START : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->CPU_START.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.CPU_START.CPU_START (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_start_CPU_START(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_SYSTEM.CPU_START.CPU_START : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.CPU_START << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.CPU_START;
}
void Write_Dx_m1a_system_Cpu_start_CPU_START(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_SYSTEM.CPU_START.CPU_START : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.CPU_START = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.CPU_START.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Cpu_start_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_SYSTEM.CPU_START.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.RESERVED0;
}
void Write_Dx_m1a_system_Cpu_start_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_SYSTEM.CPU_START.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->CPU_START.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_filter_info(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.U;
}
void Write_Dx_m1a_system_Ppu_out_filter_info(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM;
}
void Write_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_WNUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM;
}
void Write_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_WNUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_BUFSEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL;
}
void Write_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_BUFSEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_filter_info_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.RESERVED0;
}
void Write_Dx_m1a_system_Ppu_out_filter_info_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FILTER_INFO.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_feature_info(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.U;
}
void Write_Dx_m1a_system_Ppu_out_feature_info(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_feature_info_PPU_OUT_FEATURE_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM;
}
void Write_Dx_m1a_system_Ppu_out_feature_info_PPU_OUT_FEATURE_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.RESERVED0 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_feature_info_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.RESERVED0 : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.RESERVED0 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.RESERVED0;
}
void Write_Dx_m1a_system_Ppu_out_feature_info_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_INFO.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_feature_base(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.U;
}
void Write_Dx_m1a_system_Ppu_out_feature_base(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Ppu_out_feature_base_PPU_OUT_FEATURE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET : " << ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET;
}
void Write_Dx_m1a_system_Ppu_out_feature_base_PPU_OUT_FEATURE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG4 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_SYSTEM.SWREG4 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG4.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG4.U;
}
void Write_Dx_m1a_system_Swreg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_SYSTEM.SWREG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG4.SWREG4 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg4_SWREG4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_SYSTEM.SWREG4.SWREG4 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG4.SWREG4 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG4.SWREG4;
}
void Write_Dx_m1a_system_Swreg4_SWREG4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_SYSTEM.SWREG4.SWREG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG4.SWREG4 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG5 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_SYSTEM.SWREG5 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG5.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG5.U;
}
void Write_Dx_m1a_system_Swreg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_SYSTEM.SWREG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG5.SWREG5 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg5_SWREG5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_SYSTEM.SWREG5.SWREG5 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG5.SWREG5 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG5.SWREG5;
}
void Write_Dx_m1a_system_Swreg5_SWREG5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_SYSTEM.SWREG5.SWREG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG5.SWREG5 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG6 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_SYSTEM.SWREG6 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG6.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG6.U;
}
void Write_Dx_m1a_system_Swreg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_SYSTEM.SWREG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG6.SWREG6 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg6_SWREG6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_SYSTEM.SWREG6.SWREG6 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG6.SWREG6 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG6.SWREG6;
}
void Write_Dx_m1a_system_Swreg6_SWREG6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_SYSTEM.SWREG6.SWREG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG6.SWREG6 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG7 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_SYSTEM.SWREG7 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG7.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG7.U;
}
void Write_Dx_m1a_system_Swreg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_SYSTEM.SWREG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG7.SWREG7 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg7_SWREG7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_SYSTEM.SWREG7.SWREG7 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG7.SWREG7 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG7.SWREG7;
}
void Write_Dx_m1a_system_Swreg7_SWREG7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_SYSTEM.SWREG7.SWREG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG7.SWREG7 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG8 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_SYSTEM.SWREG8 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG8.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG8.U;
}
void Write_Dx_m1a_system_Swreg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_SYSTEM.SWREG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG8.SWREG8 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg8_SWREG8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_SYSTEM.SWREG8.SWREG8 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG8.SWREG8 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG8.SWREG8;
}
void Write_Dx_m1a_system_Swreg8_SWREG8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_SYSTEM.SWREG8.SWREG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG8.SWREG8 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG9 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_SYSTEM.SWREG9 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG9.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG9.U;
}
void Write_Dx_m1a_system_Swreg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_SYSTEM.SWREG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG9.SWREG9 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg9_SWREG9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_SYSTEM.SWREG9.SWREG9 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG9.SWREG9 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG9.SWREG9;
}
void Write_Dx_m1a_system_Swreg9_SWREG9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_SYSTEM.SWREG9.SWREG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG9.SWREG9 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG10 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_SYSTEM.SWREG10 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG10.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG10.U;
}
void Write_Dx_m1a_system_Swreg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_SYSTEM.SWREG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG10.SWREG10 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg10_SWREG10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_SYSTEM.SWREG10.SWREG10 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG10.SWREG10 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG10.SWREG10;
}
void Write_Dx_m1a_system_Swreg10_SWREG10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_SYSTEM.SWREG10.SWREG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG10.SWREG10 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG11 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_SYSTEM.SWREG11 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG11.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG11.U;
}
void Write_Dx_m1a_system_Swreg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_SYSTEM.SWREG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG11.SWREG11 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg11_SWREG11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_SYSTEM.SWREG11.SWREG11 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG11.SWREG11 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG11.SWREG11;
}
void Write_Dx_m1a_system_Swreg11_SWREG11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_SYSTEM.SWREG11.SWREG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG11.SWREG11 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG12 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_SYSTEM.SWREG12 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG12.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG12.U;
}
void Write_Dx_m1a_system_Swreg12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_SYSTEM.SWREG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG12.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG12.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG12.SWREG12 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg12_SWREG12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_SYSTEM.SWREG12.SWREG12 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG12.SWREG12 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG12.SWREG12;
}
void Write_Dx_m1a_system_Swreg12_SWREG12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_SYSTEM.SWREG12.SWREG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG12.SWREG12 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG13 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_SYSTEM.SWREG13 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG13.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG13.U;
}
void Write_Dx_m1a_system_Swreg13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_SYSTEM.SWREG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG13.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG13.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG13.SWREG13 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg13_SWREG13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_SYSTEM.SWREG13.SWREG13 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG13.SWREG13 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG13.SWREG13;
}
void Write_Dx_m1a_system_Swreg13_SWREG13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_SYSTEM.SWREG13.SWREG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG13.SWREG13 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG14 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_SYSTEM.SWREG14 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG14.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG14.U;
}
void Write_Dx_m1a_system_Swreg14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_SYSTEM.SWREG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG14.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG14.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG14.SWREG14 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg14_SWREG14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_SYSTEM.SWREG14.SWREG14 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG14.SWREG14 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG14.SWREG14;
}
void Write_Dx_m1a_system_Swreg14_SWREG14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_SYSTEM.SWREG14.SWREG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG14.SWREG14 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_SYSTEM.SWREG15 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_SYSTEM.SWREG15 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG15.U << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG15.U;
}
void Write_Dx_m1a_system_Swreg15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_SYSTEM.SWREG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG15.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_SYSTEM_t*) base)->SWREG15.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_SYSTEM.SWREG15.SWREG15 (Category: SYSTEM) */
uint32_t Read_Dx_m1a_system_Swreg15_SWREG15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_SYSTEM.SWREG15.SWREG15 : " << ((dxDX_M1A_SYSTEM_t*) base)->SWREG15.SWREG15 << std::endl;
    return ((dxDX_M1A_SYSTEM_t*) base)->SWREG15.SWREG15;
}
void Write_Dx_m1a_system_Swreg15_SWREG15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_SYSTEM_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_SYSTEM.SWREG15.SWREG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_SYSTEM_t*) base)->SWREG15.SWREG15 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP0.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP0.U;
}
void Write_Dx_m1a_debug_Stamp0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP0.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP0.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP0.RESERVED0;
}
void Write_Dx_m1a_debug_Stamp0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP0.STAMP_OPT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp0_STAMP_OPT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0.STAMP_OPT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP0.STAMP_OPT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP0.STAMP_OPT;
}
void Write_Dx_m1a_debug_Stamp0_STAMP_OPT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0.STAMP_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP0.STAMP_OPT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP0.STAMP_EN (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp0_STAMP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0.STAMP_EN : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP0.STAMP_EN << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP0.STAMP_EN;
}
void Write_Dx_m1a_debug_Stamp0_STAMP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DEBUG.STAMP0.STAMP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP0.STAMP_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DEBUG.STAMP1 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP1.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP1.U;
}
void Write_Dx_m1a_debug_Stamp1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DEBUG.STAMP1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP1.TILE_IDX (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp1_TILE_IDX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DEBUG.STAMP1.TILE_IDX : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP1.TILE_IDX << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP1.TILE_IDX;
}
void Write_Dx_m1a_debug_Stamp1_TILE_IDX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DEBUG.STAMP1.TILE_IDX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP1.TILE_IDX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP1.LAYER_IDX (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp1_LAYER_IDX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DEBUG.STAMP1.LAYER_IDX : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP1.LAYER_IDX << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP1.LAYER_IDX;
}
void Write_Dx_m1a_debug_Stamp1_LAYER_IDX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DEBUG.STAMP1.LAYER_IDX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP1.LAYER_IDX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP2 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DEBUG.STAMP2 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP2.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP2.U;
}
void Write_Dx_m1a_debug_Stamp2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DEBUG.STAMP2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP2.CLK_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp2_CLK_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DEBUG.STAMP2.CLK_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP2.CLK_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP2.CLK_CNT;
}
void Write_Dx_m1a_debug_Stamp2_CLK_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DEBUG.STAMP2.CLK_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP2.CLK_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP3 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DEBUG.STAMP3 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP3.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP3.U;
}
void Write_Dx_m1a_debug_Stamp3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DEBUG.STAMP3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP3.OP_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp3_OP_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DEBUG.STAMP3.OP_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP3.OP_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP3.OP_CNT;
}
void Write_Dx_m1a_debug_Stamp3_OP_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DEBUG.STAMP3.OP_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP3.OP_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP4 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DEBUG.STAMP4 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP4.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP4.U;
}
void Write_Dx_m1a_debug_Stamp4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DEBUG.STAMP4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP4.DMA_RD_WR_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp4_DMA_RD_WR_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DEBUG.STAMP4.DMA_RD_WR_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP4.DMA_RD_WR_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP4.DMA_RD_WR_CNT;
}
void Write_Dx_m1a_debug_Stamp4_DMA_RD_WR_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DEBUG.STAMP4.DMA_RD_WR_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP4.DMA_RD_WR_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP5 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DEBUG.STAMP5 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP5.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP5.U;
}
void Write_Dx_m1a_debug_Stamp5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DEBUG.STAMP5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP5.DMA_RD_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp5_DMA_RD_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DEBUG.STAMP5.DMA_RD_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP5.DMA_RD_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP5.DMA_RD_CNT;
}
void Write_Dx_m1a_debug_Stamp5_DMA_RD_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DEBUG.STAMP5.DMA_RD_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP5.DMA_RD_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP6 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DEBUG.STAMP6 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP6.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP6.U;
}
void Write_Dx_m1a_debug_Stamp6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DEBUG.STAMP6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP6.DMA_WR_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp6_DMA_WR_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DEBUG.STAMP6.DMA_WR_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP6.DMA_WR_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP6.DMA_WR_CNT;
}
void Write_Dx_m1a_debug_Stamp6_DMA_WR_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DEBUG.STAMP6.DMA_WR_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP6.DMA_WR_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP7 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DEBUG.STAMP7 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP7.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP7.U;
}
void Write_Dx_m1a_debug_Stamp7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DEBUG.STAMP7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP7.HIDE_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp7_HIDE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DEBUG.STAMP7.HIDE_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP7.HIDE_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP7.HIDE_CNT;
}
void Write_Dx_m1a_debug_Stamp7_HIDE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DEBUG.STAMP7.HIDE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP7.HIDE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP8 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DEBUG.STAMP8 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP8.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP8.U;
}
void Write_Dx_m1a_debug_Stamp8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DEBUG.STAMP8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP8.WAIT_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp8_WAIT_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DEBUG.STAMP8.WAIT_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP8.WAIT_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP8.WAIT_CNT;
}
void Write_Dx_m1a_debug_Stamp8_WAIT_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DEBUG.STAMP8.WAIT_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP8.WAIT_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP9 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DEBUG.STAMP9 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP9.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP9.U;
}
void Write_Dx_m1a_debug_Stamp9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DEBUG.STAMP9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP9.RMAP_RD_ONLY_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp9_RMAP_RD_ONLY_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DEBUG.STAMP9.RMAP_RD_ONLY_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP9.RMAP_RD_ONLY_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP9.RMAP_RD_ONLY_CNT;
}
void Write_Dx_m1a_debug_Stamp9_RMAP_RD_ONLY_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DEBUG.STAMP9.RMAP_RD_ONLY_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP9.RMAP_RD_ONLY_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP10 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DEBUG.STAMP10 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP10.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP10.U;
}
void Write_Dx_m1a_debug_Stamp10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DEBUG.STAMP10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP10.CLK_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp10_CLK_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DEBUG.STAMP10.CLK_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP10.CLK_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP10.CLK_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp10_CLK_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DEBUG.STAMP10.CLK_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP10.CLK_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP11 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DEBUG.STAMP11 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP11.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP11.U;
}
void Write_Dx_m1a_debug_Stamp11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DEBUG.STAMP11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP11.OP_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp11_OP_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DEBUG.STAMP11.OP_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP11.OP_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP11.OP_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp11_OP_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DEBUG.STAMP11.OP_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP11.OP_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP12 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DEBUG.STAMP12 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP12.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP12.U;
}
void Write_Dx_m1a_debug_Stamp12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DEBUG.STAMP12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP12.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP12.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP12.DMA_RD_WR_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp12_DMA_RD_WR_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DEBUG.STAMP12.DMA_RD_WR_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP12.DMA_RD_WR_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP12.DMA_RD_WR_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp12_DMA_RD_WR_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DEBUG.STAMP12.DMA_RD_WR_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP12.DMA_RD_WR_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP13 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DEBUG.STAMP13 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP13.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP13.U;
}
void Write_Dx_m1a_debug_Stamp13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DEBUG.STAMP13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP13.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP13.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP13.DMA_RD_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp13_DMA_RD_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DEBUG.STAMP13.DMA_RD_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP13.DMA_RD_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP13.DMA_RD_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp13_DMA_RD_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DEBUG.STAMP13.DMA_RD_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP13.DMA_RD_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP14 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DEBUG.STAMP14 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP14.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP14.U;
}
void Write_Dx_m1a_debug_Stamp14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DEBUG.STAMP14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP14.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP14.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP14.DMA_WR_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp14_DMA_WR_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DEBUG.STAMP14.DMA_WR_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP14.DMA_WR_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP14.DMA_WR_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp14_DMA_WR_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DEBUG.STAMP14.DMA_WR_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP14.DMA_WR_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP15 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DEBUG.STAMP15 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP15.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP15.U;
}
void Write_Dx_m1a_debug_Stamp15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DEBUG.STAMP15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP15.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP15.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP15.HIDE_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp15_HIDE_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DEBUG.STAMP15.HIDE_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP15.HIDE_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP15.HIDE_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp15_HIDE_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DEBUG.STAMP15.HIDE_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP15.HIDE_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP16 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DEBUG.STAMP16 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP16.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP16.U;
}
void Write_Dx_m1a_debug_Stamp16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DEBUG.STAMP16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP16.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP16.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP16.WAIT_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp16_WAIT_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DEBUG.STAMP16.WAIT_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP16.WAIT_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP16.WAIT_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp16_WAIT_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DEBUG.STAMP16.WAIT_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP16.WAIT_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.STAMP17 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DEBUG.STAMP17 : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP17.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP17.U;
}
void Write_Dx_m1a_debug_Stamp17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DEBUG.STAMP17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP17.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->STAMP17.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.STAMP17.RMAP_RD_ONLY_CNT_SEL (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Stamp17_RMAP_RD_ONLY_CNT_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DEBUG.STAMP17.RMAP_RD_ONLY_CNT_SEL : " << ((dxDX_M1A_DEBUG_t*) base)->STAMP17.RMAP_RD_ONLY_CNT_SEL << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->STAMP17.RMAP_RD_ONLY_CNT_SEL;
}
void Write_Dx_m1a_debug_Stamp17_RMAP_RD_ONLY_CNT_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DEBUG.STAMP17.RMAP_RD_ONLY_CNT_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->STAMP17.RMAP_RD_ONLY_CNT_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE0_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe0_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DEBUG.FSM_PE0_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.U;
}
void Write_Dx_m1a_debug_Fsm_pe0_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DEBUG.FSM_PE0_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE0_RD.FSM_PE0_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe0_rd_FSM_PE0_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DEBUG.FSM_PE0_RD.FSM_PE0_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.FSM_PE0_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.FSM_PE0_RD;
}
void Write_Dx_m1a_debug_Fsm_pe0_rd_FSM_PE0_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DEBUG.FSM_PE0_RD.FSM_PE0_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.FSM_PE0_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE0_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe0_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DEBUG.FSM_PE0_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe0_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DEBUG.FSM_PE0_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE0_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe0_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DEBUG.FSM_PE0_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.U;
}
void Write_Dx_m1a_debug_Fsm_pe0_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DEBUG.FSM_PE0_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE0_WR.FSM_PE0_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe0_wr_FSM_PE0_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DEBUG.FSM_PE0_WR.FSM_PE0_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.FSM_PE0_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.FSM_PE0_WR;
}
void Write_Dx_m1a_debug_Fsm_pe0_wr_FSM_PE0_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DEBUG.FSM_PE0_WR.FSM_PE0_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.FSM_PE0_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE0_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe0_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DEBUG.FSM_PE0_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe0_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DEBUG.FSM_PE0_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE0_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE1_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe1_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DEBUG.FSM_PE1_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.U;
}
void Write_Dx_m1a_debug_Fsm_pe1_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DEBUG.FSM_PE1_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE1_RD.FSM_PE1_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe1_rd_FSM_PE1_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DEBUG.FSM_PE1_RD.FSM_PE1_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.FSM_PE1_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.FSM_PE1_RD;
}
void Write_Dx_m1a_debug_Fsm_pe1_rd_FSM_PE1_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DEBUG.FSM_PE1_RD.FSM_PE1_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.FSM_PE1_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE1_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe1_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DEBUG.FSM_PE1_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe1_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DEBUG.FSM_PE1_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE1_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe1_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DEBUG.FSM_PE1_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.U;
}
void Write_Dx_m1a_debug_Fsm_pe1_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DEBUG.FSM_PE1_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE1_WR.FSM_PE1_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe1_wr_FSM_PE1_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DEBUG.FSM_PE1_WR.FSM_PE1_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.FSM_PE1_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.FSM_PE1_WR;
}
void Write_Dx_m1a_debug_Fsm_pe1_wr_FSM_PE1_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DEBUG.FSM_PE1_WR.FSM_PE1_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.FSM_PE1_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE1_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe1_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DEBUG.FSM_PE1_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe1_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DEBUG.FSM_PE1_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE1_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE2_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe2_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DEBUG.FSM_PE2_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.U;
}
void Write_Dx_m1a_debug_Fsm_pe2_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DEBUG.FSM_PE2_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE2_RD.FSM_PE2_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe2_rd_FSM_PE2_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DEBUG.FSM_PE2_RD.FSM_PE2_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.FSM_PE2_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.FSM_PE2_RD;
}
void Write_Dx_m1a_debug_Fsm_pe2_rd_FSM_PE2_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DEBUG.FSM_PE2_RD.FSM_PE2_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.FSM_PE2_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE2_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe2_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DEBUG.FSM_PE2_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe2_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DEBUG.FSM_PE2_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE2_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe2_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DEBUG.FSM_PE2_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.U;
}
void Write_Dx_m1a_debug_Fsm_pe2_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DEBUG.FSM_PE2_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE2_WR.FSM_PE2_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe2_wr_FSM_PE2_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DEBUG.FSM_PE2_WR.FSM_PE2_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.FSM_PE2_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.FSM_PE2_WR;
}
void Write_Dx_m1a_debug_Fsm_pe2_wr_FSM_PE2_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DEBUG.FSM_PE2_WR.FSM_PE2_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.FSM_PE2_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE2_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe2_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DEBUG.FSM_PE2_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe2_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DEBUG.FSM_PE2_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE2_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE3_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe3_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DEBUG.FSM_PE3_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.U;
}
void Write_Dx_m1a_debug_Fsm_pe3_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DEBUG.FSM_PE3_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE3_RD.FSM_PE3_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe3_rd_FSM_PE3_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DEBUG.FSM_PE3_RD.FSM_PE3_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.FSM_PE3_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.FSM_PE3_RD;
}
void Write_Dx_m1a_debug_Fsm_pe3_rd_FSM_PE3_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DEBUG.FSM_PE3_RD.FSM_PE3_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.FSM_PE3_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE3_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe3_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DEBUG.FSM_PE3_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe3_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DEBUG.FSM_PE3_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE3_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe3_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DEBUG.FSM_PE3_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.U;
}
void Write_Dx_m1a_debug_Fsm_pe3_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DEBUG.FSM_PE3_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_PE3_WR.FSM_PE3_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe3_wr_FSM_PE3_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DEBUG.FSM_PE3_WR.FSM_PE3_WR : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.FSM_PE3_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.FSM_PE3_WR;
}
void Write_Dx_m1a_debug_Fsm_pe3_wr_FSM_PE3_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DEBUG.FSM_PE3_WR.FSM_PE3_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.FSM_PE3_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_PE3_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_pe3_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DEBUG.FSM_PE3_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_pe3_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DEBUG.FSM_PE3_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_PE3_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.U;
}
void Write_Dx_m1a_debug_Dma_cmd_arb(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMD_ARB.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmd_arb_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_cmd_arb_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DEBUG.DMA_CMD_ARB.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMD_ARB.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.U;
}
void Write_Dx_m1a_debug_Dma_axi_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_ACSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_ACSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_ACSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_ACSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_ACSM;
}
void Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_ACSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_ACSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_ACSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.RESERVED2 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.RESERVED2 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED2 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED2;
}
void Write_Dx_m1a_debug_Dma_axi_rd_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DCSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DCSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DCSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DCSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DCSM;
}
void Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DCSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DCSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DCSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.RESERVED1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.RESERVED1 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED1;
}
void Write_Dx_m1a_debug_Dma_axi_rd_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DMAR_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DMAR_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_DMAR_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_AFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_AFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.AXI_RD_AFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_axi_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DEBUG.DMA_AXI_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.U;
}
void Write_Dx_m1a_debug_Dma_axi_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_ACSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_ACSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_ACSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_ACSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_ACSM;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_ACSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_ACSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_ACSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.RESERVED2 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.RESERVED2 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED2 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED2;
}
void Write_Dx_m1a_debug_Dma_axi_wr_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DCSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DCSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DCSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DCSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DCSM;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DCSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DCSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DCSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.RESERVED1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.RESERVED1 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED1;
}
void Write_Dx_m1a_debug_Dma_axi_wr_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DMAW_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DMAW_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_DMAW_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_BFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_BFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_BFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_AFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_AFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.AXI_WR_AFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_AXI_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_axi_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_axi_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DEBUG.DMA_AXI_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_AXI_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_MEM_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DEBUG.DMA_MEM_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.U;
}
void Write_Dx_m1a_debug_Dma_mem_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DEBUG.DMA_MEM_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_MEM_WR.MEM_WR_CSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_wr_MEM_WR_CSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DEBUG.DMA_MEM_WR.MEM_WR_CSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.MEM_WR_CSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.MEM_WR_CSM;
}
void Write_Dx_m1a_debug_Dma_mem_wr_MEM_WR_CSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DEBUG.DMA_MEM_WR.MEM_WR_CSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.MEM_WR_CSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_MEM_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DEBUG.DMA_MEM_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_mem_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DEBUG.DMA_MEM_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_MEM_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DEBUG.DMA_MEM_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.U;
}
void Write_Dx_m1a_debug_Dma_mem_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DEBUG.DMA_MEM_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_MEM_RD.MEM_RD_CSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_rd_MEM_RD_CSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DEBUG.DMA_MEM_RD.MEM_RD_CSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.MEM_RD_CSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.MEM_RD_CSM;
}
void Write_Dx_m1a_debug_Dma_mem_rd_MEM_RD_CSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DEBUG.DMA_MEM_RD.MEM_RD_CSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.MEM_RD_CSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_MEM_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DEBUG.DMA_MEM_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_mem_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DEBUG.DMA_MEM_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_MEM_CP (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_cp(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DEBUG.DMA_MEM_CP : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.U;
}
void Write_Dx_m1a_debug_Dma_mem_cp(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DEBUG.DMA_MEM_CP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_MEM_CP.MEM_CP_CSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_cp_MEM_CP_CSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DEBUG.DMA_MEM_CP.MEM_CP_CSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.MEM_CP_CSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.MEM_CP_CSM;
}
void Write_Dx_m1a_debug_Dma_mem_cp_MEM_CP_CSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DEBUG.DMA_MEM_CP.MEM_CP_CSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.MEM_CP_CSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_MEM_CP.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_mem_cp_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DEBUG.DMA_MEM_CP.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_mem_cp_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DEBUG.DMA_MEM_CP.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_MEM_CP.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_SFR_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_sfr_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DEBUG.DMA_SFR_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.U;
}
void Write_Dx_m1a_debug_Dma_sfr_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DEBUG.DMA_SFR_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_SFR_WR.SFR_WR_CSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_sfr_wr_SFR_WR_CSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DEBUG.DMA_SFR_WR.SFR_WR_CSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.SFR_WR_CSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.SFR_WR_CSM;
}
void Write_Dx_m1a_debug_Dma_sfr_wr_SFR_WR_CSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DEBUG.DMA_SFR_WR.SFR_WR_CSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.SFR_WR_CSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_SFR_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_sfr_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DEBUG.DMA_SFR_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_sfr_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DEBUG.DMA_SFR_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_SFR_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.U;
}
void Write_Dx_m1a_debug_Dma_cmem_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_CSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_CSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_CSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_CSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_CSM;
}
void Write_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_CSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_CSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_CSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_rd_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED1 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.RESERVED1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.RESERVED1;
}
void Write_Dx_m1a_debug_Dma_cmem_rd_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_cmem_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_wr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.U;
}
void Write_Dx_m1a_debug_Dma_cmem_wr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_CSM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_CSM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_CSM : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_CSM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_CSM;
}
void Write_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_CSM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_CSM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_CSM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_wr_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED1 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.RESERVED1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.RESERVED1;
}
void Write_Dx_m1a_debug_Dma_cmem_wr_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_EMPTY_RD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD;
}
void Write_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_EMPTY_RD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_FULL_WR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR;
}
void Write_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_FULL_WR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Dma_cmem_wr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.RESERVED0;
}
void Write_Dx_m1a_debug_Dma_cmem_wr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->DMA_CMEM_WR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.U;
}
void Write_Dx_m1a_debug_Sfu_fifo(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0;
}
void Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.SFU_FIFO.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Sfu_fifo_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.RESERVED0;
}
void Write_Dx_m1a_debug_Sfu_fifo_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DEBUG.SFU_FIFO.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->SFU_FIFO.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_DEBUG.NPU_DBG0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.U;
}
void Write_Dx_m1a_debug_Npu_dbg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_DEBUG.NPU_DBG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG0.FINISH_CNT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg0_FINISH_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_DEBUG.NPU_DBG0.FINISH_CNT : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.FINISH_CNT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.FINISH_CNT;
}
void Write_Dx_m1a_debug_Npu_dbg0_FINISH_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_DEBUG.NPU_DBG0.FINISH_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.FINISH_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG0.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_DEBUG.NPU_DBG0.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_DEBUG.NPU_DBG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG1 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_DEBUG.NPU_DBG1 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.U;
}
void Write_Dx_m1a_debug_Npu_dbg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_DEBUG.NPU_DBG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG1.CAPTURE_START_TILE_NUM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg1_CAPTURE_START_TILE_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_DEBUG.NPU_DBG1.CAPTURE_START_TILE_NUM : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.CAPTURE_START_TILE_NUM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.CAPTURE_START_TILE_NUM;
}
void Write_Dx_m1a_debug_Npu_dbg1_CAPTURE_START_TILE_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_DEBUG.NPU_DBG1.CAPTURE_START_TILE_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.CAPTURE_START_TILE_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG1.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_DEBUG.NPU_DBG1.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_DEBUG.NPU_DBG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG2 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_DEBUG.NPU_DBG2 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.U;
}
void Write_Dx_m1a_debug_Npu_dbg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_DEBUG.NPU_DBG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG2.CAPTURE_PE_VALID_NUM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg2_CAPTURE_PE_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_DEBUG.NPU_DBG2.CAPTURE_PE_VALID_NUM : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.CAPTURE_PE_VALID_NUM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.CAPTURE_PE_VALID_NUM;
}
void Write_Dx_m1a_debug_Npu_dbg2_CAPTURE_PE_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_DEBUG.NPU_DBG2.CAPTURE_PE_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG2.CAPTURE_PE_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG3 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_DEBUG.NPU_DBG3 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.U;
}
void Write_Dx_m1a_debug_Npu_dbg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_DEBUG.NPU_DBG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG3.CAPTURE_PE_CHANNEL_NUM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg3_CAPTURE_PE_CHANNEL_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_DEBUG.NPU_DBG3.CAPTURE_PE_CHANNEL_NUM : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.CAPTURE_PE_CHANNEL_NUM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.CAPTURE_PE_CHANNEL_NUM;
}
void Write_Dx_m1a_debug_Npu_dbg3_CAPTURE_PE_CHANNEL_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_DEBUG.NPU_DBG3.CAPTURE_PE_CHANNEL_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.CAPTURE_PE_CHANNEL_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG3.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_DEBUG.NPU_DBG3.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_DEBUG.NPU_DBG3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG4 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_DEBUG.NPU_DBG4 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.U;
}
void Write_Dx_m1a_debug_Npu_dbg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_DEBUG.NPU_DBG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG4.CAPTURE_PE0_OUT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg4_CAPTURE_PE0_OUT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_DEBUG.NPU_DBG4.CAPTURE_PE0_OUT : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.CAPTURE_PE0_OUT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.CAPTURE_PE0_OUT;
}
void Write_Dx_m1a_debug_Npu_dbg4_CAPTURE_PE0_OUT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_DEBUG.NPU_DBG4.CAPTURE_PE0_OUT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.CAPTURE_PE0_OUT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG4.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_DEBUG.NPU_DBG4.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_DEBUG.NPU_DBG4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG5 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_DEBUG.NPU_DBG5 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.U;
}
void Write_Dx_m1a_debug_Npu_dbg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_DEBUG.NPU_DBG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG5.CAPTURE_PE1_OUT (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg5_CAPTURE_PE1_OUT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_DEBUG.NPU_DBG5.CAPTURE_PE1_OUT : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.CAPTURE_PE1_OUT << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.CAPTURE_PE1_OUT;
}
void Write_Dx_m1a_debug_Npu_dbg5_CAPTURE_PE1_OUT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_DEBUG.NPU_DBG5.CAPTURE_PE1_OUT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.CAPTURE_PE1_OUT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG5.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg5_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_DEBUG.NPU_DBG5.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg5_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_DEBUG.NPU_DBG5.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG5.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG6 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_DEBUG.NPU_DBG6 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.U;
}
void Write_Dx_m1a_debug_Npu_dbg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_DEBUG.NPU_DBG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG6.CAPTURE_SFU_VALID_NUM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg6_CAPTURE_SFU_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_DEBUG.NPU_DBG6.CAPTURE_SFU_VALID_NUM : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.CAPTURE_SFU_VALID_NUM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.CAPTURE_SFU_VALID_NUM;
}
void Write_Dx_m1a_debug_Npu_dbg6_CAPTURE_SFU_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_DEBUG.NPU_DBG6.CAPTURE_SFU_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG6.CAPTURE_SFU_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG7 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_DEBUG.NPU_DBG7 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.U;
}
void Write_Dx_m1a_debug_Npu_dbg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_DEBUG.NPU_DBG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg7_CAPTURE_SFU_CHANNEL_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_DEBUG.NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM;
}
void Write_Dx_m1a_debug_Npu_dbg7_CAPTURE_SFU_CHANNEL_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_DEBUG.NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG7.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg7_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_DEBUG.NPU_DBG7.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg7_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_DEBUG.NPU_DBG7.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG7.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG8 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_DEBUG.NPU_DBG8 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.U;
}
void Write_Dx_m1a_debug_Npu_dbg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_DEBUG.NPU_DBG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG8.CAPTURE_SFU_DEQ_DATA (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg8_CAPTURE_SFU_DEQ_DATA(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_DEBUG.NPU_DBG8.CAPTURE_SFU_DEQ_DATA : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.CAPTURE_SFU_DEQ_DATA << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.CAPTURE_SFU_DEQ_DATA;
}
void Write_Dx_m1a_debug_Npu_dbg8_CAPTURE_SFU_DEQ_DATA(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_DEBUG.NPU_DBG8.CAPTURE_SFU_DEQ_DATA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.CAPTURE_SFU_DEQ_DATA = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG8.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg8_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_DEBUG.NPU_DBG8.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg8_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_DEBUG.NPU_DBG8.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG8.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG9 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_DEBUG.NPU_DBG9 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.U;
}
void Write_Dx_m1a_debug_Npu_dbg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_DEBUG.NPU_DBG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG9.CAPTURE_SFU_PAF_DATA (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg9_CAPTURE_SFU_PAF_DATA(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_DEBUG.NPU_DBG9.CAPTURE_SFU_PAF_DATA : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.CAPTURE_SFU_PAF_DATA << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.CAPTURE_SFU_PAF_DATA;
}
void Write_Dx_m1a_debug_Npu_dbg9_CAPTURE_SFU_PAF_DATA(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_DEBUG.NPU_DBG9.CAPTURE_SFU_PAF_DATA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.CAPTURE_SFU_PAF_DATA = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG9.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg9_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_DEBUG.NPU_DBG9.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg9_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_DEBUG.NPU_DBG9.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG9.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG10 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_DEBUG.NPU_DBG10 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.U;
}
void Write_Dx_m1a_debug_Npu_dbg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_DEBUG.NPU_DBG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG10.CAPTURE_SFU_POSTA_DATA (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg10_CAPTURE_SFU_POSTA_DATA(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_DEBUG.NPU_DBG10.CAPTURE_SFU_POSTA_DATA : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.CAPTURE_SFU_POSTA_DATA << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.CAPTURE_SFU_POSTA_DATA;
}
void Write_Dx_m1a_debug_Npu_dbg10_CAPTURE_SFU_POSTA_DATA(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_DEBUG.NPU_DBG10.CAPTURE_SFU_POSTA_DATA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.CAPTURE_SFU_POSTA_DATA = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG10.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg10_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_DEBUG.NPU_DBG10.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg10_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_DEBUG.NPU_DBG10.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG10.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG11 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_DEBUG.NPU_DBG11 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.U;
}
void Write_Dx_m1a_debug_Npu_dbg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_DEBUG.NPU_DBG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.NPU_DBG11.CAPTURE_SFU_POSTB_DATA (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg11_CAPTURE_SFU_POSTB_DATA(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_DEBUG.NPU_DBG11.CAPTURE_SFU_POSTB_DATA : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.CAPTURE_SFU_POSTB_DATA << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.CAPTURE_SFU_POSTB_DATA;
}
void Write_Dx_m1a_debug_Npu_dbg11_CAPTURE_SFU_POSTB_DATA(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_DEBUG.NPU_DBG11.CAPTURE_SFU_POSTB_DATA : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.CAPTURE_SFU_POSTB_DATA = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.NPU_DBG11.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Npu_dbg11_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_DEBUG.NPU_DBG11.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.RESERVED0;
}
void Write_Dx_m1a_debug_Npu_dbg11_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_DEBUG.NPU_DBG11.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->NPU_DBG11.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_RD (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_rd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_DEBUG.FSM_RD : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.U << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.U;
}
void Write_Dx_m1a_debug_Fsm_rd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_DEBUG.FSM_RD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DEBUG_t*) base)->FSM_RD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DEBUG.FSM_RD.FSM_RD_PULSE (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_rd_FSM_RD_PULSE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_DEBUG.FSM_RD.FSM_RD_PULSE : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.FSM_RD_PULSE << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.FSM_RD_PULSE;
}
void Write_Dx_m1a_debug_Fsm_rd_FSM_RD_PULSE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_DEBUG.FSM_RD.FSM_RD_PULSE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.FSM_RD_PULSE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DEBUG.FSM_RD.RESERVED0 (Category: DEBUG) */
uint32_t Read_Dx_m1a_debug_Fsm_rd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_DEBUG.FSM_RD.RESERVED0 : " << ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.RESERVED0;
}
void Write_Dx_m1a_debug_Fsm_rd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DEBUG_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_DEBUG.FSM_RD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DEBUG_t*) base)->FSM_RD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_base_addr_low(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DMA.AXI_BASE_ADDR_LOW : " << ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.U;
}
void Write_Dx_m1a_dma_Axi_base_addr_low(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DMA.AXI_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW : " << ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW;
}
void Write_Dx_m1a_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_base_addr_high(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DMA.AXI_BASE_ADDR_HIGH : " << ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U;
}
void Write_Dx_m1a_dma_Axi_base_addr_high(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DMA.AXI_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH : " << ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH;
}
void Write_Dx_m1a_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI4_RADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi4_raddr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DMA.AXI4_RADDR : " << ((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.U;
}
void Write_Dx_m1a_dma_Axi4_raddr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DMA.AXI4_RADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI4_RADDR.DMA0_AXI4_RADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi4_raddr_DMA0_AXI4_RADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DMA.AXI4_RADDR.DMA0_AXI4_RADDR : " << ((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.DMA0_AXI4_RADDR << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.DMA0_AXI4_RADDR;
}
void Write_Dx_m1a_dma_Axi4_raddr_DMA0_AXI4_RADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_DMA.AXI4_RADDR.DMA0_AXI4_RADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI4_RADDR.DMA0_AXI4_RADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI4_WADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi4_waddr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DMA.AXI4_WADDR : " << ((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.U;
}
void Write_Dx_m1a_dma_Axi4_waddr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DMA.AXI4_WADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI4_WADDR.DMA0_AXI4_WADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi4_waddr_DMA0_AXI4_WADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DMA.AXI4_WADDR.DMA0_AXI4_WADDR : " << ((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.DMA0_AXI4_WADDR << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.DMA0_AXI4_WADDR;
}
void Write_Dx_m1a_dma_Axi4_waddr_DMA0_AXI4_WADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_DMA.AXI4_WADDR.DMA0_AXI4_WADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI4_WADDR.DMA0_AXI4_WADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.RSVD0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DMA.RSVD0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD0.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD0.U;
}
void Write_Dx_m1a_dma_Rsvd0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DMA.RSVD0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->RSVD0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.RSVD0.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DMA.RSVD0.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD0.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD0.RESERVED0;
}
void Write_Dx_m1a_dma_Rsvd0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_DMA.RSVD0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.RSVD1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DMA.RSVD1 : " << ((dxDX_M1A_DMA_t*) base)->RSVD1.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD1.U;
}
void Write_Dx_m1a_dma_Rsvd1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DMA.RSVD1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->RSVD1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.RSVD1.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DMA.RSVD1.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD1.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD1.RESERVED0;
}
void Write_Dx_m1a_dma_Rsvd1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_DMA.RSVD1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SRAM_DST_ADDR0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sram_dst_addr0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DMA.SRAM_DST_ADDR0 : " << ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.U;
}
void Write_Dx_m1a_dma_Sram_dst_addr0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DMA.SRAM_DST_ADDR0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sram_dst_addr0_DMA0_SRAM_DST_ADDR0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DMA.SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 : " << ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0;
}
void Write_Dx_m1a_dma_Sram_dst_addr0_DMA0_SRAM_DST_ADDR0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_DMA.SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SRAM_DST_ADDR1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sram_dst_addr1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DMA.SRAM_DST_ADDR1 : " << ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.U;
}
void Write_Dx_m1a_dma_Sram_dst_addr1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DMA.SRAM_DST_ADDR1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sram_dst_addr1_DMA0_SRAM_DST_ADDR1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DMA.SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 : " << ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1;
}
void Write_Dx_m1a_dma_Sram_dst_addr1_DMA0_SRAM_DST_ADDR1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_DMA.SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SRAM_SRC_ADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sram_src_addr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DMA.SRAM_SRC_ADDR : " << ((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.U;
}
void Write_Dx_m1a_dma_Sram_src_addr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DMA.SRAM_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sram_src_addr_DMA0_SRAM_SRC_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DMA.SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR : " << ((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR;
}
void Write_Dx_m1a_dma_Sram_src_addr_DMA0_SRAM_SRC_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_DMA.SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.READ_SIZE (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Read_size(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE : " << ((dxDX_M1A_DMA_t*) base)->READ_SIZE.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->READ_SIZE.U;
}
void Write_Dx_m1a_dma_Read_size(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->READ_SIZE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->READ_SIZE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.READ_SIZE.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Read_size_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE.RESERVED1 : " << ((dxDX_M1A_DMA_t*) base)->READ_SIZE.RESERVED1 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->READ_SIZE.RESERVED1;
}
void Write_Dx_m1a_dma_Read_size_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->READ_SIZE.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.READ_SIZE.DMA0_READ_SIZE (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Read_size_DMA0_READ_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE.DMA0_READ_SIZE : " << ((dxDX_M1A_DMA_t*) base)->READ_SIZE.DMA0_READ_SIZE << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->READ_SIZE.DMA0_READ_SIZE;
}
void Write_Dx_m1a_dma_Read_size_DMA0_READ_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE.DMA0_READ_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->READ_SIZE.DMA0_READ_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.READ_SIZE.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Read_size_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->READ_SIZE.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->READ_SIZE.RESERVED0;
}
void Write_Dx_m1a_dma_Read_size_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_DMA.READ_SIZE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->READ_SIZE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.WRITE_SIZE (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Write_size(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE : " << ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.U;
}
void Write_Dx_m1a_dma_Write_size(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.WRITE_SIZE.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Write_size_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE.RESERVED1 : " << ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.RESERVED1 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.RESERVED1;
}
void Write_Dx_m1a_dma_Write_size_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.WRITE_SIZE.DMA0_WRITE_SIZE (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Write_size_DMA0_WRITE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE.DMA0_WRITE_SIZE : " << ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.DMA0_WRITE_SIZE << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.DMA0_WRITE_SIZE;
}
void Write_Dx_m1a_dma_Write_size_DMA0_WRITE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE.DMA0_WRITE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.DMA0_WRITE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.WRITE_SIZE.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Write_size_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.RESERVED0;
}
void Write_Dx_m1a_dma_Write_size_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_DMA.WRITE_SIZE.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->WRITE_SIZE.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.RSVD2 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DMA.RSVD2 : " << ((dxDX_M1A_DMA_t*) base)->RSVD2.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD2.U;
}
void Write_Dx_m1a_dma_Rsvd2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DMA.RSVD2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->RSVD2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.RSVD2.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DMA.RSVD2.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD2.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD2.RESERVED0;
}
void Write_Dx_m1a_dma_Rsvd2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_DMA.RSVD2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.RSVD3 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DMA.RSVD3 : " << ((dxDX_M1A_DMA_t*) base)->RSVD3.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD3.U;
}
void Write_Dx_m1a_dma_Rsvd3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DMA.RSVD3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->RSVD3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.RSVD3.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DMA.RSVD3.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD3.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD3.RESERVED0;
}
void Write_Dx_m1a_dma_Rsvd3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_DMA.RSVD3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.RSVD4 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DMA.RSVD4 : " << ((dxDX_M1A_DMA_t*) base)->RSVD4.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD4.U;
}
void Write_Dx_m1a_dma_Rsvd4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DMA.RSVD4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->RSVD4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.RSVD4.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DMA.RSVD4.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD4.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD4.RESERVED0;
}
void Write_Dx_m1a_dma_Rsvd4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_DMA.RSVD4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.RSVD5 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DMA.RSVD5 : " << ((dxDX_M1A_DMA_t*) base)->RSVD5.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD5.U;
}
void Write_Dx_m1a_dma_Rsvd5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DMA.RSVD5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->RSVD5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.RSVD5.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Rsvd5_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DMA.RSVD5.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->RSVD5.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->RSVD5.RESERVED0;
}
void Write_Dx_m1a_dma_Rsvd5_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_DMA.RSVD5.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->RSVD5.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.IRQ (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Irq(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DMA.IRQ : " << ((dxDX_M1A_DMA_t*) base)->IRQ.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->IRQ.U;
}
void Write_Dx_m1a_dma_Irq(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DMA.IRQ : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->IRQ.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->IRQ.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.IRQ.DMA_IRQ_EN (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Irq_DMA_IRQ_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DMA.IRQ.DMA_IRQ_EN : " << ((dxDX_M1A_DMA_t*) base)->IRQ.DMA_IRQ_EN << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->IRQ.DMA_IRQ_EN;
}
void Write_Dx_m1a_dma_Irq_DMA_IRQ_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DMA.IRQ.DMA_IRQ_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->IRQ.DMA_IRQ_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.IRQ.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Irq_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DMA.IRQ.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->IRQ.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->IRQ.RESERVED0;
}
void Write_Dx_m1a_dma_Irq_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_DMA.IRQ.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->IRQ.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.CMD (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Cmd(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DMA.CMD : " << ((dxDX_M1A_DMA_t*) base)->CMD.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->CMD.U;
}
void Write_Dx_m1a_dma_Cmd(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DMA.CMD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->CMD.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->CMD.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.CMD.DMA_START_CMD (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Cmd_DMA_START_CMD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DMA.CMD.DMA_START_CMD : " << ((dxDX_M1A_DMA_t*) base)->CMD.DMA_START_CMD << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->CMD.DMA_START_CMD;
}
void Write_Dx_m1a_dma_Cmd_DMA_START_CMD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DMA.CMD.DMA_START_CMD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->CMD.DMA_START_CMD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.CMD.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Cmd_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DMA.CMD.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->CMD.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->CMD.RESERVED0;
}
void Write_Dx_m1a_dma_Cmd_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_DMA.CMD.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->CMD.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.STATUS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DMA.STATUS : " << ((dxDX_M1A_DMA_t*) base)->STATUS.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->STATUS.U;
}
void Write_Dx_m1a_dma_Status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DMA.STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.STATUS.DMA_DONE_STATUS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Status_DMA_DONE_STATUS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DMA.STATUS.DMA_DONE_STATUS : " << ((dxDX_M1A_DMA_t*) base)->STATUS.DMA_DONE_STATUS << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->STATUS.DMA_DONE_STATUS;
}
void Write_Dx_m1a_dma_Status_DMA_DONE_STATUS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DMA.STATUS.DMA_DONE_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->STATUS.DMA_DONE_STATUS = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.STATUS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DMA.STATUS.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->STATUS.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->STATUS.RESERVED0;
}
void Write_Dx_m1a_dma_Status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_DMA.STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_base_addr_low(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DMA.SFR_BASE_ADDR_LOW : " << ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.U;
}
void Write_Dx_m1a_dma_Sfr_base_addr_low(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DMA.SFR_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW : " << ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW;
}
void Write_Dx_m1a_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_base_addr_high(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DMA.SFR_BASE_ADDR_HIGH : " << ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U;
}
void Write_Dx_m1a_dma_Sfr_base_addr_high(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DMA.SFR_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH : " << ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH;
}
void Write_Dx_m1a_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_ADDR_OFFS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_addr_offs(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DMA.SFR_ADDR_OFFS : " << ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.U;
}
void Write_Dx_m1a_dma_Sfr_addr_offs(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DMA.SFR_ADDR_OFFS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_ADDR_OFFS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_addr_offs_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DMA.SFR_ADDR_OFFS.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.RESERVED0;
}
void Write_Dx_m1a_dma_Sfr_addr_offs_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DMA.SFR_ADDR_OFFS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_addr_offs_SFR_ADDR_OFFS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS : " << ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.SFR_ADDR_OFFS << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.SFR_ADDR_OFFS;
}
void Write_Dx_m1a_dma_Sfr_addr_offs_SFR_ADDR_OFFS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_ADDR_OFFS.SFR_ADDR_OFFS = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_START_ADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_start_addr(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DMA.SFR_START_ADDR : " << ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.U;
}
void Write_Dx_m1a_dma_Sfr_start_addr(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DMA.SFR_START_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_START_ADDR.SFR_START_ADDR (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_start_addr_SFR_START_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DMA.SFR_START_ADDR.SFR_START_ADDR : " << ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.SFR_START_ADDR << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.SFR_START_ADDR;
}
void Write_Dx_m1a_dma_Sfr_start_addr_SFR_START_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DMA.SFR_START_ADDR.SFR_START_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.SFR_START_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_START_ADDR.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_start_addr_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DMA.SFR_START_ADDR.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.RESERVED0;
}
void Write_Dx_m1a_dma_Sfr_start_addr_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_DMA.SFR_START_ADDR.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_START_ADDR.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_MOVE_CNT (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_move_cnt(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT : " << ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.U;
}
void Write_Dx_m1a_dma_Sfr_move_cnt(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_MOVE_CNT.RESERVED1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_move_cnt_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT.RESERVED1 : " << ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.RESERVED1 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.RESERVED1;
}
void Write_Dx_m1a_dma_Sfr_move_cnt_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_move_cnt_SFR_MOVE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT : " << ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.SFR_MOVE_CNT << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.SFR_MOVE_CNT;
}
void Write_Dx_m1a_dma_Sfr_move_cnt_SFR_MOVE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.SFR_MOVE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_MOVE_CNT.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_move_cnt_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.RESERVED0;
}
void Write_Dx_m1a_dma_Sfr_move_cnt_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_DMA.SFR_MOVE_CNT.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_MOVE_CNT.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_ID (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_id(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DMA.SFR_ID : " << ((dxDX_M1A_DMA_t*) base)->SFR_ID.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_ID.U;
}
void Write_Dx_m1a_dma_Sfr_id(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DMA.SFR_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_ID.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_ID.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_ID.SFR_ID (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_id_SFR_ID(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DMA.SFR_ID.SFR_ID : " << ((dxDX_M1A_DMA_t*) base)->SFR_ID.SFR_ID << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_ID.SFR_ID;
}
void Write_Dx_m1a_dma_Sfr_id_SFR_ID(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DMA.SFR_ID.SFR_ID : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_ID.SFR_ID = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_ID.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_id_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DMA.SFR_ID.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->SFR_ID.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_ID.RESERVED0;
}
void Write_Dx_m1a_dma_Sfr_id_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_DMA.SFR_ID.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_ID.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_DMA_STATUS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_dma_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DMA.SFR_DMA_STATUS : " << ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.U;
}
void Write_Dx_m1a_dma_Sfr_dma_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DMA.SFR_DMA_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS : " << ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.SFR_DMA_DONE_STATUS << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.SFR_DMA_DONE_STATUS;
}
void Write_Dx_m1a_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.SFR_DMA_DONE_STATUS = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.SFR_DMA_STATUS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Sfr_dma_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DMA.SFR_DMA_STATUS.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.RESERVED0;
}
void Write_Dx_m1a_dma_Sfr_dma_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_DMA.SFR_DMA_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->SFR_DMA_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.DMA_CTRL (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Dma_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DMA.DMA_CTRL : " << ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.U;
}
void Write_Dx_m1a_dma_Dma_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DMA.DMA_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->DMA_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.DMA_CTRL.DMA_CTRL_ENABLE (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Dma_ctrl_DMA_CTRL_ENABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DMA.DMA_CTRL.DMA_CTRL_ENABLE : " << ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.DMA_CTRL_ENABLE << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.DMA_CTRL_ENABLE;
}
void Write_Dx_m1a_dma_Dma_ctrl_DMA_CTRL_ENABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DMA.DMA_CTRL.DMA_CTRL_ENABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.DMA_CTRL_ENABLE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.DMA_CTRL.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Dma_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DMA.DMA_CTRL.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.RESERVED0;
}
void Write_Dx_m1a_dma_Dma_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_DMA.DMA_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->DMA_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.FLUSH_STATUS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Flush_status(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DMA.FLUSH_STATUS : " << ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.U;
}
void Write_Dx_m1a_dma_Flush_status(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DMA.FLUSH_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.FLUSH_STATUS.FLUSH_STATUS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Flush_status_FLUSH_STATUS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DMA.FLUSH_STATUS.FLUSH_STATUS : " << ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.FLUSH_STATUS << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.FLUSH_STATUS;
}
void Write_Dx_m1a_dma_Flush_status_FLUSH_STATUS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DMA.FLUSH_STATUS.FLUSH_STATUS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.FLUSH_STATUS = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.FLUSH_STATUS.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Flush_status_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DMA.FLUSH_STATUS.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.RESERVED0;
}
void Write_Dx_m1a_dma_Flush_status_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_DMA.FLUSH_STATUS.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->FLUSH_STATUS.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DMA.AXI_CFG0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.U;
}
void Write_Dx_m1a_dma_Axi_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DMA.AXI_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.AXI_RDMA_BURST_LENGTH << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.AXI_RDMA_BURST_LENGTH;
}
void Write_Dx_m1a_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.AXI_RDMA_BURST_LENGTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG0.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DMA.AXI_CFG0.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_DMA.AXI_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG1 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DMA.AXI_CFG1 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.U;
}
void Write_Dx_m1a_dma_Axi_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DMA.AXI_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.AXI_WDMA_BURST_LENGTH << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.AXI_WDMA_BURST_LENGTH;
}
void Write_Dx_m1a_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.AXI_WDMA_BURST_LENGTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG1.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DMA.AXI_CFG1.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_DMA.AXI_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG2 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DMA.AXI_CFG2 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.U;
}
void Write_Dx_m1a_dma_Axi_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DMA.AXI_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG2.AXI_RDMA_MO (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg2_AXI_RDMA_MO(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DMA.AXI_CFG2.AXI_RDMA_MO : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.AXI_RDMA_MO << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.AXI_RDMA_MO;
}
void Write_Dx_m1a_dma_Axi_cfg2_AXI_RDMA_MO(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DMA.AXI_CFG2.AXI_RDMA_MO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.AXI_RDMA_MO = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG2.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DMA.AXI_CFG2.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_DMA.AXI_CFG2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG3 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DMA.AXI_CFG3 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.U;
}
void Write_Dx_m1a_dma_Axi_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DMA.AXI_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG3.AXI_WDMA_MO (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg3_AXI_WDMA_MO(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DMA.AXI_CFG3.AXI_WDMA_MO : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.AXI_WDMA_MO << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.AXI_WDMA_MO;
}
void Write_Dx_m1a_dma_Axi_cfg3_AXI_WDMA_MO(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DMA.AXI_CFG3.AXI_WDMA_MO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.AXI_WDMA_MO = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG3.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg3_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DMA.AXI_CFG3.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg3_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_DMA.AXI_CFG3.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG3.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG4 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DMA.AXI_CFG4 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.U;
}
void Write_Dx_m1a_dma_Axi_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DMA.AXI_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG4.AXI_4KB_BOUNDARY (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg4_AXI_4KB_BOUNDARY(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DMA.AXI_CFG4.AXI_4KB_BOUNDARY : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.AXI_4KB_BOUNDARY << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.AXI_4KB_BOUNDARY;
}
void Write_Dx_m1a_dma_Axi_cfg4_AXI_4KB_BOUNDARY(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DMA.AXI_CFG4.AXI_4KB_BOUNDARY : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.AXI_4KB_BOUNDARY = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG4.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DMA.AXI_CFG4.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_DMA.AXI_CFG4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG5 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DMA.AXI_CFG5 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.U;
}
void Write_Dx_m1a_dma_Axi_cfg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DMA.AXI_CFG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG5.AXI_RDMA_QOS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg5_AXI_RDMA_QOS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DMA.AXI_CFG5.AXI_RDMA_QOS : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.AXI_RDMA_QOS << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.AXI_RDMA_QOS;
}
void Write_Dx_m1a_dma_Axi_cfg5_AXI_RDMA_QOS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DMA.AXI_CFG5.AXI_RDMA_QOS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.AXI_RDMA_QOS = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG5.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg5_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DMA.AXI_CFG5.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg5_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_DMA.AXI_CFG5.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG5.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG6 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DMA.AXI_CFG6 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.U;
}
void Write_Dx_m1a_dma_Axi_cfg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DMA.AXI_CFG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->AXI_CFG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.AXI_CFG6.AXI_WDMA_QOS (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg6_AXI_WDMA_QOS(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DMA.AXI_CFG6.AXI_WDMA_QOS : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.AXI_WDMA_QOS << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.AXI_WDMA_QOS;
}
void Write_Dx_m1a_dma_Axi_cfg6_AXI_WDMA_QOS(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DMA.AXI_CFG6.AXI_WDMA_QOS : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.AXI_WDMA_QOS = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.AXI_CFG6.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Axi_cfg6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DMA.AXI_CFG6.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.RESERVED0;
}
void Write_Dx_m1a_dma_Axi_cfg6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_DMA.AXI_CFG6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->AXI_CFG6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.VIRT_RD_EN (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Virt_rd_en(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DMA.VIRT_RD_EN : " << ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.U;
}
void Write_Dx_m1a_dma_Virt_rd_en(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DMA.VIRT_RD_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.VIRT_RD_EN.VIRTUAL_READ_EN (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Virt_rd_en_VIRTUAL_READ_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DMA.VIRT_RD_EN.VIRTUAL_READ_EN : " << ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.VIRTUAL_READ_EN << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.VIRTUAL_READ_EN;
}
void Write_Dx_m1a_dma_Virt_rd_en_VIRTUAL_READ_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DMA.VIRT_RD_EN.VIRTUAL_READ_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.VIRTUAL_READ_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.VIRT_RD_EN.RESERVED0 (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Virt_rd_en_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DMA.VIRT_RD_EN.RESERVED0 : " << ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.RESERVED0 << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.RESERVED0;
}
void Write_Dx_m1a_dma_Virt_rd_en_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_DMA.VIRT_RD_EN.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->VIRT_RD_EN.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_DMA.VIRT_RD_PTRN (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Virt_rd_ptrn(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DMA.VIRT_RD_PTRN : " << ((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.U << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.U;
}
void Write_Dx_m1a_dma_Virt_rd_ptrn(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DMA.VIRT_RD_PTRN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_DMA.VIRT_RD_PTRN.VIRTUAL_READ_PATTERN (Category: DMA) */
uint32_t Read_Dx_m1a_dma_Virt_rd_ptrn_VIRTUAL_READ_PATTERN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DMA.VIRT_RD_PTRN.VIRTUAL_READ_PATTERN : " << ((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.VIRTUAL_READ_PATTERN << std::endl;
    return ((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.VIRTUAL_READ_PATTERN;
}
void Write_Dx_m1a_dma_Virt_rd_ptrn_VIRTUAL_READ_PATTERN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_DMA_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_DMA.VIRT_RD_PTRN.VIRTUAL_READ_PATTERN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_DMA_t*) base)->VIRT_RD_PTRN.VIRTUAL_READ_PATTERN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.DATA_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Data_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.U;
}
void Write_Dx_m1a_npu0_Data_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Data_cfg0_FEATURE_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.FEATURE_BIT_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.FEATURE_BIT_WIDTH;
}
void Write_Dx_m1a_npu0_Data_cfg0_FEATURE_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.FEATURE_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.DATA_CFG0.W_FEATURE_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Data_cfg0_W_FEATURE_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0.W_FEATURE_BIT_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.W_FEATURE_BIT_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.W_FEATURE_BIT_WIDTH;
}
void Write_Dx_m1a_npu0_Data_cfg0_W_FEATURE_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0.W_FEATURE_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.W_FEATURE_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.DATA_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Data_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Data_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x0) + "] DX_M1A_NPU0.DATA_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->DATA_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.U;
}
void Write_Dx_m1a_npu0_Ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.RESERVED0;
}
void Write_Dx_m1a_npu0_Ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.RESIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_RESIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.RESIZE : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.RESIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.RESIZE;
}
void Write_Dx_m1a_npu0_Ctrl_RESIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.RESIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.RESIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.WRITE_POOL_ONLY (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_WRITE_POOL_ONLY(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.WRITE_POOL_ONLY : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.WRITE_POOL_ONLY << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.WRITE_POOL_ONLY;
}
void Write_Dx_m1a_npu0_Ctrl_WRITE_POOL_ONLY(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.WRITE_POOL_ONLY : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.WRITE_POOL_ONLY = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.WEIGHT_BROADCAST_MODE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_WEIGHT_BROADCAST_MODE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.WEIGHT_BROADCAST_MODE_EN : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.WEIGHT_BROADCAST_MODE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.WEIGHT_BROADCAST_MODE_EN;
}
void Write_Dx_m1a_npu0_Ctrl_WEIGHT_BROADCAST_MODE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.WEIGHT_BROADCAST_MODE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.WEIGHT_BROADCAST_MODE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.FEATURE_BROADCAST_MODE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_FEATURE_BROADCAST_MODE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.FEATURE_BROADCAST_MODE_EN : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.FEATURE_BROADCAST_MODE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.FEATURE_BROADCAST_MODE_EN;
}
void Write_Dx_m1a_npu0_Ctrl_FEATURE_BROADCAST_MODE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.FEATURE_BROADCAST_MODE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.FEATURE_BROADCAST_MODE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.ACTIVE_CNT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_ACTIVE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.ACTIVE_CNT : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.ACTIVE_CNT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.ACTIVE_CNT;
}
void Write_Dx_m1a_npu0_Ctrl_ACTIVE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.ACTIVE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.ACTIVE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.ACTIVE_PERIOD (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_ACTIVE_PERIOD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.ACTIVE_PERIOD : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.ACTIVE_PERIOD << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.ACTIVE_PERIOD;
}
void Write_Dx_m1a_npu0_Ctrl_ACTIVE_PERIOD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.ACTIVE_PERIOD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.ACTIVE_PERIOD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.FEATURE_DATA_TYPE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_FEATURE_DATA_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.FEATURE_DATA_TYPE : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.FEATURE_DATA_TYPE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.FEATURE_DATA_TYPE;
}
void Write_Dx_m1a_npu0_Ctrl_FEATURE_DATA_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.FEATURE_DATA_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.FEATURE_DATA_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CTRL.INPUT_DONE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ctrl_INPUT_DONE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.INPUT_DONE : " << ((dxDX_M1A_NPU0_t*) base)->CTRL.INPUT_DONE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CTRL.INPUT_DONE;
}
void Write_Dx_m1a_npu0_Ctrl_INPUT_DONE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4) + "] DX_M1A_NPU0.CTRL.INPUT_DONE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CTRL.INPUT_DONE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.MISC (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Misc(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_NPU0.MISC : " << ((dxDX_M1A_NPU0_t*) base)->MISC.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->MISC.U;
}
void Write_Dx_m1a_npu0_Misc(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_NPU0.MISC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->MISC.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->MISC.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.MISC.TILE_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Misc_TILE_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_NPU0.MISC.TILE_NUM : " << ((dxDX_M1A_NPU0_t*) base)->MISC.TILE_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->MISC.TILE_NUM;
}
void Write_Dx_m1a_npu0_Misc_TILE_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_NPU0.MISC.TILE_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->MISC.TILE_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.MISC.LAYER_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Misc_LAYER_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_NPU0.MISC.LAYER_NUM : " << ((dxDX_M1A_NPU0_t*) base)->MISC.LAYER_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->MISC.LAYER_NUM;
}
void Write_Dx_m1a_npu0_Misc_LAYER_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8) + "] DX_M1A_NPU0.MISC.LAYER_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->MISC.LAYER_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PSEUDO (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pseudo(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_NPU0.PSEUDO : " << ((dxDX_M1A_NPU0_t*) base)->PSEUDO.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PSEUDO.U;
}
void Write_Dx_m1a_npu0_Pseudo(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_NPU0.PSEUDO : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PSEUDO.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PSEUDO.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PSEUDO.PSEUDO_CNT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pseudo_PSEUDO_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_NPU0.PSEUDO.PSEUDO_CNT : " << ((dxDX_M1A_NPU0_t*) base)->PSEUDO.PSEUDO_CNT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PSEUDO.PSEUDO_CNT;
}
void Write_Dx_m1a_npu0_Pseudo_PSEUDO_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc) + "] DX_M1A_NPU0.PSEUDO.PSEUDO_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PSEUDO.PSEUDO_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0 : " << ((dxDX_M1A_NPU0_t*) base)->TRP0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP0.U;
}
void Write_Dx_m1a_npu0_Trp0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->TRP0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.TRP0.TRP_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp0_TRP_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.TRP_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Trp0_TRP_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.TRP_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->TRP0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP0.RESERVED0;
}
void Write_Dx_m1a_npu0_Trp0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP0.TRP_32BIT_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp0_TRP_32BIT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.TRP_32BIT_MODE : " << ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_32BIT_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_32BIT_MODE;
}
void Write_Dx_m1a_npu0_Trp0_TRP_32BIT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.TRP_32BIT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_32BIT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP0.TRP_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp0_TRP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.TRP_EN : " << ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_EN;
}
void Write_Dx_m1a_npu0_Trp0_TRP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10) + "] DX_M1A_NPU0.TRP0.TRP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP0.TRP_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_NPU0.TRP1 : " << ((dxDX_M1A_NPU0_t*) base)->TRP1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP1.U;
}
void Write_Dx_m1a_npu0_Trp1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_NPU0.TRP1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->TRP1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.TRP1.TRP_TOTAL_WSIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp1_TRP_TOTAL_WSIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_NPU0.TRP1.TRP_TOTAL_WSIZE : " << ((dxDX_M1A_NPU0_t*) base)->TRP1.TRP_TOTAL_WSIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP1.TRP_TOTAL_WSIZE;
}
void Write_Dx_m1a_npu0_Trp1_TRP_TOTAL_WSIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_NPU0.TRP1.TRP_TOTAL_WSIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP1.TRP_TOTAL_WSIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP1.TRP_IN_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp1_TRP_IN_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_NPU0.TRP1.TRP_IN_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->TRP1.TRP_IN_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP1.TRP_IN_SIZE;
}
void Write_Dx_m1a_npu0_Trp1_TRP_IN_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14) + "] DX_M1A_NPU0.TRP1.TRP_IN_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP1.TRP_IN_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2 : " << ((dxDX_M1A_NPU0_t*) base)->TRP2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP2.U;
}
void Write_Dx_m1a_npu0_Trp2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->TRP2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.TRP2.TRP_ADDR_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp2_TRP_ADDR_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2.TRP_ADDR_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_ADDR_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_ADDR_STRIDE;
}
void Write_Dx_m1a_npu0_Trp2_TRP_ADDR_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2.TRP_ADDR_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_ADDR_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP2.TRP_ITER (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp2_TRP_ITER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2.TRP_ITER : " << ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_ITER << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_ITER;
}
void Write_Dx_m1a_npu0_Trp2_TRP_ITER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2.TRP_ITER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_ITER = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP2.TRP_LAST_WSIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp2_TRP_LAST_WSIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2.TRP_LAST_WSIZE : " << ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_LAST_WSIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_LAST_WSIZE;
}
void Write_Dx_m1a_npu0_Trp2_TRP_LAST_WSIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18) + "] DX_M1A_NPU0.TRP2.TRP_LAST_WSIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP2.TRP_LAST_WSIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_NPU0.TRP3 : " << ((dxDX_M1A_NPU0_t*) base)->TRP3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP3.U;
}
void Write_Dx_m1a_npu0_Trp3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_NPU0.TRP3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->TRP3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.TRP3.TRP_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp3_TRP_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_NPU0.TRP3.TRP_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->TRP3.TRP_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP3.TRP_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Trp3_TRP_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c) + "] DX_M1A_NPU0.TRP3.TRP_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP3.TRP_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.TRP4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_NPU0.TRP4 : " << ((dxDX_M1A_NPU0_t*) base)->TRP4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP4.U;
}
void Write_Dx_m1a_npu0_Trp4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_NPU0.TRP4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->TRP4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.TRP4.TRP_WRITE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Trp4_TRP_WRITE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_NPU0.TRP4.TRP_WRITE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->TRP4.TRP_WRITE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->TRP4.TRP_WRITE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Trp4_TRP_WRITE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20) + "] DX_M1A_NPU0.TRP4.TRP_WRITE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->TRP4.TRP_WRITE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.ARG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Arg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0 : " << ((dxDX_M1A_NPU0_t*) base)->ARG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->ARG0.U;
}
void Write_Dx_m1a_npu0_Arg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->ARG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->ARG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.ARG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Arg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->ARG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->ARG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Arg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->ARG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.ARG0.ARG_MAX_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Arg0_ARG_MAX_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.ARG_MAX_MODE : " << ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_MAX_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_MAX_MODE;
}
void Write_Dx_m1a_npu0_Arg0_ARG_MAX_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.ARG_MAX_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_MAX_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.ARG0.ARG_CLASS_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Arg0_ARG_CLASS_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.ARG_CLASS_NUM : " << ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_CLASS_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_CLASS_NUM;
}
void Write_Dx_m1a_npu0_Arg0_ARG_CLASS_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.ARG_CLASS_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_CLASS_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.ARG0.ARG_MAX_OUT_FORMAT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Arg0_ARG_MAX_OUT_FORMAT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.ARG_MAX_OUT_FORMAT : " << ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_MAX_OUT_FORMAT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_MAX_OUT_FORMAT;
}
void Write_Dx_m1a_npu0_Arg0_ARG_MAX_OUT_FORMAT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24) + "] DX_M1A_NPU0.ARG0.ARG_MAX_OUT_FORMAT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->ARG0.ARG_MAX_OUT_FORMAT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.POOL0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_NPU0.POOL0 : " << ((dxDX_M1A_NPU0_t*) base)->POOL0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL0.U;
}
void Write_Dx_m1a_npu0_Pool0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_NPU0.POOL0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->POOL0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.POOL0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_NPU0.POOL0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->POOL0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pool0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_NPU0.POOL0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.POOL0.POOL_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool0_POOL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_NPU0.POOL0.POOL_MODE : " << ((dxDX_M1A_NPU0_t*) base)->POOL0.POOL_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL0.POOL_MODE;
}
void Write_Dx_m1a_npu0_Pool0_POOL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28) + "] DX_M1A_NPU0.POOL0.POOL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL0.POOL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.POOL1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_NPU0.POOL1 : " << ((dxDX_M1A_NPU0_t*) base)->POOL1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL1.U;
}
void Write_Dx_m1a_npu0_Pool1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_NPU0.POOL1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->POOL1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.POOL1.POOL_WINSIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool1_POOL_WINSIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_NPU0.POOL1.POOL_WINSIZE : " << ((dxDX_M1A_NPU0_t*) base)->POOL1.POOL_WINSIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL1.POOL_WINSIZE;
}
void Write_Dx_m1a_npu0_Pool1_POOL_WINSIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c) + "] DX_M1A_NPU0.POOL1.POOL_WINSIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL1.POOL_WINSIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.POOL2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_NPU0.POOL2 : " << ((dxDX_M1A_NPU0_t*) base)->POOL2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL2.U;
}
void Write_Dx_m1a_npu0_Pool2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_NPU0.POOL2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->POOL2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.POOL2.AVG_POOL_MULT_COEFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pool2_AVG_POOL_MULT_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_NPU0.POOL2.AVG_POOL_MULT_COEFF : " << ((dxDX_M1A_NPU0_t*) base)->POOL2.AVG_POOL_MULT_COEFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->POOL2.AVG_POOL_MULT_COEFF;
}
void Write_Dx_m1a_npu0_Pool2_AVG_POOL_MULT_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30) + "] DX_M1A_NPU0.POOL2.AVG_POOL_MULT_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->POOL2.AVG_POOL_MULT_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.U;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_CTRL0.SFU_HALF_RUN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SFU_HALF_RUN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SFU_HALF_RUN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_HALF_RUN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_HALF_RUN_MODE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SFU_HALF_RUN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SFU_HALF_RUN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_HALF_RUN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SKIP_ADD_SEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SKIP_ADD_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SKIP_ADD_SEL : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_ADD_SEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_ADD_SEL;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SKIP_ADD_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SKIP_ADD_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_ADD_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SKIP_MUL_SEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SKIP_MUL_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SKIP_MUL_SEL : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_MUL_SEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_MUL_SEL;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SKIP_MUL_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SKIP_MUL_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_MUL_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.FLOAT2INT_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_FLOAT2INT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.FLOAT2INT_MODE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.FLOAT2INT_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.FLOAT2INT_MODE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_FLOAT2INT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.FLOAT2INT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.FLOAT2INT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SKIP_IN_TYPE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SKIP_IN_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SKIP_IN_TYPE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_IN_TYPE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_IN_TYPE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SKIP_IN_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SKIP_IN_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SKIP_IN_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_POW_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_POW_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_POW_EN : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ACT_POW_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ACT_POW_EN;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_POW_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_POW_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ACT_POW_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_MODE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ACT_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ACT_MODE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ACT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.PRE_MULT_COEFF_SEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_MULT_COEFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_MULT_COEFF_SEL : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_MULT_COEFF_SEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_MULT_COEFF_SEL;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_MULT_COEFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_MULT_COEFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_MULT_COEFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.ACT_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_ACT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.ACT_MODE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.ACT_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.ACT_MODE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_ACT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.ACT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.ACT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.ACT_INOUT_CTRL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_ACT_INOUT_CTRL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.ACT_INOUT_CTRL : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.ACT_INOUT_CTRL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.ACT_INOUT_CTRL;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_ACT_INOUT_CTRL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.ACT_INOUT_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.ACT_INOUT_CTRL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.POST_ACT_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_POST_ACT_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.POST_ACT_MODE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.POST_ACT_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.POST_ACT_MODE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_POST_ACT_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.POST_ACT_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.POST_ACT_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.PRE_ADD_COEFF_SEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_ADD_COEFF_SEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_ADD_COEFF_SEL : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ADD_COEFF_SEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ADD_COEFF_SEL;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_ADD_COEFF_SEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.PRE_ADD_COEFF_SEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.PRE_ADD_COEFF_SEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SE_EN : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SE_EN;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SE_WRITE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SE_WRITE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SE_WRITE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SE_WRITE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SE_WRITE;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SE_WRITE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SE_WRITE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SE_WRITE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_NUM : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_OUT_MERGE_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_OUT_MERGE_NUM;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_OUT_MERGE_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_EN : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_OUT_MERGE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_OUT_MERGE_EN;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.SFU_OUT_MERGE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_CTRL0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_ctrl0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.RESERVED0;
}
void Write_Dx_m1a_npu0_Sfu_ctrl0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34) + "] DX_M1A_NPU0.SFU_CTRL0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_CTRL0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_NPU0.SFU_COEFF0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_NPU0.SFU_COEFF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF0.CLIP_MAX (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff0_CLIP_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_NPU0.SFU_COEFF0.CLIP_MAX : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.CLIP_MAX << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.CLIP_MAX;
}
void Write_Dx_m1a_npu0_Sfu_coeff0_CLIP_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38) + "] DX_M1A_NPU0.SFU_COEFF0.CLIP_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF0.CLIP_MAX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_NPU0.SFU_COEFF1 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_NPU0.SFU_COEFF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF1.CLIP_MIN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff1_CLIP_MIN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_NPU0.SFU_COEFF1.CLIP_MIN : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.CLIP_MIN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.CLIP_MIN;
}
void Write_Dx_m1a_npu0_Sfu_coeff1_CLIP_MIN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3c) + "] DX_M1A_NPU0.SFU_COEFF1.CLIP_MIN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF1.CLIP_MIN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_NPU0.SFU_COEFF2 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_NPU0.SFU_COEFF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF2.SKIP_ADD_COEFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff2_SKIP_ADD_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_NPU0.SFU_COEFF2.SKIP_ADD_COEFF : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.SKIP_ADD_COEFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.SKIP_ADD_COEFF;
}
void Write_Dx_m1a_npu0_Sfu_coeff2_SKIP_ADD_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x40) + "] DX_M1A_NPU0.SFU_COEFF2.SKIP_ADD_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF2.SKIP_ADD_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_NPU0.SFU_COEFF3 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_NPU0.SFU_COEFF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF3.PRE_ACT_MULT_COEFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff3_PRE_ACT_MULT_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_NPU0.SFU_COEFF3.PRE_ACT_MULT_COEFF : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.PRE_ACT_MULT_COEFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.PRE_ACT_MULT_COEFF;
}
void Write_Dx_m1a_npu0_Sfu_coeff3_PRE_ACT_MULT_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x44) + "] DX_M1A_NPU0.SFU_COEFF3.PRE_ACT_MULT_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF3.PRE_ACT_MULT_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_NPU0.SFU_COEFF4 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_NPU0.SFU_COEFF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF4.PRE_ACT_ADD_COEFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff4_PRE_ACT_ADD_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_NPU0.SFU_COEFF4.PRE_ACT_ADD_COEFF : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.PRE_ACT_ADD_COEFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.PRE_ACT_ADD_COEFF;
}
void Write_Dx_m1a_npu0_Sfu_coeff4_PRE_ACT_ADD_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x48) + "] DX_M1A_NPU0.SFU_COEFF4.PRE_ACT_ADD_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF4.PRE_ACT_ADD_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_NPU0.SFU_COEFF5 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_NPU0.SFU_COEFF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF5.LMUL_ADD_COEFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff5_LMUL_ADD_COEFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_NPU0.SFU_COEFF5.LMUL_ADD_COEFF : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.LMUL_ADD_COEFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.LMUL_ADD_COEFF;
}
void Write_Dx_m1a_npu0_Sfu_coeff5_LMUL_ADD_COEFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x4c) + "] DX_M1A_NPU0.SFU_COEFF5.LMUL_ADD_COEFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF5.LMUL_ADD_COEFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_NPU0.SFU_COEFF6 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_NPU0.SFU_COEFF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF6.ACT_OFFSET_VAL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff6_ACT_OFFSET_VAL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_NPU0.SFU_COEFF6.ACT_OFFSET_VAL : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.ACT_OFFSET_VAL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.ACT_OFFSET_VAL;
}
void Write_Dx_m1a_npu0_Sfu_coeff6_ACT_OFFSET_VAL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x50) + "] DX_M1A_NPU0.SFU_COEFF6.ACT_OFFSET_VAL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF6.ACT_OFFSET_VAL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_NPU0.SFU_COEFF7 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_NPU0.SFU_COEFF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF7.SKIP_SCALE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff7_SKIP_SCALE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_NPU0.SFU_COEFF7.SKIP_SCALE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.SKIP_SCALE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.SKIP_SCALE;
}
void Write_Dx_m1a_npu0_Sfu_coeff7_SKIP_SCALE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x54) + "] DX_M1A_NPU0.SFU_COEFF7.SKIP_SCALE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF7.SKIP_SCALE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_NPU0.SFU_COEFF8 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_NPU0.SFU_COEFF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF8.LEAKY_RELU_SLOPE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff8_LEAKY_RELU_SLOPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_NPU0.SFU_COEFF8.LEAKY_RELU_SLOPE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.LEAKY_RELU_SLOPE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.LEAKY_RELU_SLOPE;
}
void Write_Dx_m1a_npu0_Sfu_coeff8_LEAKY_RELU_SLOPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x58) + "] DX_M1A_NPU0.SFU_COEFF8.LEAKY_RELU_SLOPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF8.LEAKY_RELU_SLOPE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_COEFF9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_NPU0.SFU_COEFF9 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.U;
}
void Write_Dx_m1a_npu0_Sfu_coeff9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_NPU0.SFU_COEFF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_COEFF9.RELU6_CLIP_MAX (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_coeff9_RELU6_CLIP_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_NPU0.SFU_COEFF9.RELU6_CLIP_MAX : " << ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.RELU6_CLIP_MAX << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.RELU6_CLIP_MAX;
}
void Write_Dx_m1a_npu0_Sfu_coeff9_RELU6_CLIP_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x5c) + "] DX_M1A_NPU0.SFU_COEFF9.RELU6_CLIP_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_COEFF9.RELU6_CLIP_MAX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_NPU0.SFU_PAF0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.U;
}
void Write_Dx_m1a_npu0_Sfu_paf0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_NPU0.SFU_PAF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF0.PAF_BOUNDARY0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf0_PAF_BOUNDARY0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_NPU0.SFU_PAF0.PAF_BOUNDARY0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.PAF_BOUNDARY0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.PAF_BOUNDARY0;
}
void Write_Dx_m1a_npu0_Sfu_paf0_PAF_BOUNDARY0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x60) + "] DX_M1A_NPU0.SFU_PAF0.PAF_BOUNDARY0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF0.PAF_BOUNDARY0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_NPU0.SFU_PAF1 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.U;
}
void Write_Dx_m1a_npu0_Sfu_paf1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_NPU0.SFU_PAF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF1.PAF_BOUNDARY1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf1_PAF_BOUNDARY1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_NPU0.SFU_PAF1.PAF_BOUNDARY1 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.PAF_BOUNDARY1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.PAF_BOUNDARY1;
}
void Write_Dx_m1a_npu0_Sfu_paf1_PAF_BOUNDARY1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x64) + "] DX_M1A_NPU0.SFU_PAF1.PAF_BOUNDARY1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF1.PAF_BOUNDARY1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_NPU0.SFU_PAF2 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.U;
}
void Write_Dx_m1a_npu0_Sfu_paf2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_NPU0.SFU_PAF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF2.PAF_BOUNDARY2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf2_PAF_BOUNDARY2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_NPU0.SFU_PAF2.PAF_BOUNDARY2 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.PAF_BOUNDARY2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.PAF_BOUNDARY2;
}
void Write_Dx_m1a_npu0_Sfu_paf2_PAF_BOUNDARY2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x68) + "] DX_M1A_NPU0.SFU_PAF2.PAF_BOUNDARY2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF2.PAF_BOUNDARY2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_NPU0.SFU_PAF3 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.U;
}
void Write_Dx_m1a_npu0_Sfu_paf3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_NPU0.SFU_PAF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF3.PAF_BOUNDARY3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf3_PAF_BOUNDARY3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_NPU0.SFU_PAF3.PAF_BOUNDARY3 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.PAF_BOUNDARY3 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.PAF_BOUNDARY3;
}
void Write_Dx_m1a_npu0_Sfu_paf3_PAF_BOUNDARY3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x6c) + "] DX_M1A_NPU0.SFU_PAF3.PAF_BOUNDARY3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF3.PAF_BOUNDARY3 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_NPU0.SFU_PAF4 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.U;
}
void Write_Dx_m1a_npu0_Sfu_paf4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_NPU0.SFU_PAF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF4.PAF_BOUNDARY4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf4_PAF_BOUNDARY4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_NPU0.SFU_PAF4.PAF_BOUNDARY4 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.PAF_BOUNDARY4 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.PAF_BOUNDARY4;
}
void Write_Dx_m1a_npu0_Sfu_paf4_PAF_BOUNDARY4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x70) + "] DX_M1A_NPU0.SFU_PAF4.PAF_BOUNDARY4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF4.PAF_BOUNDARY4 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_NPU0.SFU_PAF5 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.U;
}
void Write_Dx_m1a_npu0_Sfu_paf5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_NPU0.SFU_PAF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF5.PAF_BOUNDARY5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf5_PAF_BOUNDARY5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_NPU0.SFU_PAF5.PAF_BOUNDARY5 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.PAF_BOUNDARY5 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.PAF_BOUNDARY5;
}
void Write_Dx_m1a_npu0_Sfu_paf5_PAF_BOUNDARY5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x74) + "] DX_M1A_NPU0.SFU_PAF5.PAF_BOUNDARY5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF5.PAF_BOUNDARY5 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_NPU0.SFU_PAF6 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.U;
}
void Write_Dx_m1a_npu0_Sfu_paf6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_NPU0.SFU_PAF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF6.PAF_BOUNDARY6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf6_PAF_BOUNDARY6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_NPU0.SFU_PAF6.PAF_BOUNDARY6 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.PAF_BOUNDARY6 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.PAF_BOUNDARY6;
}
void Write_Dx_m1a_npu0_Sfu_paf6_PAF_BOUNDARY6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x78) + "] DX_M1A_NPU0.SFU_PAF6.PAF_BOUNDARY6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF6.PAF_BOUNDARY6 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_NPU0.SFU_PAF7 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.U;
}
void Write_Dx_m1a_npu0_Sfu_paf7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_NPU0.SFU_PAF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF7.PAF_BOUNDARY7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf7_PAF_BOUNDARY7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_NPU0.SFU_PAF7.PAF_BOUNDARY7 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.PAF_BOUNDARY7 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.PAF_BOUNDARY7;
}
void Write_Dx_m1a_npu0_Sfu_paf7_PAF_BOUNDARY7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x7c) + "] DX_M1A_NPU0.SFU_PAF7.PAF_BOUNDARY7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF7.PAF_BOUNDARY7 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_NPU0.SFU_PAF8 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.U;
}
void Write_Dx_m1a_npu0_Sfu_paf8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_NPU0.SFU_PAF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF8.PAF_BOUNDARY8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf8_PAF_BOUNDARY8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_NPU0.SFU_PAF8.PAF_BOUNDARY8 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.PAF_BOUNDARY8 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.PAF_BOUNDARY8;
}
void Write_Dx_m1a_npu0_Sfu_paf8_PAF_BOUNDARY8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x80) + "] DX_M1A_NPU0.SFU_PAF8.PAF_BOUNDARY8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF8.PAF_BOUNDARY8 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_NPU0.SFU_PAF9 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.U;
}
void Write_Dx_m1a_npu0_Sfu_paf9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_NPU0.SFU_PAF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF9.PAF_BOUNDARY9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf9_PAF_BOUNDARY9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_NPU0.SFU_PAF9.PAF_BOUNDARY9 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.PAF_BOUNDARY9 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.PAF_BOUNDARY9;
}
void Write_Dx_m1a_npu0_Sfu_paf9_PAF_BOUNDARY9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x84) + "] DX_M1A_NPU0.SFU_PAF9.PAF_BOUNDARY9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF9.PAF_BOUNDARY9 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_NPU0.SFU_PAF10 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.U;
}
void Write_Dx_m1a_npu0_Sfu_paf10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_NPU0.SFU_PAF10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF10.PAF_BOUNDARY10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf10_PAF_BOUNDARY10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_NPU0.SFU_PAF10.PAF_BOUNDARY10 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.PAF_BOUNDARY10 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.PAF_BOUNDARY10;
}
void Write_Dx_m1a_npu0_Sfu_paf10_PAF_BOUNDARY10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x88) + "] DX_M1A_NPU0.SFU_PAF10.PAF_BOUNDARY10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF10.PAF_BOUNDARY10 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_NPU0.SFU_PAF11 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.U;
}
void Write_Dx_m1a_npu0_Sfu_paf11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_NPU0.SFU_PAF11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF11.PAF_BOUNDARY11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf11_PAF_BOUNDARY11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_NPU0.SFU_PAF11.PAF_BOUNDARY11 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.PAF_BOUNDARY11 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.PAF_BOUNDARY11;
}
void Write_Dx_m1a_npu0_Sfu_paf11_PAF_BOUNDARY11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x8c) + "] DX_M1A_NPU0.SFU_PAF11.PAF_BOUNDARY11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF11.PAF_BOUNDARY11 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_NPU0.SFU_PAF12 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.U;
}
void Write_Dx_m1a_npu0_Sfu_paf12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_NPU0.SFU_PAF12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF12.PAF_BOUNDARY12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf12_PAF_BOUNDARY12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_NPU0.SFU_PAF12.PAF_BOUNDARY12 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.PAF_BOUNDARY12 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.PAF_BOUNDARY12;
}
void Write_Dx_m1a_npu0_Sfu_paf12_PAF_BOUNDARY12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x90) + "] DX_M1A_NPU0.SFU_PAF12.PAF_BOUNDARY12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF12.PAF_BOUNDARY12 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_NPU0.SFU_PAF13 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.U;
}
void Write_Dx_m1a_npu0_Sfu_paf13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_NPU0.SFU_PAF13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF13.PAF_BOUNDARY13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf13_PAF_BOUNDARY13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_NPU0.SFU_PAF13.PAF_BOUNDARY13 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.PAF_BOUNDARY13 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.PAF_BOUNDARY13;
}
void Write_Dx_m1a_npu0_Sfu_paf13_PAF_BOUNDARY13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x94) + "] DX_M1A_NPU0.SFU_PAF13.PAF_BOUNDARY13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF13.PAF_BOUNDARY13 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_NPU0.SFU_PAF14 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.U;
}
void Write_Dx_m1a_npu0_Sfu_paf14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_NPU0.SFU_PAF14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF14.PAF_BOUNDARY14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf14_PAF_BOUNDARY14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_NPU0.SFU_PAF14.PAF_BOUNDARY14 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.PAF_BOUNDARY14 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.PAF_BOUNDARY14;
}
void Write_Dx_m1a_npu0_Sfu_paf14_PAF_BOUNDARY14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x98) + "] DX_M1A_NPU0.SFU_PAF14.PAF_BOUNDARY14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF14.PAF_BOUNDARY14 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF15 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_NPU0.SFU_PAF15 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.U;
}
void Write_Dx_m1a_npu0_Sfu_paf15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_NPU0.SFU_PAF15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF15.PAF_MULT_COEFF0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf15_PAF_MULT_COEFF0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_NPU0.SFU_PAF15.PAF_MULT_COEFF0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.PAF_MULT_COEFF0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.PAF_MULT_COEFF0;
}
void Write_Dx_m1a_npu0_Sfu_paf15_PAF_MULT_COEFF0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x9c) + "] DX_M1A_NPU0.SFU_PAF15.PAF_MULT_COEFF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF15.PAF_MULT_COEFF0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF16 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_NPU0.SFU_PAF16 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.U;
}
void Write_Dx_m1a_npu0_Sfu_paf16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_NPU0.SFU_PAF16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF16.PAF_MULT_COEFF1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf16_PAF_MULT_COEFF1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_NPU0.SFU_PAF16.PAF_MULT_COEFF1 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.PAF_MULT_COEFF1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.PAF_MULT_COEFF1;
}
void Write_Dx_m1a_npu0_Sfu_paf16_PAF_MULT_COEFF1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa0) + "] DX_M1A_NPU0.SFU_PAF16.PAF_MULT_COEFF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF16.PAF_MULT_COEFF1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF17 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_NPU0.SFU_PAF17 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.U;
}
void Write_Dx_m1a_npu0_Sfu_paf17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_NPU0.SFU_PAF17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF17.PAF_MULT_COEFF2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf17_PAF_MULT_COEFF2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_NPU0.SFU_PAF17.PAF_MULT_COEFF2 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.PAF_MULT_COEFF2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.PAF_MULT_COEFF2;
}
void Write_Dx_m1a_npu0_Sfu_paf17_PAF_MULT_COEFF2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa4) + "] DX_M1A_NPU0.SFU_PAF17.PAF_MULT_COEFF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF17.PAF_MULT_COEFF2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF18 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_NPU0.SFU_PAF18 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.U;
}
void Write_Dx_m1a_npu0_Sfu_paf18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_NPU0.SFU_PAF18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF18.PAF_MULT_COEFF3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf18_PAF_MULT_COEFF3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_NPU0.SFU_PAF18.PAF_MULT_COEFF3 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.PAF_MULT_COEFF3 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.PAF_MULT_COEFF3;
}
void Write_Dx_m1a_npu0_Sfu_paf18_PAF_MULT_COEFF3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xa8) + "] DX_M1A_NPU0.SFU_PAF18.PAF_MULT_COEFF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF18.PAF_MULT_COEFF3 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF19 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_NPU0.SFU_PAF19 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.U;
}
void Write_Dx_m1a_npu0_Sfu_paf19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_NPU0.SFU_PAF19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF19.PAF_MULT_COEFF4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf19_PAF_MULT_COEFF4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_NPU0.SFU_PAF19.PAF_MULT_COEFF4 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.PAF_MULT_COEFF4 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.PAF_MULT_COEFF4;
}
void Write_Dx_m1a_npu0_Sfu_paf19_PAF_MULT_COEFF4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xac) + "] DX_M1A_NPU0.SFU_PAF19.PAF_MULT_COEFF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF19.PAF_MULT_COEFF4 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF20 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_NPU0.SFU_PAF20 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.U;
}
void Write_Dx_m1a_npu0_Sfu_paf20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_NPU0.SFU_PAF20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF20.PAF_MULT_COEFF5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf20_PAF_MULT_COEFF5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_NPU0.SFU_PAF20.PAF_MULT_COEFF5 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.PAF_MULT_COEFF5 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.PAF_MULT_COEFF5;
}
void Write_Dx_m1a_npu0_Sfu_paf20_PAF_MULT_COEFF5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb0) + "] DX_M1A_NPU0.SFU_PAF20.PAF_MULT_COEFF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF20.PAF_MULT_COEFF5 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF21 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_NPU0.SFU_PAF21 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.U;
}
void Write_Dx_m1a_npu0_Sfu_paf21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_NPU0.SFU_PAF21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF21.PAF_MULT_COEFF6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf21_PAF_MULT_COEFF6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_NPU0.SFU_PAF21.PAF_MULT_COEFF6 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.PAF_MULT_COEFF6 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.PAF_MULT_COEFF6;
}
void Write_Dx_m1a_npu0_Sfu_paf21_PAF_MULT_COEFF6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb4) + "] DX_M1A_NPU0.SFU_PAF21.PAF_MULT_COEFF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF21.PAF_MULT_COEFF6 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF22 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_NPU0.SFU_PAF22 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.U;
}
void Write_Dx_m1a_npu0_Sfu_paf22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_NPU0.SFU_PAF22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF22.PAF_MULT_COEFF7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf22_PAF_MULT_COEFF7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_NPU0.SFU_PAF22.PAF_MULT_COEFF7 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.PAF_MULT_COEFF7 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.PAF_MULT_COEFF7;
}
void Write_Dx_m1a_npu0_Sfu_paf22_PAF_MULT_COEFF7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xb8) + "] DX_M1A_NPU0.SFU_PAF22.PAF_MULT_COEFF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF22.PAF_MULT_COEFF7 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF23 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_NPU0.SFU_PAF23 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.U;
}
void Write_Dx_m1a_npu0_Sfu_paf23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_NPU0.SFU_PAF23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF23.PAF_MULT_COEFF8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf23_PAF_MULT_COEFF8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_NPU0.SFU_PAF23.PAF_MULT_COEFF8 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.PAF_MULT_COEFF8 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.PAF_MULT_COEFF8;
}
void Write_Dx_m1a_npu0_Sfu_paf23_PAF_MULT_COEFF8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xbc) + "] DX_M1A_NPU0.SFU_PAF23.PAF_MULT_COEFF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF23.PAF_MULT_COEFF8 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF24 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_NPU0.SFU_PAF24 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.U;
}
void Write_Dx_m1a_npu0_Sfu_paf24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_NPU0.SFU_PAF24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF24.PAF_MULT_COEFF9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf24_PAF_MULT_COEFF9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_NPU0.SFU_PAF24.PAF_MULT_COEFF9 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.PAF_MULT_COEFF9 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.PAF_MULT_COEFF9;
}
void Write_Dx_m1a_npu0_Sfu_paf24_PAF_MULT_COEFF9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc0) + "] DX_M1A_NPU0.SFU_PAF24.PAF_MULT_COEFF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF24.PAF_MULT_COEFF9 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF25 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_M1A_NPU0.SFU_PAF25 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.U;
}
void Write_Dx_m1a_npu0_Sfu_paf25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_M1A_NPU0.SFU_PAF25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF25.PAF_MULT_COEFF10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf25_PAF_MULT_COEFF10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_M1A_NPU0.SFU_PAF25.PAF_MULT_COEFF10 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.PAF_MULT_COEFF10 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.PAF_MULT_COEFF10;
}
void Write_Dx_m1a_npu0_Sfu_paf25_PAF_MULT_COEFF10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc4) + "] DX_M1A_NPU0.SFU_PAF25.PAF_MULT_COEFF10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF25.PAF_MULT_COEFF10 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF26 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf26(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_M1A_NPU0.SFU_PAF26 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.U;
}
void Write_Dx_m1a_npu0_Sfu_paf26(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_M1A_NPU0.SFU_PAF26 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF26.PAF_MULT_COEFF11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf26_PAF_MULT_COEFF11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_M1A_NPU0.SFU_PAF26.PAF_MULT_COEFF11 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.PAF_MULT_COEFF11 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.PAF_MULT_COEFF11;
}
void Write_Dx_m1a_npu0_Sfu_paf26_PAF_MULT_COEFF11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xc8) + "] DX_M1A_NPU0.SFU_PAF26.PAF_MULT_COEFF11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF26.PAF_MULT_COEFF11 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF27 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf27(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_M1A_NPU0.SFU_PAF27 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.U;
}
void Write_Dx_m1a_npu0_Sfu_paf27(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_M1A_NPU0.SFU_PAF27 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF27.PAF_MULT_COEFF12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf27_PAF_MULT_COEFF12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_M1A_NPU0.SFU_PAF27.PAF_MULT_COEFF12 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.PAF_MULT_COEFF12 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.PAF_MULT_COEFF12;
}
void Write_Dx_m1a_npu0_Sfu_paf27_PAF_MULT_COEFF12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xcc) + "] DX_M1A_NPU0.SFU_PAF27.PAF_MULT_COEFF12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF27.PAF_MULT_COEFF12 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF28 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf28(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_M1A_NPU0.SFU_PAF28 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.U;
}
void Write_Dx_m1a_npu0_Sfu_paf28(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_M1A_NPU0.SFU_PAF28 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF28.PAF_MULT_COEFF13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf28_PAF_MULT_COEFF13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_M1A_NPU0.SFU_PAF28.PAF_MULT_COEFF13 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.PAF_MULT_COEFF13 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.PAF_MULT_COEFF13;
}
void Write_Dx_m1a_npu0_Sfu_paf28_PAF_MULT_COEFF13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd0) + "] DX_M1A_NPU0.SFU_PAF28.PAF_MULT_COEFF13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF28.PAF_MULT_COEFF13 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF29 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf29(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_M1A_NPU0.SFU_PAF29 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.U;
}
void Write_Dx_m1a_npu0_Sfu_paf29(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_M1A_NPU0.SFU_PAF29 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF29.PAF_MULT_COEFF14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf29_PAF_MULT_COEFF14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_M1A_NPU0.SFU_PAF29.PAF_MULT_COEFF14 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.PAF_MULT_COEFF14 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.PAF_MULT_COEFF14;
}
void Write_Dx_m1a_npu0_Sfu_paf29_PAF_MULT_COEFF14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd4) + "] DX_M1A_NPU0.SFU_PAF29.PAF_MULT_COEFF14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF29.PAF_MULT_COEFF14 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF30 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf30(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_M1A_NPU0.SFU_PAF30 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.U;
}
void Write_Dx_m1a_npu0_Sfu_paf30(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_M1A_NPU0.SFU_PAF30 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF30.PAF_MULT_COEFF15 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf30_PAF_MULT_COEFF15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_M1A_NPU0.SFU_PAF30.PAF_MULT_COEFF15 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.PAF_MULT_COEFF15 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.PAF_MULT_COEFF15;
}
void Write_Dx_m1a_npu0_Sfu_paf30_PAF_MULT_COEFF15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xd8) + "] DX_M1A_NPU0.SFU_PAF30.PAF_MULT_COEFF15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF30.PAF_MULT_COEFF15 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF31 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf31(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_M1A_NPU0.SFU_PAF31 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.U;
}
void Write_Dx_m1a_npu0_Sfu_paf31(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_M1A_NPU0.SFU_PAF31 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF31.PAF_ADD_COEFF0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf31_PAF_ADD_COEFF0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_M1A_NPU0.SFU_PAF31.PAF_ADD_COEFF0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.PAF_ADD_COEFF0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.PAF_ADD_COEFF0;
}
void Write_Dx_m1a_npu0_Sfu_paf31_PAF_ADD_COEFF0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xdc) + "] DX_M1A_NPU0.SFU_PAF31.PAF_ADD_COEFF0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF31.PAF_ADD_COEFF0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF32 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf32(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_M1A_NPU0.SFU_PAF32 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.U;
}
void Write_Dx_m1a_npu0_Sfu_paf32(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_M1A_NPU0.SFU_PAF32 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF32.PAF_ADD_COEFF1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf32_PAF_ADD_COEFF1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_M1A_NPU0.SFU_PAF32.PAF_ADD_COEFF1 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.PAF_ADD_COEFF1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.PAF_ADD_COEFF1;
}
void Write_Dx_m1a_npu0_Sfu_paf32_PAF_ADD_COEFF1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe0) + "] DX_M1A_NPU0.SFU_PAF32.PAF_ADD_COEFF1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF32.PAF_ADD_COEFF1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF33 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf33(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_M1A_NPU0.SFU_PAF33 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.U;
}
void Write_Dx_m1a_npu0_Sfu_paf33(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_M1A_NPU0.SFU_PAF33 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF33.PAF_ADD_COEFF2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf33_PAF_ADD_COEFF2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_M1A_NPU0.SFU_PAF33.PAF_ADD_COEFF2 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.PAF_ADD_COEFF2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.PAF_ADD_COEFF2;
}
void Write_Dx_m1a_npu0_Sfu_paf33_PAF_ADD_COEFF2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe4) + "] DX_M1A_NPU0.SFU_PAF33.PAF_ADD_COEFF2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF33.PAF_ADD_COEFF2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF34 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf34(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_M1A_NPU0.SFU_PAF34 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.U;
}
void Write_Dx_m1a_npu0_Sfu_paf34(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_M1A_NPU0.SFU_PAF34 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF34.PAF_ADD_COEFF3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf34_PAF_ADD_COEFF3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_M1A_NPU0.SFU_PAF34.PAF_ADD_COEFF3 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.PAF_ADD_COEFF3 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.PAF_ADD_COEFF3;
}
void Write_Dx_m1a_npu0_Sfu_paf34_PAF_ADD_COEFF3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xe8) + "] DX_M1A_NPU0.SFU_PAF34.PAF_ADD_COEFF3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF34.PAF_ADD_COEFF3 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF35 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf35(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_M1A_NPU0.SFU_PAF35 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.U;
}
void Write_Dx_m1a_npu0_Sfu_paf35(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_M1A_NPU0.SFU_PAF35 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF35.PAF_ADD_COEFF4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf35_PAF_ADD_COEFF4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_M1A_NPU0.SFU_PAF35.PAF_ADD_COEFF4 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.PAF_ADD_COEFF4 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.PAF_ADD_COEFF4;
}
void Write_Dx_m1a_npu0_Sfu_paf35_PAF_ADD_COEFF4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xec) + "] DX_M1A_NPU0.SFU_PAF35.PAF_ADD_COEFF4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF35.PAF_ADD_COEFF4 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF36 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf36(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_M1A_NPU0.SFU_PAF36 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.U;
}
void Write_Dx_m1a_npu0_Sfu_paf36(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_M1A_NPU0.SFU_PAF36 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF36.PAF_ADD_COEFF5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf36_PAF_ADD_COEFF5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_M1A_NPU0.SFU_PAF36.PAF_ADD_COEFF5 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.PAF_ADD_COEFF5 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.PAF_ADD_COEFF5;
}
void Write_Dx_m1a_npu0_Sfu_paf36_PAF_ADD_COEFF5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf0) + "] DX_M1A_NPU0.SFU_PAF36.PAF_ADD_COEFF5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF36.PAF_ADD_COEFF5 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF37 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf37(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_M1A_NPU0.SFU_PAF37 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.U;
}
void Write_Dx_m1a_npu0_Sfu_paf37(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_M1A_NPU0.SFU_PAF37 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF37.PAF_ADD_COEFF6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf37_PAF_ADD_COEFF6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_M1A_NPU0.SFU_PAF37.PAF_ADD_COEFF6 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.PAF_ADD_COEFF6 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.PAF_ADD_COEFF6;
}
void Write_Dx_m1a_npu0_Sfu_paf37_PAF_ADD_COEFF6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf4) + "] DX_M1A_NPU0.SFU_PAF37.PAF_ADD_COEFF6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF37.PAF_ADD_COEFF6 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF38 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf38(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_M1A_NPU0.SFU_PAF38 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.U;
}
void Write_Dx_m1a_npu0_Sfu_paf38(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_M1A_NPU0.SFU_PAF38 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF38.PAF_ADD_COEFF7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf38_PAF_ADD_COEFF7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_M1A_NPU0.SFU_PAF38.PAF_ADD_COEFF7 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.PAF_ADD_COEFF7 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.PAF_ADD_COEFF7;
}
void Write_Dx_m1a_npu0_Sfu_paf38_PAF_ADD_COEFF7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xf8) + "] DX_M1A_NPU0.SFU_PAF38.PAF_ADD_COEFF7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF38.PAF_ADD_COEFF7 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF39 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf39(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_M1A_NPU0.SFU_PAF39 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.U;
}
void Write_Dx_m1a_npu0_Sfu_paf39(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_M1A_NPU0.SFU_PAF39 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF39.PAF_ADD_COEFF8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf39_PAF_ADD_COEFF8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_M1A_NPU0.SFU_PAF39.PAF_ADD_COEFF8 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.PAF_ADD_COEFF8 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.PAF_ADD_COEFF8;
}
void Write_Dx_m1a_npu0_Sfu_paf39_PAF_ADD_COEFF8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0xfc) + "] DX_M1A_NPU0.SFU_PAF39.PAF_ADD_COEFF8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF39.PAF_ADD_COEFF8 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF40 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf40(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_M1A_NPU0.SFU_PAF40 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.U;
}
void Write_Dx_m1a_npu0_Sfu_paf40(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_M1A_NPU0.SFU_PAF40 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF40.PAF_ADD_COEFF9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf40_PAF_ADD_COEFF9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_M1A_NPU0.SFU_PAF40.PAF_ADD_COEFF9 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.PAF_ADD_COEFF9 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.PAF_ADD_COEFF9;
}
void Write_Dx_m1a_npu0_Sfu_paf40_PAF_ADD_COEFF9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x100) + "] DX_M1A_NPU0.SFU_PAF40.PAF_ADD_COEFF9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF40.PAF_ADD_COEFF9 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF41 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf41(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_M1A_NPU0.SFU_PAF41 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.U;
}
void Write_Dx_m1a_npu0_Sfu_paf41(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_M1A_NPU0.SFU_PAF41 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF41.PAF_ADD_COEFF10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf41_PAF_ADD_COEFF10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_M1A_NPU0.SFU_PAF41.PAF_ADD_COEFF10 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.PAF_ADD_COEFF10 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.PAF_ADD_COEFF10;
}
void Write_Dx_m1a_npu0_Sfu_paf41_PAF_ADD_COEFF10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x104) + "] DX_M1A_NPU0.SFU_PAF41.PAF_ADD_COEFF10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF41.PAF_ADD_COEFF10 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF42 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf42(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_M1A_NPU0.SFU_PAF42 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.U;
}
void Write_Dx_m1a_npu0_Sfu_paf42(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_M1A_NPU0.SFU_PAF42 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF42.PAF_ADD_COEFF11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf42_PAF_ADD_COEFF11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_M1A_NPU0.SFU_PAF42.PAF_ADD_COEFF11 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.PAF_ADD_COEFF11 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.PAF_ADD_COEFF11;
}
void Write_Dx_m1a_npu0_Sfu_paf42_PAF_ADD_COEFF11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x108) + "] DX_M1A_NPU0.SFU_PAF42.PAF_ADD_COEFF11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF42.PAF_ADD_COEFF11 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF43 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf43(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_M1A_NPU0.SFU_PAF43 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.U;
}
void Write_Dx_m1a_npu0_Sfu_paf43(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_M1A_NPU0.SFU_PAF43 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF43.PAF_ADD_COEFF12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf43_PAF_ADD_COEFF12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_M1A_NPU0.SFU_PAF43.PAF_ADD_COEFF12 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.PAF_ADD_COEFF12 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.PAF_ADD_COEFF12;
}
void Write_Dx_m1a_npu0_Sfu_paf43_PAF_ADD_COEFF12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x10c) + "] DX_M1A_NPU0.SFU_PAF43.PAF_ADD_COEFF12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF43.PAF_ADD_COEFF12 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF44 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf44(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_M1A_NPU0.SFU_PAF44 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.U;
}
void Write_Dx_m1a_npu0_Sfu_paf44(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_M1A_NPU0.SFU_PAF44 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF44.PAF_ADD_COEFF13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf44_PAF_ADD_COEFF13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_M1A_NPU0.SFU_PAF44.PAF_ADD_COEFF13 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.PAF_ADD_COEFF13 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.PAF_ADD_COEFF13;
}
void Write_Dx_m1a_npu0_Sfu_paf44_PAF_ADD_COEFF13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x110) + "] DX_M1A_NPU0.SFU_PAF44.PAF_ADD_COEFF13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF44.PAF_ADD_COEFF13 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF45 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf45(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_M1A_NPU0.SFU_PAF45 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.U;
}
void Write_Dx_m1a_npu0_Sfu_paf45(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_M1A_NPU0.SFU_PAF45 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF45.PAF_ADD_COEFF14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf45_PAF_ADD_COEFF14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_M1A_NPU0.SFU_PAF45.PAF_ADD_COEFF14 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.PAF_ADD_COEFF14 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.PAF_ADD_COEFF14;
}
void Write_Dx_m1a_npu0_Sfu_paf45_PAF_ADD_COEFF14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x114) + "] DX_M1A_NPU0.SFU_PAF45.PAF_ADD_COEFF14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF45.PAF_ADD_COEFF14 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF46 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf46(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_M1A_NPU0.SFU_PAF46 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.U;
}
void Write_Dx_m1a_npu0_Sfu_paf46(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_M1A_NPU0.SFU_PAF46 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF46.PAF_ADD_COEFF15 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf46_PAF_ADD_COEFF15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_M1A_NPU0.SFU_PAF46.PAF_ADD_COEFF15 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.PAF_ADD_COEFF15 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.PAF_ADD_COEFF15;
}
void Write_Dx_m1a_npu0_Sfu_paf46_PAF_ADD_COEFF15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x118) + "] DX_M1A_NPU0.SFU_PAF46.PAF_ADD_COEFF15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF46.PAF_ADD_COEFF15 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_M1A_NPU0.SFU_SCALE_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.U;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_M1A_NPU0.SFU_SCALE_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_SCALE_CFG0.SCALE_OUTLIER_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg0_SCALE_OUTLIER_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_M1A_NPU0.SFU_SCALE_CFG0.SCALE_OUTLIER_EN : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.SCALE_OUTLIER_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.SCALE_OUTLIER_EN;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg0_SCALE_OUTLIER_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_M1A_NPU0.SFU_SCALE_CFG0.SCALE_OUTLIER_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.SCALE_OUTLIER_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_M1A_NPU0.SFU_SCALE_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x11c) + "] DX_M1A_NPU0.SFU_SCALE_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_M1A_NPU0.SFU_SCALE_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.U;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_M1A_NPU0.SFU_SCALE_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg1_SCALE_OUTLIER_BIG_BOUND(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_M1A_NPU0.SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg1_SCALE_OUTLIER_BIG_BOUND(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_M1A_NPU0.SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_M1A_NPU0.SFU_SCALE_CFG1.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.RESERVED0;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x120) + "] DX_M1A_NPU0.SFU_SCALE_CFG1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_M1A_NPU0.SFU_SCALE_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.U;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_M1A_NPU0.SFU_SCALE_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg2_SCALE_OUTLIER_SMALL_BOUND(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_M1A_NPU0.SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg2_SCALE_OUTLIER_SMALL_BOUND(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_M1A_NPU0.SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG2.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg2_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_M1A_NPU0.SFU_SCALE_CFG2.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.RESERVED0;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg2_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x124) + "] DX_M1A_NPU0.SFU_SCALE_CFG2.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG2.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.U;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_IN_SCALE_EXP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_IN_SCALE_EXP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP : " << ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP;
}
void Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x128) + "] DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_ELEM_BRD0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_elem_brd0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.U;
}
void Write_Dx_m1a_npu0_Sfu_elem_brd0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM : " << ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM;
}
void Write_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE;
}
void Write_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_EN : " << ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_EN;
}
void Write_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.ELEM_BROADCAST0_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_ELEM_BRD0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_elem_brd0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.RESERVED0;
}
void Write_Dx_m1a_npu0_Sfu_elem_brd0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x12c) + "] DX_M1A_NPU0.SFU_ELEM_BRD0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_ELEM_BRD0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.SFU_PAF_DISABLE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf_disable(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_M1A_NPU0.SFU_PAF_DISABLE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.U;
}
void Write_Dx_m1a_npu0_Sfu_paf_disable(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_M1A_NPU0.SFU_PAF_DISABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.SFU_PAF_DISABLE.PAF_LINE_DISABLE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Sfu_paf_disable_PAF_LINE_DISABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_M1A_NPU0.SFU_PAF_DISABLE.PAF_LINE_DISABLE : " << ((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.PAF_LINE_DISABLE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.PAF_LINE_DISABLE;
}
void Write_Dx_m1a_npu0_Sfu_paf_disable_PAF_LINE_DISABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x130) + "] DX_M1A_NPU0.SFU_PAF_DISABLE.PAF_LINE_DISABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->SFU_PAF_DISABLE.PAF_LINE_DISABLE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.U;
}
void Write_Dx_m1a_npu0_Pre0_i2c0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE0_I2C0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pre0_i2c0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C0.I2C0_LINE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_LINE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_LINE_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_LINE_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_LINE_OFFSET;
}
void Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_LINE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_LINE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_LINE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C0.I2C0_LAST_VALID_BYTE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_LAST_VALID_BYTE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_LAST_VALID_BYTE : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_LAST_VALID_BYTE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_LAST_VALID_BYTE;
}
void Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_LAST_VALID_BYTE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_LAST_VALID_BYTE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_LAST_VALID_BYTE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C0.I2C0_RQST_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_RQST_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_RQST_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_RQST_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_RQST_NUM;
}
void Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_RQST_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_RQST_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_RQST_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C0.I2C0_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_EN : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_EN;
}
void Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x134) + "] DX_M1A_NPU0.PRE0_I2C0.I2C0_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C0.I2C0_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_M1A_NPU0.PRE0_I2C1 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.U;
}
void Write_Dx_m1a_npu0_Pre0_i2c1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_M1A_NPU0.PRE0_I2C1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c1_I2C0_WRITE_FEATURE_BASE_ADDR_0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_M1A_NPU0.PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0;
}
void Write_Dx_m1a_npu0_Pre0_i2c1_I2C0_WRITE_FEATURE_BASE_ADDR_0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_M1A_NPU0.PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_M1A_NPU0.PRE0_I2C1.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.RESERVED0;
}
void Write_Dx_m1a_npu0_Pre0_i2c1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x138) + "] DX_M1A_NPU0.PRE0_I2C1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_M1A_NPU0.PRE0_I2C2 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.U;
}
void Write_Dx_m1a_npu0_Pre0_i2c2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_M1A_NPU0.PRE0_I2C2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2;
}
void Write_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1;
}
void Write_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x13c) + "] DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_M1A_NPU0.PRE0_I2C3 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.U;
}
void Write_Dx_m1a_npu0_Pre0_i2c3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_M1A_NPU0.PRE0_I2C3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE0_I2C3.I2C0_HEIGHT_MAX (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c3_I2C0_HEIGHT_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_M1A_NPU0.PRE0_I2C3.I2C0_HEIGHT_MAX : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.I2C0_HEIGHT_MAX << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.I2C0_HEIGHT_MAX;
}
void Write_Dx_m1a_npu0_Pre0_i2c3_I2C0_HEIGHT_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_M1A_NPU0.PRE0_I2C3.I2C0_HEIGHT_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.I2C0_HEIGHT_MAX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_I2C3.I2C0_WIDTH_MAX (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_i2c3_I2C0_WIDTH_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_M1A_NPU0.PRE0_I2C3.I2C0_WIDTH_MAX : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.I2C0_WIDTH_MAX << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.I2C0_WIDTH_MAX;
}
void Write_Dx_m1a_npu0_Pre0_i2c3_I2C0_WIDTH_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x140) + "] DX_M1A_NPU0.PRE0_I2C3.I2C0_WIDTH_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_I2C3.I2C0_WIDTH_MAX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_FMT0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.U;
}
void Write_Dx_m1a_npu0_Pre0_fmt0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE0_FMT0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pre0_fmt0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_LINE_OPT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_LINE_OPT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_LINE_OPT : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_FIRST_LINE_OPT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_FIRST_LINE_OPT;
}
void Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_LINE_OPT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_LINE_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_FIRST_LINE_OPT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_VALID_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_FIRST_VALID_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_FIRST_VALID_NUM;
}
void Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_FIRST_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_FMT0.FMT0_CH_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_CH_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_CH_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_CH_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_CH_MODE;
}
void Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_CH_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_CH_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_CH_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_FMT0.FMT0_ENABLE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_ENABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_ENABLE : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_ENABLE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_ENABLE;
}
void Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_ENABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x144) + "] DX_M1A_NPU0.PRE0_FMT0.FMT0_ENABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT0.FMT0_ENABLE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE0_FMT1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_M1A_NPU0.PRE0_FMT1 : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.U;
}
void Write_Dx_m1a_npu0_Pre0_fmt1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_M1A_NPU0.PRE0_FMT1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE0_FMT1.FMT0_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre0_fmt1_FMT0_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_M1A_NPU0.PRE0_FMT1.FMT0_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.FMT0_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.FMT0_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pre0_fmt1_FMT0_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x148) + "] DX_M1A_NPU0.PRE0_FMT1.FMT0_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE0_FMT1.FMT0_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen0_PE0_RF_ADDR_GEN_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen0_PE0_RF_ADDR_GEN_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x14c) + "] DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_M1A_NPU0.PE0_ADDR_GEN1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_M1A_NPU0.PE0_ADDR_GEN1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_M1A_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x150) + "] DX_M1A_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_M1A_NPU0.PE0_ADDR_GEN2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_M1A_NPU0.PE0_ADDR_GEN2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x154) + "] DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_M1A_NPU0.PE0_ADDR_GEN3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_M1A_NPU0.PE0_ADDR_GEN3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_SURFACE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_SURFACE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x158) + "] DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen4_PE0_ELEM_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen4_PE0_ELEM_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN4.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen4_PE0_DEFAULT_F_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen4_PE0_DEFAULT_F_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x15c) + "] DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_M1A_NPU0.PE0_ADDR_GEN5 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_M1A_NPU0.PE0_ADDR_GEN5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.PE0_ELEM_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.PE0_ELEM_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.PE0_ELEM_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.PE0_ELEM_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.PE0_ELEM_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x160) + "] DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN5.PE0_ELEM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_M1A_NPU0.PE0_ADDR_GEN6 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_M1A_NPU0.PE0_ADDR_GEN6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x164) + "] DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x168) + "] DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.U;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x16c) + "] DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CTRL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.U;
}
void Write_Dx_m1a_npu0_Pe0_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CTRL.PE0_CONV_TYPE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_CONV_TYPE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_CONV_TYPE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_CONV_TYPE;
}
void Write_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_CONV_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_CONV_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CTRL.PE0_CONV_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_CONV_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_CONV_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_CONV_EN;
}
void Write_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_CONV_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_CONV_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_DEPTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_DEPTH;
}
void Write_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_DEPTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_EN;
}
void Write_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SYSTOLIC_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SFUIN_VALID_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SFUIN_VALID_NUM;
}
void Write_Dx_m1a_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x170) + "] DX_M1A_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CTRL.PE0_SFUIN_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_M1A_NPU0.PE0_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_M1A_NPU0.PE0_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_NUM;
}
void Write_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_MOD << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_MOD;
}
void Write_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x174) + "] DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG0.PE0_LAST_CONV_MOD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_M1A_NPU0.PE0_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_M1A_NPU0.PE0_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_CHANNEL;
}
void Write_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_NUMBER << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_NUMBER;
}
void Write_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x178) + "] DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG1.PE0_OFEATURE_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_M1A_NPU0.PE0_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_M1A_NPU0.PE0_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_WIDTH;
}
void Write_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_HEIGHT;
}
void Write_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x17c) + "] DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG2.PE0_OFEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_M1A_NPU0.PE0_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_M1A_NPU0.PE0_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG3.PE0_OFEATURE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg3_PE0_OFEATURE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_M1A_NPU0.PE0_CFG3.PE0_OFEATURE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.PE0_OFEATURE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.PE0_OFEATURE_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg3_PE0_OFEATURE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x180) + "] DX_M1A_NPU0.PE0_CFG3.PE0_OFEATURE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG3.PE0_OFEATURE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_M1A_NPU0.PE0_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_M1A_NPU0.PE0_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_HEIGHT;
}
void Write_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_CHANNEL;
}
void Write_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x184) + "] DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG4.PE0_FEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_M1A_NPU0.PE0_CFG5 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_M1A_NPU0.PE0_CFG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG5.PE0_FILTER_NUMBER (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg5_PE0_FILTER_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_M1A_NPU0.PE0_CFG5.PE0_FILTER_NUMBER : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_NUMBER << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_NUMBER;
}
void Write_Dx_m1a_npu0_Pe0_cfg5_PE0_FILTER_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_M1A_NPU0.PE0_CFG5.PE0_FILTER_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.PE0_FILTER_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG5.PE0_FEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg5_PE0_FEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_M1A_NPU0.PE0_CFG5.PE0_FEATURE_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.PE0_FEATURE_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.PE0_FEATURE_WIDTH;
}
void Write_Dx_m1a_npu0_Pe0_cfg5_PE0_FEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x188) + "] DX_M1A_NPU0.PE0_CFG5.PE0_FEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG5.PE0_FEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG6.PE0_PAD_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg6_PE0_PAD_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_PAD_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_PAD_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_PAD_MODE;
}
void Write_Dx_m1a_npu0_Pe0_cfg6_PE0_PAD_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_PAD_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_PAD_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG6.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_cfg6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_WIDTH;
}
void Write_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_HEIGHT;
}
void Write_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_CHANNEL;
}
void Write_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x18c) + "] DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG6.PE0_FILTER_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_TOP_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_TOP_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_TOP_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_BOTTOM_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_BOTTOM_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_BOTTOM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_LEFT_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_LEFT_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_LEFT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_RIGHT_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_RIGHT_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_RIGHT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG7.PE0_PAD_VALUE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_VALUE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_VALUE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_VALUE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_VALUE;
}
void Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_VALUE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x190) + "] DX_M1A_NPU0.PE0_CFG7.PE0_PAD_VALUE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG7.PE0_PAD_VALUE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_X (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_X : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_X << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_X;
}
void Write_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_X = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_Y (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_Y : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_Y << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_Y;
}
void Write_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_STRIDE_Y = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG8.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg8_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_cfg8_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_CHANNEL_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_CHANNEL_OFFSET;
}
void Write_Dx_m1a_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x194) + "] DX_M1A_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG8.PE0_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg9_PE0_ELEM_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET;
}
void Write_Dx_m1a_npu0_Pe0_cfg9_PE0_ELEM_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_X (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_X : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_DILATION_X << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_DILATION_X;
}
void Write_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_DILATION_X = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_Y (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_Y : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_DILATION_Y << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_DILATION_Y;
}
void Write_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.PE0_DILATION_Y = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG9.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg9_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_cfg9_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x198) + "] DX_M1A_NPU0.PE0_CFG9.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG9.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_M1A_NPU0.PE0_CFG10 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_M1A_NPU0.PE0_CFG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg10_PE0_READ_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_M1A_NPU0.PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg10_PE0_READ_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x19c) + "] DX_M1A_NPU0.PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_M1A_NPU0.PE0_CFG11 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_M1A_NPU0.PE0_CFG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg11_PE0_WRITE_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_M1A_NPU0.PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg11_PE0_WRITE_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a0) + "] DX_M1A_NPU0.PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_M1A_NPU0.PE0_CFG12 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_M1A_NPU0.PE0_CFG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg12_PE0_READ_WEIGHT_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_M1A_NPU0.PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg12_PE0_READ_WEIGHT_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a4) + "] DX_M1A_NPU0.PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_M1A_NPU0.PE0_CFG13 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_M1A_NPU0.PE0_CFG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG13.PE0_ELEM_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg13_PE0_ELEM_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_M1A_NPU0.PE0_CFG13.PE0_ELEM_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.PE0_ELEM_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.PE0_ELEM_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg13_PE0_ELEM_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1a8) + "] DX_M1A_NPU0.PE0_CFG13.PE0_ELEM_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG13.PE0_ELEM_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_M1A_NPU0.PE0_CFG14 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_M1A_NPU0.PE0_CFG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_M1A_NPU0.PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ac) + "] DX_M1A_NPU0.PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG15 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_M1A_NPU0.PE0_CFG15 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_M1A_NPU0.PE0_CFG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_M1A_NPU0.PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b0) + "] DX_M1A_NPU0.PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG16 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_M1A_NPU0.PE0_CFG16 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_M1A_NPU0.PE0_CFG16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_M1A_NPU0.PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b4) + "] DX_M1A_NPU0.PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG17 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_M1A_NPU0.PE0_CFG17 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_M1A_NPU0.PE0_CFG17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_M1A_NPU0.PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1b8) + "] DX_M1A_NPU0.PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG18 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_M1A_NPU0.PE0_CFG18 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_M1A_NPU0.PE0_CFG18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg18_PE0_SE_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_M1A_NPU0.PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg18_PE0_SE_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1bc) + "] DX_M1A_NPU0.PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG19 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_M1A_NPU0.PE0_CFG19 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_M1A_NPU0.PE0_CFG19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_M1A_NPU0.PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c0) + "] DX_M1A_NPU0.PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG20 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_MODE1_LINE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_MODE1_LINE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG20.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg20_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_cfg20_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.PE0_WF_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.PE0_WF_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c4) + "] DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG20.PE0_WF_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG21 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_M1A_NPU0.PE0_CFG21 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_M1A_NPU0.PE0_CFG21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg21_PE0_WF_ADDR_MODE1_LINE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_M1A_NPU0.PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_cfg21_PE0_WF_ADDR_MODE1_LINE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1c8) + "] DX_M1A_NPU0.PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG22 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_M1A_NPU0.PE0_CFG22 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_M1A_NPU0.PE0_CFG22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg22_PE0_WF_ADDR_SURFACE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_M1A_NPU0.PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_cfg22_PE0_WF_ADDR_SURFACE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1cc) + "] DX_M1A_NPU0.PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG23 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_M1A_NPU0.PE0_CFG23 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_M1A_NPU0.PE0_CFG23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG23.PE0_WF_WRITE_CNT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_WRITE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_M1A_NPU0.PE0_CFG23.PE0_WF_WRITE_CNT : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.PE0_WF_WRITE_CNT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.PE0_WF_WRITE_CNT;
}
void Write_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_WRITE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_M1A_NPU0.PE0_CFG23.PE0_WF_WRITE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.PE0_WF_WRITE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_ADDR_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_M1A_NPU0.PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_ADDR_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d0) + "] DX_M1A_NPU0.PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG24 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_M1A_NPU0.PE0_CFG24 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_M1A_NPU0.PE0_CFG24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG24.PE0_WF_SRC1_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg24_PE0_WF_SRC1_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_M1A_NPU0.PE0_CFG24.PE0_WF_SRC1_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.PE0_WF_SRC1_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.PE0_WF_SRC1_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_cfg24_PE0_WF_SRC1_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d4) + "] DX_M1A_NPU0.PE0_CFG24.PE0_WF_SRC1_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG24.PE0_WF_SRC1_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG25 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg25_PE0_SFU_OUT_DATA_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM;
}
void Write_Dx_m1a_npu0_Pe0_cfg25_PE0_SFU_OUT_DATA_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG25.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg25_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.RESERVED1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.RESERVED1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.RESERVED1;
}
void Write_Dx_m1a_npu0_Pe0_cfg25_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_SHIFT_LEN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN;
}
void Write_Dx_m1a_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_SHIFT_LEN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG25.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg25_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_cfg25_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1d8) + "] DX_M1A_NPU0.PE0_CFG25.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG25.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG26 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg26(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_M1A_NPU0.PE0_CFG26 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.U;
}
void Write_Dx_m1a_npu0_Pe0_cfg26(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_M1A_NPU0.PE0_CFG26 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_CFG26.PE0_ST_ADDR_GEN_MUL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg26_PE0_ST_ADDR_GEN_MUL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_M1A_NPU0.PE0_CFG26.PE0_ST_ADDR_GEN_MUL : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.PE0_ST_ADDR_GEN_MUL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.PE0_ST_ADDR_GEN_MUL;
}
void Write_Dx_m1a_npu0_Pe0_cfg26_PE0_ST_ADDR_GEN_MUL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_M1A_NPU0.PE0_CFG26.PE0_ST_ADDR_GEN_MUL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.PE0_ST_ADDR_GEN_MUL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_CFG26.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_cfg26_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_M1A_NPU0.PE0_CFG26.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_cfg26_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1dc) + "] DX_M1A_NPU0.PE0_CFG26.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_CFG26.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED3 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED3;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED2;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED1;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e0) + "] DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_VMEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.U;
}
void Write_Dx_m1a_npu0_Reduce0_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE;
}
void Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_NUM : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_CHANNEL_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_CHANNEL_NUM;
}
void Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_CHANNEL_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_MODE : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_MODE;
}
void Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_EN : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_EN;
}
void Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.REDUCE0_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Reduce0_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e4) + "] DX_M1A_NPU0.REDUCE0_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_M1A_NPU0.REDUCE0_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.U;
}
void Write_Dx_m1a_npu0_Reduce0_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_M1A_NPU0.REDUCE0_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_WIN_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_WIN_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_WIN_NUM : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.REDUCE0_WIN_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.REDUCE0_WIN_NUM;
}
void Write_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_WIN_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_WIN_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.REDUCE0_WIN_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_CNT_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM;
}
void Write_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_CNT_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1e8) + "] DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_M1A_NPU0.REDUCE0_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.U;
}
void Write_Dx_m1a_npu0_Reduce0_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_M1A_NPU0.REDUCE0_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg2_REDUCE0_RD_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_M1A_NPU0.REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Reduce0_cfg2_REDUCE0_RD_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1ec) + "] DX_M1A_NPU0.REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE0_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_M1A_NPU0.REDUCE0_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.U;
}
void Write_Dx_m1a_npu0_Reduce0_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_M1A_NPU0.REDUCE0_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce0_cfg3_REDUCE0_WR_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_M1A_NPU0.REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Reduce0_cfg3_REDUCE0_WR_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f0) + "] DX_M1A_NPU0.REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_CTRL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_START_OP_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_START_OP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_START_OP_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_START_OP_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_START_OP_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_START_OP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_START_OP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_START_OP_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_DMA_CTRL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_DMA_CTRL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH;
}
void Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_DUMMY_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_DUMMY_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f4) + "] DX_M1A_NPU0.PE0_DMA_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SRC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SRC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1f8) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg1_VMEM0_RD_ELEM_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg1_VMEM0_RD_ELEM_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x1fc) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg2_VMEM0_RD_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg2_VMEM0_RD_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x200) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_elem_cfg3_VMEM0_WT_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_elem_cfg3_VMEM0_WT_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x204) + "] DX_M1A_NPU0.PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.VMEM0_RD_W_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x208) + "] DX_M1A_NPU0.PE0_DMA_W_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_M1A_NPU0.PE0_DMA_W_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_M1A_NPU0.PE0_DMA_W_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x20c) + "] DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_M1A_NPU0.PE0_DMA_W_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_M1A_NPU0.PE0_DMA_W_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg2_VMEM0_RD_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_M1A_NPU0.PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg2_VMEM0_RD_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x210) + "] DX_M1A_NPU0.PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_W_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_M1A_NPU0.PE0_DMA_W_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_M1A_NPU0.PE0_DMA_W_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_w_cfg3_VMEM0_WT_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_M1A_NPU0.PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_w_cfg3_VMEM0_WT_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x214) + "] DX_M1A_NPU0.PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SRC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SRC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x218) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg1_VMEM0_RD_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg1_VMEM0_RD_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x21c) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg2_VMEM0_RD_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg2_VMEM0_RD_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x220) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg3_VMEM0_WT_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg3_VMEM0_WT_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x224) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_INF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_inf_cfg4_VMEM0_WT_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_inf_cfg4_VMEM0_WT_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x228) + "] DX_M1A_NPU0.PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED1;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x22c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg1_VMEM0_WT_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg1_VMEM0_WT_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x230) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg2_VMEM0_WT_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg2_VMEM0_WT_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x234) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg3_VMEM0_RD_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg3_VMEM0_RD_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x238) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_outf_cfg4_VMEM0_RD_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_outf_cfg4_VMEM0_RD_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x23c) + "] DX_M1A_NPU0.PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_ADD_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RF_RD_MUL_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x240) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_ADD_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_ADD_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_ADD_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_MUL_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_MUL_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x244) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG1.RF_RD_MUL_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg2_RF_RD_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg2_RF_RD_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x248) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg3_RF_WT_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg3_RF_WT_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x24c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg4_RF_RD_ADD_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg4_RF_RD_ADD_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x250) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG5 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg5_RF_WT_ADD_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg5_RF_WT_ADD_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x254) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG6.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x258) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x25c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG8 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg8_RF_RD_SKIP_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg8_RF_RD_SKIP_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x260) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG9 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg9_RF_WT_SKIP_MUL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg9_RF_WT_SKIP_MUL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x264) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG10 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg10_RF_RD_SKIP_ADD_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg10_RF_RD_SKIP_ADD_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x268) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG11 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg11_RF_WT_SKIP_ADD_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg11_RF_WT_SKIP_ADD_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x26c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_SIZE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_MODE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_EN;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RF_RD_SE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG12.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x270) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG12.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG12.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_SE_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_SE_TIME;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x274) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG13.RF_RD_SE_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG14 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg14_RF_RD_SE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg14_RF_RD_SE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x278) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG15 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG15 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg15_RF_WT_SE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg15_RF_WT_SE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x27c) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG16 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG16 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg16_RF_RD_GENERAL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg16_RF_RD_GENERAL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x280) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE0_DMA_RF_CFG17 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG17 : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.U;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe0_dma_rf_cfg17_RF_WT_GENERAL_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe0_dma_rf_cfg17_RF_WT_GENERAL_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x284) + "] DX_M1A_NPU0.PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.U;
}
void Write_Dx_m1a_npu0_Pre1_i2c0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE1_I2C0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pre1_i2c0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C0.I2C1_LINE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_LINE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_LINE_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_LINE_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_LINE_OFFSET;
}
void Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_LINE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_LINE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_LINE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C0.I2C1_LAST_VALID_BYTE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_LAST_VALID_BYTE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_LAST_VALID_BYTE : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_LAST_VALID_BYTE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_LAST_VALID_BYTE;
}
void Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_LAST_VALID_BYTE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_LAST_VALID_BYTE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_LAST_VALID_BYTE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C0.I2C1_RQST_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_RQST_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_RQST_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_RQST_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_RQST_NUM;
}
void Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_RQST_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_RQST_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_RQST_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C0.I2C1_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_EN : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_EN;
}
void Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x288) + "] DX_M1A_NPU0.PRE1_I2C0.I2C1_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C0.I2C1_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_M1A_NPU0.PRE1_I2C1 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.U;
}
void Write_Dx_m1a_npu0_Pre1_i2c1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_M1A_NPU0.PRE1_I2C1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c1_I2C1_WRITE_FEATURE_BASE_ADDR_0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_M1A_NPU0.PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0;
}
void Write_Dx_m1a_npu0_Pre1_i2c1_I2C1_WRITE_FEATURE_BASE_ADDR_0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_M1A_NPU0.PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_M1A_NPU0.PRE1_I2C1.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.RESERVED0;
}
void Write_Dx_m1a_npu0_Pre1_i2c1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x28c) + "] DX_M1A_NPU0.PRE1_I2C1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_M1A_NPU0.PRE1_I2C2 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.U;
}
void Write_Dx_m1a_npu0_Pre1_i2c2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_M1A_NPU0.PRE1_I2C2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2;
}
void Write_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1;
}
void Write_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x290) + "] DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_M1A_NPU0.PRE1_I2C3 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.U;
}
void Write_Dx_m1a_npu0_Pre1_i2c3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_M1A_NPU0.PRE1_I2C3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE1_I2C3.I2C1_HEIGHT_MAX (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c3_I2C1_HEIGHT_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_M1A_NPU0.PRE1_I2C3.I2C1_HEIGHT_MAX : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.I2C1_HEIGHT_MAX << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.I2C1_HEIGHT_MAX;
}
void Write_Dx_m1a_npu0_Pre1_i2c3_I2C1_HEIGHT_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_M1A_NPU0.PRE1_I2C3.I2C1_HEIGHT_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.I2C1_HEIGHT_MAX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_I2C3.I2C1_WIDTH_MAX (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_i2c3_I2C1_WIDTH_MAX(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_M1A_NPU0.PRE1_I2C3.I2C1_WIDTH_MAX : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.I2C1_WIDTH_MAX << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.I2C1_WIDTH_MAX;
}
void Write_Dx_m1a_npu0_Pre1_i2c3_I2C1_WIDTH_MAX(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x294) + "] DX_M1A_NPU0.PRE1_I2C3.I2C1_WIDTH_MAX : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_I2C3.I2C1_WIDTH_MAX = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_FMT0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.U;
}
void Write_Dx_m1a_npu0_Pre1_fmt0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE1_FMT0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pre1_fmt0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_LINE_OPT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_LINE_OPT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_LINE_OPT : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_FIRST_LINE_OPT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_FIRST_LINE_OPT;
}
void Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_LINE_OPT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_LINE_OPT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_FIRST_LINE_OPT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_VALID_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_FIRST_VALID_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_FIRST_VALID_NUM;
}
void Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_FIRST_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_FMT0.FMT1_CH_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_CH_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_CH_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_CH_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_CH_MODE;
}
void Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_CH_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_CH_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_CH_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_FMT0.FMT1_ENABLE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_ENABLE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_ENABLE : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_ENABLE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_ENABLE;
}
void Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_ENABLE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x298) + "] DX_M1A_NPU0.PRE1_FMT0.FMT1_ENABLE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT0.FMT1_ENABLE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PRE1_FMT1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_M1A_NPU0.PRE1_FMT1 : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.U;
}
void Write_Dx_m1a_npu0_Pre1_fmt1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_M1A_NPU0.PRE1_FMT1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PRE1_FMT1.FMT1_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pre1_fmt1_FMT1_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_M1A_NPU0.PRE1_FMT1.FMT1_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.FMT1_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.FMT1_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pre1_fmt1_FMT1_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x29c) + "] DX_M1A_NPU0.PRE1_FMT1.FMT1_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PRE1_FMT1.FMT1_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen0_PE1_RF_ADDR_GEN_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen0_PE1_RF_ADDR_GEN_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a0) + "] DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_M1A_NPU0.PE1_ADDR_GEN1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_M1A_NPU0.PE1_ADDR_GEN1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_M1A_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a4) + "] DX_M1A_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_M1A_NPU0.PE1_ADDR_GEN2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_M1A_NPU0.PE1_ADDR_GEN2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2a8) + "] DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_M1A_NPU0.PE1_ADDR_GEN3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_M1A_NPU0.PE1_ADDR_GEN3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_SURFACE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_SURFACE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ac) + "] DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen4_PE1_ELEM_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen4_PE1_ELEM_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN4.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen4_PE1_DEFAULT_F_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen4_PE1_DEFAULT_F_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b0) + "] DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_M1A_NPU0.PE1_ADDR_GEN5 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_M1A_NPU0.PE1_ADDR_GEN5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.PE1_ELEM_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.PE1_ELEM_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.PE1_ELEM_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.PE1_ELEM_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.PE1_ELEM_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b4) + "] DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN5.PE1_ELEM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_M1A_NPU0.PE1_ADDR_GEN6 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_M1A_NPU0.PE1_ADDR_GEN6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2b8) + "] DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2bc) + "] DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.U;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM;
}
void Write_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c0) + "] DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CTRL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.U;
}
void Write_Dx_m1a_npu0_Pe1_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CTRL.PE1_CONV_TYPE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_TYPE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_CONV_TYPE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_CONV_TYPE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_CONV_TYPE;
}
void Write_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_TYPE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_CONV_TYPE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_CONV_TYPE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CTRL.PE1_CONV_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_CONV_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_CONV_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_CONV_EN;
}
void Write_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_CONV_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_CONV_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_DEPTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_DEPTH;
}
void Write_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_DEPTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_EN;
}
void Write_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SYSTOLIC_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SFUIN_VALID_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SFUIN_VALID_NUM;
}
void Write_Dx_m1a_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c4) + "] DX_M1A_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CTRL.PE1_SFUIN_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_M1A_NPU0.PE1_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_M1A_NPU0.PE1_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_NUM;
}
void Write_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_MOD << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_MOD;
}
void Write_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2c8) + "] DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG0.PE1_LAST_CONV_MOD = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_M1A_NPU0.PE1_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_M1A_NPU0.PE1_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_CHANNEL;
}
void Write_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_NUMBER << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_NUMBER;
}
void Write_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2cc) + "] DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG1.PE1_OFEATURE_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_M1A_NPU0.PE1_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_M1A_NPU0.PE1_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_WIDTH;
}
void Write_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_HEIGHT;
}
void Write_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d0) + "] DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG2.PE1_OFEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_M1A_NPU0.PE1_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_M1A_NPU0.PE1_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG3.PE1_OFEATURE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg3_PE1_OFEATURE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_M1A_NPU0.PE1_CFG3.PE1_OFEATURE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.PE1_OFEATURE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.PE1_OFEATURE_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg3_PE1_OFEATURE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d4) + "] DX_M1A_NPU0.PE1_CFG3.PE1_OFEATURE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG3.PE1_OFEATURE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_M1A_NPU0.PE1_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_M1A_NPU0.PE1_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_HEIGHT;
}
void Write_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_CHANNEL;
}
void Write_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2d8) + "] DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG4.PE1_FEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG5 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg5(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_M1A_NPU0.PE1_CFG5 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg5(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_M1A_NPU0.PE1_CFG5 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG5.PE1_FILTER_NUMBER (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg5_PE1_FILTER_NUMBER(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_M1A_NPU0.PE1_CFG5.PE1_FILTER_NUMBER : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_NUMBER << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_NUMBER;
}
void Write_Dx_m1a_npu0_Pe1_cfg5_PE1_FILTER_NUMBER(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_M1A_NPU0.PE1_CFG5.PE1_FILTER_NUMBER : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.PE1_FILTER_NUMBER = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG5.PE1_FEATURE_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg5_PE1_FEATURE_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_M1A_NPU0.PE1_CFG5.PE1_FEATURE_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.PE1_FEATURE_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.PE1_FEATURE_WIDTH;
}
void Write_Dx_m1a_npu0_Pe1_cfg5_PE1_FEATURE_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2dc) + "] DX_M1A_NPU0.PE1_CFG5.PE1_FEATURE_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG5.PE1_FEATURE_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG6.PE1_PAD_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg6_PE1_PAD_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_PAD_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_PAD_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_PAD_MODE;
}
void Write_Dx_m1a_npu0_Pe1_cfg6_PE1_PAD_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_PAD_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_PAD_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG6.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg6_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_cfg6_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_WIDTH;
}
void Write_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_HEIGHT;
}
void Write_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_CHANNEL;
}
void Write_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e0) + "] DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG6.PE1_FILTER_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_TOP_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_TOP_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_TOP_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_BOTTOM_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_BOTTOM_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_BOTTOM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_LEFT_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_LEFT_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_LEFT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_RIGHT_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_RIGHT_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_RIGHT_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG7.PE1_PAD_VALUE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_VALUE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_VALUE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_VALUE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_VALUE;
}
void Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_VALUE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e4) + "] DX_M1A_NPU0.PE1_CFG7.PE1_PAD_VALUE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG7.PE1_PAD_VALUE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG8 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg8(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg8(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_X (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_X : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_X << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_X;
}
void Write_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_X = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_Y (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_Y : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_Y << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_Y;
}
void Write_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_STRIDE_Y = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG8.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg8_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_cfg8_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_CHANNEL_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_CHANNEL_OFFSET;
}
void Write_Dx_m1a_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2e8) + "] DX_M1A_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG8.PE1_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg9_PE1_ELEM_CHANNEL_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET;
}
void Write_Dx_m1a_npu0_Pe1_cfg9_PE1_ELEM_CHANNEL_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_X (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_X(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_X : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_DILATION_X << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_DILATION_X;
}
void Write_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_X(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_X : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_DILATION_X = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_Y (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_Y(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_Y : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_DILATION_Y << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_DILATION_Y;
}
void Write_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_Y(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_Y : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.PE1_DILATION_Y = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG9.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg9_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_cfg9_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2ec) + "] DX_M1A_NPU0.PE1_CFG9.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG9.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG10 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg10(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_M1A_NPU0.PE1_CFG10 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg10(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_M1A_NPU0.PE1_CFG10 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg10_PE1_READ_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_M1A_NPU0.PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg10_PE1_READ_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f0) + "] DX_M1A_NPU0.PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG11 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg11(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_M1A_NPU0.PE1_CFG11 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg11(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_M1A_NPU0.PE1_CFG11 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg11_PE1_WRITE_FEATURE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_M1A_NPU0.PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg11_PE1_WRITE_FEATURE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f4) + "] DX_M1A_NPU0.PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG12 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg12(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_M1A_NPU0.PE1_CFG12 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg12(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_M1A_NPU0.PE1_CFG12 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg12_PE1_READ_WEIGHT_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_M1A_NPU0.PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg12_PE1_READ_WEIGHT_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2f8) + "] DX_M1A_NPU0.PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG13 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg13(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_M1A_NPU0.PE1_CFG13 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg13(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_M1A_NPU0.PE1_CFG13 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG13.PE1_ELEM_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg13_PE1_ELEM_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_M1A_NPU0.PE1_CFG13.PE1_ELEM_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.PE1_ELEM_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.PE1_ELEM_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg13_PE1_ELEM_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x2fc) + "] DX_M1A_NPU0.PE1_CFG13.PE1_ELEM_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG13.PE1_ELEM_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG14 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg14(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_M1A_NPU0.PE1_CFG14 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg14(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_M1A_NPU0.PE1_CFG14 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_M1A_NPU0.PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x300) + "] DX_M1A_NPU0.PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG15 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg15(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_M1A_NPU0.PE1_CFG15 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg15(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_M1A_NPU0.PE1_CFG15 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_M1A_NPU0.PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x304) + "] DX_M1A_NPU0.PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG16 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg16(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_M1A_NPU0.PE1_CFG16 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg16(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_M1A_NPU0.PE1_CFG16 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_M1A_NPU0.PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x308) + "] DX_M1A_NPU0.PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG17 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg17(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_M1A_NPU0.PE1_CFG17 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg17(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_M1A_NPU0.PE1_CFG17 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_M1A_NPU0.PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x30c) + "] DX_M1A_NPU0.PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG18 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg18(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_M1A_NPU0.PE1_CFG18 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg18(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_M1A_NPU0.PE1_CFG18 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg18_PE1_SE_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_M1A_NPU0.PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg18_PE1_SE_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x310) + "] DX_M1A_NPU0.PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG19 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg19(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_M1A_NPU0.PE1_CFG19 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg19(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_M1A_NPU0.PE1_CFG19 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_M1A_NPU0.PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x314) + "] DX_M1A_NPU0.PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG20 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg20(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg20(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_MODE1_LINE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_MODE1_LINE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG20.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg20_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_cfg20_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_GEN_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_GEN_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_GEN_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.PE1_WF_ADDR_GEN_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.PE1_WF_ADDR_GEN_MODE;
}
void Write_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_GEN_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x318) + "] DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_GEN_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG20.PE1_WF_ADDR_GEN_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG21 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg21(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_M1A_NPU0.PE1_CFG21 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg21(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_M1A_NPU0.PE1_CFG21 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg21_PE1_WF_ADDR_MODE1_LINE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_M1A_NPU0.PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_cfg21_PE1_WF_ADDR_MODE1_LINE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x31c) + "] DX_M1A_NPU0.PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG22 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg22(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_M1A_NPU0.PE1_CFG22 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg22(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_M1A_NPU0.PE1_CFG22 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg22_PE1_WF_ADDR_SURFACE_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_M1A_NPU0.PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_cfg22_PE1_WF_ADDR_SURFACE_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x320) + "] DX_M1A_NPU0.PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG23 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg23(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_M1A_NPU0.PE1_CFG23 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg23(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_M1A_NPU0.PE1_CFG23 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG23.PE1_WF_WRITE_CNT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_WRITE_CNT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_M1A_NPU0.PE1_CFG23.PE1_WF_WRITE_CNT : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.PE1_WF_WRITE_CNT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.PE1_WF_WRITE_CNT;
}
void Write_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_WRITE_CNT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_M1A_NPU0.PE1_CFG23.PE1_WF_WRITE_CNT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.PE1_WF_WRITE_CNT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_ADDR_SURFACE_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_M1A_NPU0.PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_ADDR_SURFACE_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x324) + "] DX_M1A_NPU0.PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG24 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg24(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_M1A_NPU0.PE1_CFG24 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg24(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_M1A_NPU0.PE1_CFG24 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG24.PE1_WF_SRC1_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg24_PE1_WF_SRC1_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_M1A_NPU0.PE1_CFG24.PE1_WF_SRC1_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.PE1_WF_SRC1_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.PE1_WF_SRC1_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_cfg24_PE1_WF_SRC1_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x328) + "] DX_M1A_NPU0.PE1_CFG24.PE1_WF_SRC1_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG24.PE1_WF_SRC1_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG25 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg25(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg25(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg25_PE1_SFU_OUT_DATA_VALID_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM;
}
void Write_Dx_m1a_npu0_Pe1_cfg25_PE1_SFU_OUT_DATA_VALID_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG25.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg25_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.RESERVED1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.RESERVED1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.RESERVED1;
}
void Write_Dx_m1a_npu0_Pe1_cfg25_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_SHIFT_LEN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN;
}
void Write_Dx_m1a_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_SHIFT_LEN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG25.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg25_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_cfg25_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x32c) + "] DX_M1A_NPU0.PE1_CFG25.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG25.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG26 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg26(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_M1A_NPU0.PE1_CFG26 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.U;
}
void Write_Dx_m1a_npu0_Pe1_cfg26(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_M1A_NPU0.PE1_CFG26 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_CFG26.PE1_ST_ADDR_GEN_MUL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg26_PE1_ST_ADDR_GEN_MUL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_M1A_NPU0.PE1_CFG26.PE1_ST_ADDR_GEN_MUL : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.PE1_ST_ADDR_GEN_MUL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.PE1_ST_ADDR_GEN_MUL;
}
void Write_Dx_m1a_npu0_Pe1_cfg26_PE1_ST_ADDR_GEN_MUL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_M1A_NPU0.PE1_CFG26.PE1_ST_ADDR_GEN_MUL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.PE1_ST_ADDR_GEN_MUL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_CFG26.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_cfg26_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_M1A_NPU0.PE1_CFG26.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_cfg26_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x330) + "] DX_M1A_NPU0.PE1_CFG26.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_CFG26.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED3 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED3;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED3 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED2 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED2;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED2 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED1;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x334) + "] DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_VMEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.U;
}
void Write_Dx_m1a_npu0_Reduce1_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE;
}
void Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_NUM : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_CHANNEL_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_CHANNEL_NUM;
}
void Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_CHANNEL_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_MODE : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_MODE;
}
void Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_EN : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_EN;
}
void Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.REDUCE1_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Reduce1_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x338) + "] DX_M1A_NPU0.REDUCE1_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x33c) + "] DX_M1A_NPU0.REDUCE1_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.U;
}
void Write_Dx_m1a_npu0_Reduce1_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x33c) + "] DX_M1A_NPU0.REDUCE1_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_WIN_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_WIN_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x33c) + "] DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_WIN_NUM : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.REDUCE1_WIN_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.REDUCE1_WIN_NUM;
}
void Write_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_WIN_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x33c) + "] DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_WIN_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.REDUCE1_WIN_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_CNT_MAX_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x33c) + "] DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM;
}
void Write_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_CNT_MAX_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x33c) + "] DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x340) + "] DX_M1A_NPU0.REDUCE1_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.U;
}
void Write_Dx_m1a_npu0_Reduce1_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x340) + "] DX_M1A_NPU0.REDUCE1_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg2_REDUCE1_RD_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x340) + "] DX_M1A_NPU0.REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Reduce1_cfg2_REDUCE1_RD_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x340) + "] DX_M1A_NPU0.REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.REDUCE1_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x344) + "] DX_M1A_NPU0.REDUCE1_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.U;
}
void Write_Dx_m1a_npu0_Reduce1_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x344) + "] DX_M1A_NPU0.REDUCE1_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Reduce1_cfg3_REDUCE1_WR_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x344) + "] DX_M1A_NPU0.REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Reduce1_cfg3_REDUCE1_WR_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x344) + "] DX_M1A_NPU0.REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_CTRL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_ctrl(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_ctrl(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_START_OP_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_START_OP_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_START_OP_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_START_OP_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_START_OP_EN;
}
void Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_START_OP_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_START_OP_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_START_OP_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_DMA_CTRL_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE;
}
void Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_DMA_CTRL_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_BIT_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH;
}
void Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_BIT_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_DUMMY_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE;
}
void Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_DUMMY_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_CTRL.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_ctrl_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_dma_ctrl_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x348) + "] DX_M1A_NPU0.PE1_DMA_CTRL.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_CTRL.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SRC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SRC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x34c) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x350) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x350) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg1_VMEM1_RD_ELEM_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x350) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg1_VMEM1_RD_ELEM_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x350) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x354) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x354) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg2_VMEM1_RD_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x354) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg2_VMEM1_RD_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x354) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x358) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x358) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_elem_cfg3_VMEM1_WT_ELEM_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x358) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_elem_cfg3_VMEM1_WT_ELEM_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x358) + "] DX_M1A_NPU0.PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_TIME;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_MODE;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_EN;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.VMEM1_RD_W_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x35c) + "] DX_M1A_NPU0.PE1_DMA_W_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x360) + "] DX_M1A_NPU0.PE1_DMA_W_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x360) + "] DX_M1A_NPU0.PE1_DMA_W_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x360) + "] DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x360) + "] DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x360) + "] DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x360) + "] DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x364) + "] DX_M1A_NPU0.PE1_DMA_W_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x364) + "] DX_M1A_NPU0.PE1_DMA_W_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg2_VMEM1_RD_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x364) + "] DX_M1A_NPU0.PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg2_VMEM1_RD_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x364) + "] DX_M1A_NPU0.PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_W_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x368) + "] DX_M1A_NPU0.PE1_DMA_W_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x368) + "] DX_M1A_NPU0.PE1_DMA_W_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_w_cfg3_VMEM1_WT_W_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x368) + "] DX_M1A_NPU0.PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_w_cfg3_VMEM1_WT_W_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x368) + "] DX_M1A_NPU0.PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SRC(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SRC(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x36c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x370) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x370) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg1_VMEM1_RD_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x370) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg1_VMEM1_RD_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x370) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x374) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x374) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg2_VMEM1_RD_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x374) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg2_VMEM1_RD_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x374) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x378) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x378) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg3_VMEM1_WT_INF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x378) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg3_VMEM1_WT_INF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x378) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_INF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x37c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x37c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_inf_cfg4_VMEM1_WT_INF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x37c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_inf_cfg4_VMEM1_WT_INF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x37c) + "] DX_M1A_NPU0.PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_TIME(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_TIME(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED1 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED1;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED1 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED0;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x380) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x384) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG1 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x384) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg1_VMEM1_WT_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x384) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg1_VMEM1_WT_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x384) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x388) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG2 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x388) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg2_VMEM1_WT_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x388) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg2_VMEM1_WT_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x388) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38c) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG3 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38c) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg3_VMEM1_RD_OUTF_STRIDE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38c) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg3_VMEM1_RD_OUTF_STRIDE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x38c) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x390) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG4 : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x390) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Pe1_dma_outf_cfg4_VMEM1_RD_OUTF_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x390) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Pe1_dma_outf_cfg4_VMEM1_RD_OUTF_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x390) + "] DX_M1A_NPU0.PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT_OFFSET(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT_OFFSET(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_HEIGHT << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_HEIGHT;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_HEIGHT = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_WIDTH (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_WIDTH(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_WIDTH : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_WIDTH << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_WIDTH;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_WIDTH(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_WIDTH : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_GRID_WIDTH = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0.PPU_VMEM_WRITE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_VMEM_WRITE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_VMEM_WRITE_EN : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_VMEM_WRITE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_VMEM_WRITE_EN;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_VMEM_WRITE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_VMEM_WRITE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_VMEM_WRITE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0.PPU_1ST_TILE_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_1ST_TILE_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_1ST_TILE_EN : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_1ST_TILE_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_1ST_TILE_EN;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_1ST_TILE_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_1ST_TILE_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_1ST_TILE_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0.PPU_EN (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_EN(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_EN : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_EN << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_EN;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_EN(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.PPU_EN : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.PPU_EN = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_0.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_0_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.RESERVED0;
}
void Write_Dx_m1a_npu0_Ppu_cfg_0_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x394) + "] DX_M1A_NPU0.PPU_CFG_0.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_0.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_1 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_1(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_1(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_1_PPU_OUT_FEATURE_CHANNEL(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL;
}
void Write_Dx_m1a_npu0_Ppu_cfg_1_PPU_OUT_FEATURE_CHANNEL(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_1.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_1_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.RESERVED0;
}
void Write_Dx_m1a_npu0_Ppu_cfg_1_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_1.PPU_ARG_CLASS_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_1_PPU_ARG_CLASS_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1.PPU_ARG_CLASS_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.PPU_ARG_CLASS_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.PPU_ARG_CLASS_NUM;
}
void Write_Dx_m1a_npu0_Ppu_cfg_1_PPU_ARG_CLASS_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x398) + "] DX_M1A_NPU0.PPU_CFG_1.PPU_ARG_CLASS_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_1.PPU_ARG_CLASS_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_2 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_2(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x39c) + "] DX_M1A_NPU0.PPU_CFG_2 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_2(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x39c) + "] DX_M1A_NPU0.PPU_CFG_2 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_2.PPU_FILTER_IN_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_2_PPU_FILTER_IN_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x39c) + "] DX_M1A_NPU0.PPU_CFG_2.PPU_FILTER_IN_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.PPU_FILTER_IN_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.PPU_FILTER_IN_SIZE;
}
void Write_Dx_m1a_npu0_Ppu_cfg_2_PPU_FILTER_IN_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x39c) + "] DX_M1A_NPU0.PPU_CFG_2.PPU_FILTER_IN_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.PPU_FILTER_IN_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_2.PPU_ARG_IN_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_2_PPU_ARG_IN_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x39c) + "] DX_M1A_NPU0.PPU_CFG_2.PPU_ARG_IN_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.PPU_ARG_IN_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.PPU_ARG_IN_SIZE;
}
void Write_Dx_m1a_npu0_Ppu_cfg_2_PPU_ARG_IN_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x39c) + "] DX_M1A_NPU0.PPU_CFG_2.PPU_ARG_IN_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_2.PPU_ARG_IN_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_3 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_3(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a0) + "] DX_M1A_NPU0.PPU_CFG_3 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_3(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a0) + "] DX_M1A_NPU0.PPU_CFG_3 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_3.PPU_FILTER_THR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_3_PPU_FILTER_THR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a0) + "] DX_M1A_NPU0.PPU_CFG_3.PPU_FILTER_THR : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.PPU_FILTER_THR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.PPU_FILTER_THR;
}
void Write_Dx_m1a_npu0_Ppu_cfg_3_PPU_FILTER_THR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a0) + "] DX_M1A_NPU0.PPU_CFG_3.PPU_FILTER_THR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_3.PPU_FILTER_THR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_4.PPU_ANCHOR_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_ANCHOR_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_ANCHOR_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_ANCHOR_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_ANCHOR_NUM;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_ANCHOR_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_ANCHOR_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_ANCHOR_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4.PPU_CONV_NUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_CONV_NUM(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_CONV_NUM : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_CONV_NUM << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_CONV_NUM;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_CONV_NUM(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_CONV_NUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_CONV_NUM = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4.PPU_WRITE_ADDR_RST (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_WRITE_ADDR_RST(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_WRITE_ADDR_RST : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_WRITE_ADDR_RST << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_WRITE_ADDR_RST;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_WRITE_ADDR_RST(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_WRITE_ADDR_RST : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_WRITE_ADDR_RST = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4.PPU_DATA_SIZE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_DATA_SIZE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_DATA_SIZE : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_DATA_SIZE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_DATA_SIZE;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_DATA_SIZE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_DATA_SIZE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_DATA_SIZE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4.PPU_LABEL_ON (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_LABEL_ON(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_LABEL_ON : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_LABEL_ON << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_LABEL_ON;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_LABEL_ON(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_LABEL_ON : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_LABEL_ON = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.RESERVED0;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_4.PPU_FILTER_MODE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_FILTER_MODE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_FILTER_MODE : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_FILTER_MODE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_FILTER_MODE;
}
void Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_FILTER_MODE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a4) + "] DX_M1A_NPU0.PPU_CFG_4.PPU_FILTER_MODE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_4.PPU_FILTER_MODE = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_6 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_6(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a8) + "] DX_M1A_NPU0.PPU_CFG_6 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_6(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a8) + "] DX_M1A_NPU0.PPU_CFG_6 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_6.PPU_READ_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_6_PPU_READ_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a8) + "] DX_M1A_NPU0.PPU_CFG_6.PPU_READ_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.PPU_READ_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.PPU_READ_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Ppu_cfg_6_PPU_READ_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3a8) + "] DX_M1A_NPU0.PPU_CFG_6.PPU_READ_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_6.PPU_READ_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_7 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_7(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3ac) + "] DX_M1A_NPU0.PPU_CFG_7 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_7(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3ac) + "] DX_M1A_NPU0.PPU_CFG_7 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_7.PPU_WRITE_BASE_ADDR (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_7_PPU_WRITE_BASE_ADDR(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3ac) + "] DX_M1A_NPU0.PPU_CFG_7.PPU_WRITE_BASE_ADDR : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.PPU_WRITE_BASE_ADDR << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.PPU_WRITE_BASE_ADDR;
}
void Write_Dx_m1a_npu0_Ppu_cfg_7_PPU_WRITE_BASE_ADDR(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3ac) + "] DX_M1A_NPU0.PPU_CFG_7.PPU_WRITE_BASE_ADDR : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_7.PPU_WRITE_BASE_ADDR = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.PPU_CFG_9 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_9(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b0) + "] DX_M1A_NPU0.PPU_CFG_9 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.U;
}
void Write_Dx_m1a_npu0_Ppu_cfg_9(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b0) + "] DX_M1A_NPU0.PPU_CFG_9 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.PPU_CFG_9.RESERVED0 (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Ppu_cfg_9_RESERVED0(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b0) + "] DX_M1A_NPU0.PPU_CFG_9.RESERVED0 : " << ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.RESERVED0 << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.RESERVED0;
}
void Write_Dx_m1a_npu0_Ppu_cfg_9_RESERVED0(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b0) + "] DX_M1A_NPU0.PPU_CFG_9.RESERVED0 : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->PPU_CFG_9.RESERVED0 = val;
    IOMEM_BARRIER();
}

/* DX_M1A_NPU0.CHECKSUM (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Checksum(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b4) + "] DX_M1A_NPU0.CHECKSUM : " << ((dxDX_M1A_NPU0_t*) base)->CHECKSUM.U << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CHECKSUM.U;
}
void Write_Dx_m1a_npu0_Checksum(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b4) + "] DX_M1A_NPU0.CHECKSUM : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CHECKSUM.U = val;
    //*(volatile uint32_t*)&(((dxDX_M1A_NPU0_t*) base)->CHECKSUM.U) = val;
    IOMEM_BARRIER();
}
/* DX_M1A_NPU0.CHECKSUM.CHECKSUM_TILE (Category: NPU0) */
uint32_t Read_Dx_m1a_npu0_Checksum_CHECKSUM_TILE(void* base)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[R][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b4) + "] DX_M1A_NPU0.CHECKSUM.CHECKSUM_TILE : " << ((dxDX_M1A_NPU0_t*) base)->CHECKSUM.CHECKSUM_TILE << std::endl;
    return ((dxDX_M1A_NPU0_t*) base)->CHECKSUM.CHECKSUM_TILE;
}
void Write_Dx_m1a_npu0_Checksum_CHECKSUM_TILE(void* base, uint32_t val)
{
    if(logNpuRegAccess)
        std::cout << std::hex << "[W][" << (void*)base << "][+" + std::to_string(REG_DX_M1A_NPU0_OFFSET) + "][+"+std::to_string(0x3b4) + "] DX_M1A_NPU0.CHECKSUM.CHECKSUM_TILE : " << val << std::endl;
    IOMEM_BARRIER();
    ((dxDX_M1A_NPU0_t*) base)->CHECKSUM.CHECKSUM_TILE = val;
    IOMEM_BARRIER();
}


/* Register info */
vector<NpuReg> gNpuRegs_DX_M1A[1] = {

  [0] = {
    /* type, baseaddr, addr, len, mask, offset, reset_val, read, write, enable, name */
    { /* 0 : INDEX_DX_M1A_SYSTEM_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.ID", 
      Read_Dx_m1a_system_Id,
      Write_Dx_m1a_system_Id,
    },
    { /* 1 : INDEX_DX_M1A_SYSTEM_ID_RMAP_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x0, DX_M1A_SYSTEM_ID_RMAP_ID_LEN, DX_M1A_SYSTEM_ID_RMAP_ID_MASK, DX_M1A_SYSTEM_ID_RMAP_ID_OFFSET, 0xa6, true, false, true, false,
      "DX_M1A_SYSTEM.ID.RMAP_ID", 
      Read_Dx_m1a_system_Id_RMAP_ID,
      Write_Dx_m1a_system_Id_RMAP_ID,
    },
    { /* 2 : INDEX_DX_M1A_SYSTEM_ID_REVISION_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x0, DX_M1A_SYSTEM_ID_REVISION_ID_LEN, DX_M1A_SYSTEM_ID_REVISION_ID_MASK, DX_M1A_SYSTEM_ID_REVISION_ID_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.ID.REVISION_ID", 
      Read_Dx_m1a_system_Id_REVISION_ID,
      Write_Dx_m1a_system_Id_REVISION_ID,
    },
    { /* 3 : INDEX_DX_M1A_SYSTEM_ID_NPU_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x0, DX_M1A_SYSTEM_ID_NPU_ID_LEN, DX_M1A_SYSTEM_ID_NPU_ID_MASK, DX_M1A_SYSTEM_ID_NPU_ID_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.ID.NPU_ID", 
      Read_Dx_m1a_system_Id_NPU_ID,
      Write_Dx_m1a_system_Id_NPU_ID,
    },
    { /* 4 : INDEX_DX_M1A_SYSTEM_ID_DEVICE_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x0, DX_M1A_SYSTEM_ID_DEVICE_ID_LEN, DX_M1A_SYSTEM_ID_DEVICE_ID_MASK, DX_M1A_SYSTEM_ID_DEVICE_ID_OFFSET, 0xb2, true, false, true, false,
      "DX_M1A_SYSTEM.ID.DEVICE_ID", 
      Read_Dx_m1a_system_Id_DEVICE_ID,
      Write_Dx_m1a_system_Id_DEVICE_ID,
    },
    { /* 5 : INDEX_DX_M1A_SYSTEM_RUN_OPT */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_SYSTEM.RUN_OPT", 
      Read_Dx_m1a_system_Run_opt,
      Write_Dx_m1a_system_Run_opt,
    },
    { /* 6 : INDEX_DX_M1A_SYSTEM_RUN_OPT_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x4, DX_M1A_SYSTEM_RUN_OPT_RESERVED0_LEN, DX_M1A_SYSTEM_RUN_OPT_RESERVED0_MASK, DX_M1A_SYSTEM_RUN_OPT_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.RUN_OPT.RESERVED0", 
      Read_Dx_m1a_system_Run_opt_RESERVED0,
      Write_Dx_m1a_system_Run_opt_RESERVED0,
    },
    { /* 7 : INDEX_DX_M1A_SYSTEM_RUN_OPT_AUTORUN_EN */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x4, DX_M1A_SYSTEM_RUN_OPT_AUTORUN_EN_LEN, DX_M1A_SYSTEM_RUN_OPT_AUTORUN_EN_MASK, DX_M1A_SYSTEM_RUN_OPT_AUTORUN_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.RUN_OPT.AUTORUN_EN", 
      Read_Dx_m1a_system_Run_opt_AUTORUN_EN,
      Write_Dx_m1a_system_Run_opt_AUTORUN_EN,
    },
    { /* 8 : INDEX_DX_M1A_SYSTEM_STATUS1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.STATUS1", 
      Read_Dx_m1a_system_Status1,
      Write_Dx_m1a_system_Status1,
    },
    { /* 9 : INDEX_DX_M1A_SYSTEM_STATUS1_CMD_NUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x8, DX_M1A_SYSTEM_STATUS1_CMD_NUM_LEN, DX_M1A_SYSTEM_STATUS1_CMD_NUM_MASK, DX_M1A_SYSTEM_STATUS1_CMD_NUM_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.STATUS1.CMD_NUM", 
      Read_Dx_m1a_system_Status1_CMD_NUM,
      Write_Dx_m1a_system_Status1_CMD_NUM,
    },
    { /* 10 : INDEX_DX_M1A_SYSTEM_STATUS1_ARGMAX_ID */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x8, DX_M1A_SYSTEM_STATUS1_ARGMAX_ID_LEN, DX_M1A_SYSTEM_STATUS1_ARGMAX_ID_MASK, DX_M1A_SYSTEM_STATUS1_ARGMAX_ID_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.STATUS1.ARGMAX_ID", 
      Read_Dx_m1a_system_Status1_ARGMAX_ID,
      Write_Dx_m1a_system_Status1_ARGMAX_ID,
    },
    { /* 11 : INDEX_DX_M1A_SYSTEM_STATUS2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_SYSTEM.STATUS2", 
      Read_Dx_m1a_system_Status2,
      Write_Dx_m1a_system_Status2,
    },
    { /* 12 : INDEX_DX_M1A_SYSTEM_STATUS2_BUSY */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xc, DX_M1A_SYSTEM_STATUS2_BUSY_LEN, DX_M1A_SYSTEM_STATUS2_BUSY_MASK, DX_M1A_SYSTEM_STATUS2_BUSY_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.STATUS2.BUSY", 
      Read_Dx_m1a_system_Status2_BUSY,
      Write_Dx_m1a_system_Status2_BUSY,
    },
    { /* 13 : INDEX_DX_M1A_SYSTEM_STATUS2_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xc, DX_M1A_SYSTEM_STATUS2_RESERVED0_LEN, DX_M1A_SYSTEM_STATUS2_RESERVED0_MASK, DX_M1A_SYSTEM_STATUS2_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.STATUS2.RESERVED0", 
      Read_Dx_m1a_system_Status2_RESERVED0,
      Write_Dx_m1a_system_Status2_RESERVED0,
    },
    { /* 14 : INDEX_DX_M1A_SYSTEM_NET_INFO */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_SYSTEM.NET_INFO", 
      Read_Dx_m1a_system_Net_info,
      Write_Dx_m1a_system_Net_info,
    },
    { /* 15 : INDEX_DX_M1A_SYSTEM_NET_INFO_LAST_CMD_NUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x10, DX_M1A_SYSTEM_NET_INFO_LAST_CMD_NUM_LEN, DX_M1A_SYSTEM_NET_INFO_LAST_CMD_NUM_MASK, DX_M1A_SYSTEM_NET_INFO_LAST_CMD_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.NET_INFO.LAST_CMD_NUM", 
      Read_Dx_m1a_system_Net_info_LAST_CMD_NUM,
      Write_Dx_m1a_system_Net_info_LAST_CMD_NUM,
    },
    { /* 16 : INDEX_DX_M1A_SYSTEM_NET_INFO_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x10, DX_M1A_SYSTEM_NET_INFO_RESERVED0_LEN, DX_M1A_SYSTEM_NET_INFO_RESERVED0_MASK, DX_M1A_SYSTEM_NET_INFO_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.NET_INFO.RESERVED0", 
      Read_Dx_m1a_system_Net_info_RESERVED0,
      Write_Dx_m1a_system_Net_info_RESERVED0,
    },
    { /* 17 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS", 
      Read_Dx_m1a_system_Irq_status,
      Write_Dx_m1a_system_Irq_status,
    },
    { /* 18 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_STATUS_TILE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_STATUS_TILE_LEN, DX_M1A_SYSTEM_IRQ_STATUS_STATUS_TILE_MASK, DX_M1A_SYSTEM_IRQ_STATUS_STATUS_TILE_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.STATUS_TILE", 
      Read_Dx_m1a_system_Irq_status_STATUS_TILE,
      Write_Dx_m1a_system_Irq_status_STATUS_TILE,
    },
    { /* 19 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_STATUS_OP */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_STATUS_OP_LEN, DX_M1A_SYSTEM_IRQ_STATUS_STATUS_OP_MASK, DX_M1A_SYSTEM_IRQ_STATUS_STATUS_OP_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.STATUS_OP", 
      Read_Dx_m1a_system_Irq_status_STATUS_OP,
      Write_Dx_m1a_system_Irq_status_STATUS_OP,
    },
    { /* 20 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_MEM_COLLISION */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_MEM_COLLISION_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_MEM_COLLISION_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_MEM_COLLISION_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_MEM_COLLISION", 
      Read_Dx_m1a_system_Irq_status_IRQ_MEM_COLLISION,
      Write_Dx_m1a_system_Irq_status_IRQ_MEM_COLLISION,
    },
    { /* 21 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_REACHED */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_REACHED_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_REACHED_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_REACHED_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_REACHED", 
      Read_Dx_m1a_system_Irq_status_IRQ_CMD_REACHED,
      Write_Dx_m1a_system_Irq_status_IRQ_CMD_REACHED,
    },
    { /* 22 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_CKSUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_CKSUM_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_CKSUM_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_CMD_CKSUM_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_CMD_CKSUM", 
      Read_Dx_m1a_system_Irq_status_IRQ_CMD_CKSUM,
      Write_Dx_m1a_system_Irq_status_IRQ_CMD_CKSUM,
    },
    { /* 23 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_NPU_FIFO */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_NPU_FIFO_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_NPU_FIFO_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_NPU_FIFO_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_NPU_FIFO", 
      Read_Dx_m1a_system_Irq_status_IRQ_NPU_FIFO,
      Write_Dx_m1a_system_Irq_status_IRQ_NPU_FIFO,
    },
    { /* 24 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_CCLK */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_CCLK_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_CCLK_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_CCLK_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_CCLK", 
      Read_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_CCLK,
      Write_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_CCLK,
    },
    { /* 25 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_NCLK */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_NCLK_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_NCLK_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_NCLK_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_NCLK", 
      Read_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_NCLK,
      Write_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_NCLK,
    },
    { /* 26 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_ACLK */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_ACLK_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_ACLK_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_DMA_FIFO_ACLK_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_DMA_FIFO_ACLK", 
      Read_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_ACLK,
      Write_Dx_m1a_system_Irq_status_IRQ_DMA_FIFO_ACLK,
    },
    { /* 27 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_OP */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_OP_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_OP_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_OP_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_OP", 
      Read_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_OP,
      Write_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_OP,
    },
    { /* 28 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_DMA */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_DMA_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_DMA_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TIMEOUT_DMA_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TIMEOUT_DMA", 
      Read_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_DMA,
      Write_Dx_m1a_system_Irq_status_IRQ_TIMEOUT_DMA,
    },
    { /* 29 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_INPUT_DONE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_INPUT_DONE_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_INPUT_DONE_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_INPUT_DONE_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_INPUT_DONE", 
      Read_Dx_m1a_system_Irq_status_IRQ_INPUT_DONE,
      Write_Dx_m1a_system_Irq_status_IRQ_INPUT_DONE,
    },
    { /* 30 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TILE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TILE_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TILE_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_TILE_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_TILE", 
      Read_Dx_m1a_system_Irq_status_IRQ_TILE,
      Write_Dx_m1a_system_Irq_status_IRQ_TILE,
    },
    { /* 31 : INDEX_DX_M1A_SYSTEM_IRQ_STATUS_IRQ_FRAME */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x14, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_FRAME_LEN, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_FRAME_MASK, DX_M1A_SYSTEM_IRQ_STATUS_IRQ_FRAME_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_STATUS.IRQ_FRAME", 
      Read_Dx_m1a_system_Irq_status_IRQ_FRAME,
      Write_Dx_m1a_system_Irq_status_IRQ_FRAME,
    },
    { /* 32 : INDEX_DX_M1A_SYSTEM_IRQ_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_SYSTEM.IRQ_SET", 
      Read_Dx_m1a_system_Irq_set,
      Write_Dx_m1a_system_Irq_set,
    },
    { /* 33 : INDEX_DX_M1A_SYSTEM_IRQ_SET_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_RESERVED0_LEN, DX_M1A_SYSTEM_IRQ_SET_RESERVED0_MASK, DX_M1A_SYSTEM_IRQ_SET_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.IRQ_SET.RESERVED0", 
      Read_Dx_m1a_system_Irq_set_RESERVED0,
      Write_Dx_m1a_system_Irq_set_RESERVED0,
    },
    { /* 34 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_MEM_COLLISION_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_MEM_COLLISION_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_MEM_COLLISION_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_MEM_COLLISION_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_MEM_COLLISION_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_MEM_COLLISION_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_MEM_COLLISION_SET,
    },
    { /* 35 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_REACHED_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_REACHED_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_REACHED_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_REACHED_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_REACHED_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_CMD_REACHED_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_CMD_REACHED_SET,
    },
    { /* 36 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_CKSUM_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_CKSUM_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_CKSUM_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_CMD_CKSUM_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_CMD_CKSUM_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_CMD_CKSUM_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_CMD_CKSUM_SET,
    },
    { /* 37 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_NPU_FIFO_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_NPU_FIFO_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_NPU_FIFO_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_NPU_FIFO_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_NPU_FIFO_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_NPU_FIFO_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_NPU_FIFO_SET,
    },
    { /* 38 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_DMA_FIFO_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_DMA_FIFO_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_DMA_FIFO_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_DMA_FIFO_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_DMA_FIFO_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_DMA_FIFO_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_DMA_FIFO_SET,
    },
    { /* 39 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_OP_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_OP_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_OP_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_OP_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_OP_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_OP_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_OP_SET,
    },
    { /* 40 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_DMA_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_DMA_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_DMA_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_TIMEOUT_DMA_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_TIMEOUT_DMA_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_DMA_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_TIMEOUT_DMA_SET,
    },
    { /* 41 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_INPUT_DONE_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_INPUT_DONE_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_INPUT_DONE_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_INPUT_DONE_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_INPUT_DONE_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_INPUT_DONE_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_INPUT_DONE_SET,
    },
    { /* 42 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_TILE_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_TILE_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_TILE_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_TILE_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_TILE_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_TILE_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_TILE_SET,
    },
    { /* 43 : INDEX_DX_M1A_SYSTEM_IRQ_SET_IRQ_FRAME_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x18, DX_M1A_SYSTEM_IRQ_SET_IRQ_FRAME_SET_LEN, DX_M1A_SYSTEM_IRQ_SET_IRQ_FRAME_SET_MASK, DX_M1A_SYSTEM_IRQ_SET_IRQ_FRAME_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_SET.IRQ_FRAME_SET", 
      Read_Dx_m1a_system_Irq_set_IRQ_FRAME_SET,
      Write_Dx_m1a_system_Irq_set_IRQ_FRAME_SET,
    },
    { /* 44 : INDEX_DX_M1A_SYSTEM_IRQ_CNT0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT0", 
      Read_Dx_m1a_system_Irq_cnt0,
      Write_Dx_m1a_system_Irq_cnt0,
    },
    { /* 45 : INDEX_DX_M1A_SYSTEM_IRQ_CNT0_IRQ_CNT_NPU_NORMAL */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x1c, DX_M1A_SYSTEM_IRQ_CNT0_IRQ_CNT_NPU_NORMAL_LEN, DX_M1A_SYSTEM_IRQ_CNT0_IRQ_CNT_NPU_NORMAL_MASK, DX_M1A_SYSTEM_IRQ_CNT0_IRQ_CNT_NPU_NORMAL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT0.IRQ_CNT_NPU_NORMAL", 
      Read_Dx_m1a_system_Irq_cnt0_IRQ_CNT_NPU_NORMAL,
      Write_Dx_m1a_system_Irq_cnt0_IRQ_CNT_NPU_NORMAL,
    },
    { /* 46 : INDEX_DX_M1A_SYSTEM_IRQ_CNT1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT1", 
      Read_Dx_m1a_system_Irq_cnt1,
      Write_Dx_m1a_system_Irq_cnt1,
    },
    { /* 47 : INDEX_DX_M1A_SYSTEM_IRQ_CNT1_IRQ_CNT_NPU_INPUT_DONE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x20, DX_M1A_SYSTEM_IRQ_CNT1_IRQ_CNT_NPU_INPUT_DONE_LEN, DX_M1A_SYSTEM_IRQ_CNT1_IRQ_CNT_NPU_INPUT_DONE_MASK, DX_M1A_SYSTEM_IRQ_CNT1_IRQ_CNT_NPU_INPUT_DONE_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT1.IRQ_CNT_NPU_INPUT_DONE", 
      Read_Dx_m1a_system_Irq_cnt1_IRQ_CNT_NPU_INPUT_DONE,
      Write_Dx_m1a_system_Irq_cnt1_IRQ_CNT_NPU_INPUT_DONE,
    },
    { /* 48 : INDEX_DX_M1A_SYSTEM_IRQ_CNT2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT2", 
      Read_Dx_m1a_system_Irq_cnt2,
      Write_Dx_m1a_system_Irq_cnt2,
    },
    { /* 49 : INDEX_DX_M1A_SYSTEM_IRQ_CNT2_IRQ_CNT_NPU_ABNORMAL */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x24, DX_M1A_SYSTEM_IRQ_CNT2_IRQ_CNT_NPU_ABNORMAL_LEN, DX_M1A_SYSTEM_IRQ_CNT2_IRQ_CNT_NPU_ABNORMAL_MASK, DX_M1A_SYSTEM_IRQ_CNT2_IRQ_CNT_NPU_ABNORMAL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT2.IRQ_CNT_NPU_ABNORMAL", 
      Read_Dx_m1a_system_Irq_cnt2_IRQ_CNT_NPU_ABNORMAL,
      Write_Dx_m1a_system_Irq_cnt2_IRQ_CNT_NPU_ABNORMAL,
    },
    { /* 50 : INDEX_DX_M1A_SYSTEM_IRQ_CNT3 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT3", 
      Read_Dx_m1a_system_Irq_cnt3,
      Write_Dx_m1a_system_Irq_cnt3,
    },
    { /* 51 : INDEX_DX_M1A_SYSTEM_IRQ_CNT3_IRQ_CNT_CPU_FINISH */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x28, DX_M1A_SYSTEM_IRQ_CNT3_IRQ_CNT_CPU_FINISH_LEN, DX_M1A_SYSTEM_IRQ_CNT3_IRQ_CNT_CPU_FINISH_MASK, DX_M1A_SYSTEM_IRQ_CNT3_IRQ_CNT_CPU_FINISH_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT3.IRQ_CNT_CPU_FINISH", 
      Read_Dx_m1a_system_Irq_cnt3_IRQ_CNT_CPU_FINISH,
      Write_Dx_m1a_system_Irq_cnt3_IRQ_CNT_CPU_FINISH,
    },
    { /* 52 : INDEX_DX_M1A_SYSTEM_IRQ_CNT4 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT4", 
      Read_Dx_m1a_system_Irq_cnt4,
      Write_Dx_m1a_system_Irq_cnt4,
    },
    { /* 53 : INDEX_DX_M1A_SYSTEM_IRQ_CNT4_IRQ_CNT_CPU_INIT */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x2c, DX_M1A_SYSTEM_IRQ_CNT4_IRQ_CNT_CPU_INIT_LEN, DX_M1A_SYSTEM_IRQ_CNT4_IRQ_CNT_CPU_INIT_MASK, DX_M1A_SYSTEM_IRQ_CNT4_IRQ_CNT_CPU_INIT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.IRQ_CNT4.IRQ_CNT_CPU_INIT", 
      Read_Dx_m1a_system_Irq_cnt4_IRQ_CNT_CPU_INIT,
      Write_Dx_m1a_system_Irq_cnt4_IRQ_CNT_CPU_INIT,
    },
    { /* 54 : INDEX_DX_M1A_SYSTEM_IN_FEATURE_BASE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.IN_FEATURE_BASE", 
      Read_Dx_m1a_system_In_feature_base,
      Write_Dx_m1a_system_In_feature_base,
    },
    { /* 55 : INDEX_DX_M1A_SYSTEM_IN_FEATURE_BASE_IN_FEATURE_OFFSET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x30, DX_M1A_SYSTEM_IN_FEATURE_BASE_IN_FEATURE_OFFSET_LEN, DX_M1A_SYSTEM_IN_FEATURE_BASE_IN_FEATURE_OFFSET_MASK, DX_M1A_SYSTEM_IN_FEATURE_BASE_IN_FEATURE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IN_FEATURE_BASE.IN_FEATURE_OFFSET", 
      Read_Dx_m1a_system_In_feature_base_IN_FEATURE_OFFSET,
      Write_Dx_m1a_system_In_feature_base_IN_FEATURE_OFFSET,
    },
    { /* 56 : INDEX_DX_M1A_SYSTEM_OUT_FEATURE_BASE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.OUT_FEATURE_BASE", 
      Read_Dx_m1a_system_Out_feature_base,
      Write_Dx_m1a_system_Out_feature_base,
    },
    { /* 57 : INDEX_DX_M1A_SYSTEM_OUT_FEATURE_BASE_OUT_FEATURE_OFFSET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x34, DX_M1A_SYSTEM_OUT_FEATURE_BASE_OUT_FEATURE_OFFSET_LEN, DX_M1A_SYSTEM_OUT_FEATURE_BASE_OUT_FEATURE_OFFSET_MASK, DX_M1A_SYSTEM_OUT_FEATURE_BASE_OUT_FEATURE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.OUT_FEATURE_BASE.OUT_FEATURE_OFFSET", 
      Read_Dx_m1a_system_Out_feature_base_OUT_FEATURE_OFFSET,
      Write_Dx_m1a_system_Out_feature_base_OUT_FEATURE_OFFSET,
    },
    { /* 58 : INDEX_DX_M1A_SYSTEM_WEIGHT_BASE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.WEIGHT_BASE", 
      Read_Dx_m1a_system_Weight_base,
      Write_Dx_m1a_system_Weight_base,
    },
    { /* 59 : INDEX_DX_M1A_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x38, DX_M1A_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_LEN, DX_M1A_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_MASK, DX_M1A_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.WEIGHT_BASE.WEIGHT_OFFSET", 
      Read_Dx_m1a_system_Weight_base_WEIGHT_OFFSET,
      Write_Dx_m1a_system_Weight_base_WEIGHT_OFFSET,
    },
    { /* 60 : INDEX_DX_M1A_SYSTEM_IRQ_TIMER_DMA */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_TIMER_DMA", 
      Read_Dx_m1a_system_Irq_timer_dma,
      Write_Dx_m1a_system_Irq_timer_dma,
    },
    { /* 61 : INDEX_DX_M1A_SYSTEM_IRQ_TIMER_DMA_IRQ_TIMER_DMA */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x3c, DX_M1A_SYSTEM_IRQ_TIMER_DMA_IRQ_TIMER_DMA_LEN, DX_M1A_SYSTEM_IRQ_TIMER_DMA_IRQ_TIMER_DMA_MASK, DX_M1A_SYSTEM_IRQ_TIMER_DMA_IRQ_TIMER_DMA_OFFSET, 0xffffffff, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_TIMER_DMA.IRQ_TIMER_DMA", 
      Read_Dx_m1a_system_Irq_timer_dma_IRQ_TIMER_DMA,
      Write_Dx_m1a_system_Irq_timer_dma_IRQ_TIMER_DMA,
    },
    { /* 62 : INDEX_DX_M1A_SYSTEM_IRQ_TIMER_OP */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_TIMER_OP", 
      Read_Dx_m1a_system_Irq_timer_op,
      Write_Dx_m1a_system_Irq_timer_op,
    },
    { /* 63 : INDEX_DX_M1A_SYSTEM_IRQ_TIMER_OP_IRQ_TIMER_OP */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x40, DX_M1A_SYSTEM_IRQ_TIMER_OP_IRQ_TIMER_OP_LEN, DX_M1A_SYSTEM_IRQ_TIMER_OP_IRQ_TIMER_OP_MASK, DX_M1A_SYSTEM_IRQ_TIMER_OP_IRQ_TIMER_OP_OFFSET, 0xffffffff, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_TIMER_OP.IRQ_TIMER_OP", 
      Read_Dx_m1a_system_Irq_timer_op_IRQ_TIMER_OP,
      Write_Dx_m1a_system_Irq_timer_op_IRQ_TIMER_OP,
    },
    { /* 64 : INDEX_DX_M1A_SYSTEM_CMD */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_SYSTEM.CMD", 
      Read_Dx_m1a_system_Cmd,
      Write_Dx_m1a_system_Cmd,
    },
    { /* 65 : INDEX_DX_M1A_SYSTEM_CMD_START */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x44, DX_M1A_SYSTEM_CMD_START_LEN, DX_M1A_SYSTEM_CMD_START_MASK, DX_M1A_SYSTEM_CMD_START_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.CMD.START", 
      Read_Dx_m1a_system_Cmd_START,
      Write_Dx_m1a_system_Cmd_START,
    },
    { /* 66 : INDEX_DX_M1A_SYSTEM_CMD_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x44, DX_M1A_SYSTEM_CMD_RESERVED0_LEN, DX_M1A_SYSTEM_CMD_RESERVED0_MASK, DX_M1A_SYSTEM_CMD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.CMD.RESERVED0", 
      Read_Dx_m1a_system_Cmd_RESERVED0,
      Write_Dx_m1a_system_Cmd_RESERVED0,
    },
    { /* 67 : INDEX_DX_M1A_SYSTEM_SWREG0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG0", 
      Read_Dx_m1a_system_Swreg0,
      Write_Dx_m1a_system_Swreg0,
    },
    { /* 68 : INDEX_DX_M1A_SYSTEM_SWREG0_SWREG0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x48, DX_M1A_SYSTEM_SWREG0_SWREG0_LEN, DX_M1A_SYSTEM_SWREG0_SWREG0_MASK, DX_M1A_SYSTEM_SWREG0_SWREG0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG0.SWREG0", 
      Read_Dx_m1a_system_Swreg0_SWREG0,
      Write_Dx_m1a_system_Swreg0_SWREG0,
    },
    { /* 69 : INDEX_DX_M1A_SYSTEM_SWREG1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG1", 
      Read_Dx_m1a_system_Swreg1,
      Write_Dx_m1a_system_Swreg1,
    },
    { /* 70 : INDEX_DX_M1A_SYSTEM_SWREG1_SWREG1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x4c, DX_M1A_SYSTEM_SWREG1_SWREG1_LEN, DX_M1A_SYSTEM_SWREG1_SWREG1_MASK, DX_M1A_SYSTEM_SWREG1_SWREG1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG1.SWREG1", 
      Read_Dx_m1a_system_Swreg1_SWREG1,
      Write_Dx_m1a_system_Swreg1_SWREG1,
    },
    { /* 71 : INDEX_DX_M1A_SYSTEM_SWREG2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG2", 
      Read_Dx_m1a_system_Swreg2,
      Write_Dx_m1a_system_Swreg2,
    },
    { /* 72 : INDEX_DX_M1A_SYSTEM_SWREG2_SWREG2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x50, DX_M1A_SYSTEM_SWREG2_SWREG2_LEN, DX_M1A_SYSTEM_SWREG2_SWREG2_MASK, DX_M1A_SYSTEM_SWREG2_SWREG2_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG2.SWREG2", 
      Read_Dx_m1a_system_Swreg2_SWREG2,
      Write_Dx_m1a_system_Swreg2_SWREG2,
    },
    { /* 73 : INDEX_DX_M1A_SYSTEM_SWREG3 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG3", 
      Read_Dx_m1a_system_Swreg3,
      Write_Dx_m1a_system_Swreg3,
    },
    { /* 74 : INDEX_DX_M1A_SYSTEM_SWREG3_SWREG3 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x54, DX_M1A_SYSTEM_SWREG3_SWREG3_LEN, DX_M1A_SYSTEM_SWREG3_SWREG3_MASK, DX_M1A_SYSTEM_SWREG3_SWREG3_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG3.SWREG3", 
      Read_Dx_m1a_system_Swreg3_SWREG3,
      Write_Dx_m1a_system_Swreg3_SWREG3,
    },
    { /* 75 : INDEX_DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT", 
      Read_Dx_m1a_system_Irq_ext_clr_opt,
      Write_Dx_m1a_system_Irq_ext_clr_opt,
    },
    { /* 76 : INDEX_DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_IRQ_EXT_CLR_OPT */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x58, DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_IRQ_EXT_CLR_OPT_LEN, DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_IRQ_EXT_CLR_OPT_MASK, DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_IRQ_EXT_CLR_OPT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.IRQ_EXT_CLR_OPT", 
      Read_Dx_m1a_system_Irq_ext_clr_opt_IRQ_EXT_CLR_OPT,
      Write_Dx_m1a_system_Irq_ext_clr_opt_IRQ_EXT_CLR_OPT,
    },
    { /* 77 : INDEX_DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x58, DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_RESERVED0_LEN, DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_RESERVED0_MASK, DX_M1A_SYSTEM_IRQ_EXT_CLR_OPT_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.IRQ_EXT_CLR_OPT.RESERVED0", 
      Read_Dx_m1a_system_Irq_ext_clr_opt_RESERVED0,
      Write_Dx_m1a_system_Irq_ext_clr_opt_RESERVED0,
    },
    { /* 78 : INDEX_DX_M1A_SYSTEM_RSV0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_SYSTEM.RSV0", 
      Read_Dx_m1a_system_Rsv0,
      Write_Dx_m1a_system_Rsv0,
    },
    { /* 79 : INDEX_DX_M1A_SYSTEM_RSV0_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x5c, DX_M1A_SYSTEM_RSV0_RESERVED0_LEN, DX_M1A_SYSTEM_RSV0_RESERVED0_MASK, DX_M1A_SYSTEM_RSV0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.RSV0.RESERVED0", 
      Read_Dx_m1a_system_Rsv0_RESERVED0,
      Write_Dx_m1a_system_Rsv0_RESERVED0,
    },
    { /* 80 : INDEX_DX_M1A_SYSTEM_RSV1 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_SYSTEM.RSV1", 
      Read_Dx_m1a_system_Rsv1,
      Write_Dx_m1a_system_Rsv1,
    },
    { /* 81 : INDEX_DX_M1A_SYSTEM_RSV1_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x60, DX_M1A_SYSTEM_RSV1_RESERVED0_LEN, DX_M1A_SYSTEM_RSV1_RESERVED0_MASK, DX_M1A_SYSTEM_RSV1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.RSV1.RESERVED0", 
      Read_Dx_m1a_system_Rsv1_RESERVED0,
      Write_Dx_m1a_system_Rsv1_RESERVED0,
    },
    { /* 82 : INDEX_DX_M1A_SYSTEM_RSV2 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_SYSTEM.RSV2", 
      Read_Dx_m1a_system_Rsv2,
      Write_Dx_m1a_system_Rsv2,
    },
    { /* 83 : INDEX_DX_M1A_SYSTEM_RSV2_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x64, DX_M1A_SYSTEM_RSV2_RESERVED0_LEN, DX_M1A_SYSTEM_RSV2_RESERVED0_MASK, DX_M1A_SYSTEM_RSV2_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.RSV2.RESERVED0", 
      Read_Dx_m1a_system_Rsv2_RESERVED0,
      Write_Dx_m1a_system_Rsv2_RESERVED0,
    },
    { /* 84 : INDEX_DX_M1A_SYSTEM_CPU_STATUS */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_SYSTEM.CPU_STATUS", 
      Read_Dx_m1a_system_Cpu_status,
      Write_Dx_m1a_system_Cpu_status,
    },
    { /* 85 : INDEX_DX_M1A_SYSTEM_CPU_STATUS_CPU_LOCKUP */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x68, DX_M1A_SYSTEM_CPU_STATUS_CPU_LOCKUP_LEN, DX_M1A_SYSTEM_CPU_STATUS_CPU_LOCKUP_MASK, DX_M1A_SYSTEM_CPU_STATUS_CPU_LOCKUP_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_STATUS.CPU_LOCKUP", 
      Read_Dx_m1a_system_Cpu_status_CPU_LOCKUP,
      Write_Dx_m1a_system_Cpu_status_CPU_LOCKUP,
    },
    { /* 86 : INDEX_DX_M1A_SYSTEM_CPU_STATUS_CPU_HALTED */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x68, DX_M1A_SYSTEM_CPU_STATUS_CPU_HALTED_LEN, DX_M1A_SYSTEM_CPU_STATUS_CPU_HALTED_MASK, DX_M1A_SYSTEM_CPU_STATUS_CPU_HALTED_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_STATUS.CPU_HALTED", 
      Read_Dx_m1a_system_Cpu_status_CPU_HALTED,
      Write_Dx_m1a_system_Cpu_status_CPU_HALTED,
    },
    { /* 87 : INDEX_DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPDEEP */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x68, DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPDEEP_LEN, DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPDEEP_MASK, DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPDEEP_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPDEEP", 
      Read_Dx_m1a_system_Cpu_status_CPU_SLEEPDEEP,
      Write_Dx_m1a_system_Cpu_status_CPU_SLEEPDEEP,
    },
    { /* 88 : INDEX_DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPING */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x68, DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPING_LEN, DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPING_MASK, DX_M1A_SYSTEM_CPU_STATUS_CPU_SLEEPING_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_STATUS.CPU_SLEEPING", 
      Read_Dx_m1a_system_Cpu_status_CPU_SLEEPING,
      Write_Dx_m1a_system_Cpu_status_CPU_SLEEPING,
    },
    { /* 89 : INDEX_DX_M1A_SYSTEM_CPU_STATUS_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x68, DX_M1A_SYSTEM_CPU_STATUS_RESERVED0_LEN, DX_M1A_SYSTEM_CPU_STATUS_RESERVED0_MASK, DX_M1A_SYSTEM_CPU_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.CPU_STATUS.RESERVED0", 
      Read_Dx_m1a_system_Cpu_status_RESERVED0,
      Write_Dx_m1a_system_Cpu_status_RESERVED0,
    },
    { /* 90 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_SYSTEM.CPU_IRQ_SET", 
      Read_Dx_m1a_system_Cpu_irq_set,
      Write_Dx_m1a_system_Cpu_irq_set,
    },
    { /* 91 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_INIT_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x6c, DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_INIT_SET_LEN, DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_INIT_SET_MASK, DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_INIT_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_INIT_SET", 
      Read_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_INIT_SET,
      Write_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_INIT_SET,
    },
    { /* 92 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_FINISH_SET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x6c, DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_FINISH_SET_LEN, DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_FINISH_SET_MASK, DX_M1A_SYSTEM_CPU_IRQ_SET_IRQ_CPU_FINISH_SET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.CPU_IRQ_SET.IRQ_CPU_FINISH_SET", 
      Read_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_FINISH_SET,
      Write_Dx_m1a_system_Cpu_irq_set_IRQ_CPU_FINISH_SET,
    },
    { /* 93 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_SET_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x6c, DX_M1A_SYSTEM_CPU_IRQ_SET_RESERVED0_LEN, DX_M1A_SYSTEM_CPU_IRQ_SET_RESERVED0_MASK, DX_M1A_SYSTEM_CPU_IRQ_SET_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.CPU_IRQ_SET.RESERVED0", 
      Read_Dx_m1a_system_Cpu_irq_set_RESERVED0,
      Write_Dx_m1a_system_Cpu_irq_set_RESERVED0,
    },
    { /* 94 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_STATUS */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_SYSTEM.CPU_IRQ_STATUS", 
      Read_Dx_m1a_system_Cpu_irq_status,
      Write_Dx_m1a_system_Cpu_irq_status,
    },
    { /* 95 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_INIT */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x70, DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_INIT_LEN, DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_INIT_MASK, DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_INIT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_INIT", 
      Read_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_INIT,
      Write_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_INIT,
    },
    { /* 96 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_FINISH */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x70, DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_FINISH_LEN, DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_FINISH_MASK, DX_M1A_SYSTEM_CPU_IRQ_STATUS_IRQ_CPU_FINISH_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_IRQ_STATUS.IRQ_CPU_FINISH", 
      Read_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_FINISH,
      Write_Dx_m1a_system_Cpu_irq_status_IRQ_CPU_FINISH,
    },
    { /* 97 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_STATUS_CPU_BUSY */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x70, DX_M1A_SYSTEM_CPU_IRQ_STATUS_CPU_BUSY_LEN, DX_M1A_SYSTEM_CPU_IRQ_STATUS_CPU_BUSY_MASK, DX_M1A_SYSTEM_CPU_IRQ_STATUS_CPU_BUSY_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.CPU_IRQ_STATUS.CPU_BUSY", 
      Read_Dx_m1a_system_Cpu_irq_status_CPU_BUSY,
      Write_Dx_m1a_system_Cpu_irq_status_CPU_BUSY,
    },
    { /* 98 : INDEX_DX_M1A_SYSTEM_CPU_IRQ_STATUS_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x70, DX_M1A_SYSTEM_CPU_IRQ_STATUS_RESERVED0_LEN, DX_M1A_SYSTEM_CPU_IRQ_STATUS_RESERVED0_MASK, DX_M1A_SYSTEM_CPU_IRQ_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.CPU_IRQ_STATUS.RESERVED0", 
      Read_Dx_m1a_system_Cpu_irq_status_RESERVED0,
      Write_Dx_m1a_system_Cpu_irq_status_RESERVED0,
    },
    { /* 99 : INDEX_DX_M1A_SYSTEM_CPU_START */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_SYSTEM.CPU_START", 
      Read_Dx_m1a_system_Cpu_start,
      Write_Dx_m1a_system_Cpu_start,
    },
    { /* 100 : INDEX_DX_M1A_SYSTEM_CPU_START_CPU_START */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x74, DX_M1A_SYSTEM_CPU_START_CPU_START_LEN, DX_M1A_SYSTEM_CPU_START_CPU_START_MASK, DX_M1A_SYSTEM_CPU_START_CPU_START_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.CPU_START.CPU_START", 
      Read_Dx_m1a_system_Cpu_start_CPU_START,
      Write_Dx_m1a_system_Cpu_start_CPU_START,
    },
    { /* 101 : INDEX_DX_M1A_SYSTEM_CPU_START_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x74, DX_M1A_SYSTEM_CPU_START_RESERVED0_LEN, DX_M1A_SYSTEM_CPU_START_RESERVED0_MASK, DX_M1A_SYSTEM_CPU_START_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.CPU_START.RESERVED0", 
      Read_Dx_m1a_system_Cpu_start_RESERVED0,
      Write_Dx_m1a_system_Cpu_start_RESERVED0,
    },
    { /* 102 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO", 
      Read_Dx_m1a_system_Ppu_out_filter_info,
      Write_Dx_m1a_system_Ppu_out_filter_info,
    },
    { /* 103 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_NUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x78, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_NUM_LEN, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_NUM_MASK, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_NUM_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_NUM", 
      Read_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_NUM,
      Write_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_NUM,
    },
    { /* 104 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_WNUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x78, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_WNUM_LEN, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_WNUM_MASK, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_WNUM_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_WNUM", 
      Read_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_WNUM,
      Write_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_WNUM,
    },
    { /* 105 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_BUFSEL */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x78, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_BUFSEL_LEN, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_BUFSEL_MASK, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_PPU_FILTERING_BUFSEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.PPU_FILTERING_BUFSEL", 
      Read_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_BUFSEL,
      Write_Dx_m1a_system_Ppu_out_filter_info_PPU_FILTERING_BUFSEL,
    },
    { /* 106 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x78, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_RESERVED0_LEN, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_RESERVED0_MASK, DX_M1A_SYSTEM_PPU_OUT_FILTER_INFO_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.PPU_OUT_FILTER_INFO.RESERVED0", 
      Read_Dx_m1a_system_Ppu_out_filter_info_RESERVED0,
      Write_Dx_m1a_system_Ppu_out_filter_info_RESERVED0,
    },
    { /* 107 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO", 
      Read_Dx_m1a_system_Ppu_out_feature_info,
      Write_Dx_m1a_system_Ppu_out_feature_info,
    },
    { /* 108 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_PPU_OUT_FEATURE_NUM */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x7c, DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_PPU_OUT_FEATURE_NUM_LEN, DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_PPU_OUT_FEATURE_NUM_MASK, DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_PPU_OUT_FEATURE_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.PPU_OUT_FEATURE_NUM", 
      Read_Dx_m1a_system_Ppu_out_feature_info_PPU_OUT_FEATURE_NUM,
      Write_Dx_m1a_system_Ppu_out_feature_info_PPU_OUT_FEATURE_NUM,
    },
    { /* 109 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_RESERVED0 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x7c, DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_RESERVED0_LEN, DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_RESERVED0_MASK, DX_M1A_SYSTEM_PPU_OUT_FEATURE_INFO_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_SYSTEM.PPU_OUT_FEATURE_INFO.RESERVED0", 
      Read_Dx_m1a_system_Ppu_out_feature_info_RESERVED0,
      Write_Dx_m1a_system_Ppu_out_feature_info_RESERVED0,
    },
    { /* 110 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x80, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE", 
      Read_Dx_m1a_system_Ppu_out_feature_base,
      Write_Dx_m1a_system_Ppu_out_feature_base,
    },
    { /* 111 : INDEX_DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE_PPU_OUT_FEATURE_OFFSET */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x80, DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE_PPU_OUT_FEATURE_OFFSET_LEN, DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE_PPU_OUT_FEATURE_OFFSET_MASK, DX_M1A_SYSTEM_PPU_OUT_FEATURE_BASE_PPU_OUT_FEATURE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.PPU_OUT_FEATURE_BASE.PPU_OUT_FEATURE_OFFSET", 
      Read_Dx_m1a_system_Ppu_out_feature_base_PPU_OUT_FEATURE_OFFSET,
      Write_Dx_m1a_system_Ppu_out_feature_base_PPU_OUT_FEATURE_OFFSET,
    },
    { /* 112 : INDEX_DX_M1A_SYSTEM_SWREG4 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x84, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG4", 
      Read_Dx_m1a_system_Swreg4,
      Write_Dx_m1a_system_Swreg4,
    },
    { /* 113 : INDEX_DX_M1A_SYSTEM_SWREG4_SWREG4 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x84, DX_M1A_SYSTEM_SWREG4_SWREG4_LEN, DX_M1A_SYSTEM_SWREG4_SWREG4_MASK, DX_M1A_SYSTEM_SWREG4_SWREG4_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG4.SWREG4", 
      Read_Dx_m1a_system_Swreg4_SWREG4,
      Write_Dx_m1a_system_Swreg4_SWREG4,
    },
    { /* 114 : INDEX_DX_M1A_SYSTEM_SWREG5 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x88, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG5", 
      Read_Dx_m1a_system_Swreg5,
      Write_Dx_m1a_system_Swreg5,
    },
    { /* 115 : INDEX_DX_M1A_SYSTEM_SWREG5_SWREG5 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x88, DX_M1A_SYSTEM_SWREG5_SWREG5_LEN, DX_M1A_SYSTEM_SWREG5_SWREG5_MASK, DX_M1A_SYSTEM_SWREG5_SWREG5_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG5.SWREG5", 
      Read_Dx_m1a_system_Swreg5_SWREG5,
      Write_Dx_m1a_system_Swreg5_SWREG5,
    },
    { /* 116 : INDEX_DX_M1A_SYSTEM_SWREG6 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x8c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG6", 
      Read_Dx_m1a_system_Swreg6,
      Write_Dx_m1a_system_Swreg6,
    },
    { /* 117 : INDEX_DX_M1A_SYSTEM_SWREG6_SWREG6 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x8c, DX_M1A_SYSTEM_SWREG6_SWREG6_LEN, DX_M1A_SYSTEM_SWREG6_SWREG6_MASK, DX_M1A_SYSTEM_SWREG6_SWREG6_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG6.SWREG6", 
      Read_Dx_m1a_system_Swreg6_SWREG6,
      Write_Dx_m1a_system_Swreg6_SWREG6,
    },
    { /* 118 : INDEX_DX_M1A_SYSTEM_SWREG7 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x90, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG7", 
      Read_Dx_m1a_system_Swreg7,
      Write_Dx_m1a_system_Swreg7,
    },
    { /* 119 : INDEX_DX_M1A_SYSTEM_SWREG7_SWREG7 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x90, DX_M1A_SYSTEM_SWREG7_SWREG7_LEN, DX_M1A_SYSTEM_SWREG7_SWREG7_MASK, DX_M1A_SYSTEM_SWREG7_SWREG7_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG7.SWREG7", 
      Read_Dx_m1a_system_Swreg7_SWREG7,
      Write_Dx_m1a_system_Swreg7_SWREG7,
    },
    { /* 120 : INDEX_DX_M1A_SYSTEM_SWREG8 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x94, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG8", 
      Read_Dx_m1a_system_Swreg8,
      Write_Dx_m1a_system_Swreg8,
    },
    { /* 121 : INDEX_DX_M1A_SYSTEM_SWREG8_SWREG8 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x94, DX_M1A_SYSTEM_SWREG8_SWREG8_LEN, DX_M1A_SYSTEM_SWREG8_SWREG8_MASK, DX_M1A_SYSTEM_SWREG8_SWREG8_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG8.SWREG8", 
      Read_Dx_m1a_system_Swreg8_SWREG8,
      Write_Dx_m1a_system_Swreg8_SWREG8,
    },
    { /* 122 : INDEX_DX_M1A_SYSTEM_SWREG9 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x98, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG9", 
      Read_Dx_m1a_system_Swreg9,
      Write_Dx_m1a_system_Swreg9,
    },
    { /* 123 : INDEX_DX_M1A_SYSTEM_SWREG9_SWREG9 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x98, DX_M1A_SYSTEM_SWREG9_SWREG9_LEN, DX_M1A_SYSTEM_SWREG9_SWREG9_MASK, DX_M1A_SYSTEM_SWREG9_SWREG9_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG9.SWREG9", 
      Read_Dx_m1a_system_Swreg9_SWREG9,
      Write_Dx_m1a_system_Swreg9_SWREG9,
    },
    { /* 124 : INDEX_DX_M1A_SYSTEM_SWREG10 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x9c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG10", 
      Read_Dx_m1a_system_Swreg10,
      Write_Dx_m1a_system_Swreg10,
    },
    { /* 125 : INDEX_DX_M1A_SYSTEM_SWREG10_SWREG10 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0x9c, DX_M1A_SYSTEM_SWREG10_SWREG10_LEN, DX_M1A_SYSTEM_SWREG10_SWREG10_MASK, DX_M1A_SYSTEM_SWREG10_SWREG10_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG10.SWREG10", 
      Read_Dx_m1a_system_Swreg10_SWREG10,
      Write_Dx_m1a_system_Swreg10_SWREG10,
    },
    { /* 126 : INDEX_DX_M1A_SYSTEM_SWREG11 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xa0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG11", 
      Read_Dx_m1a_system_Swreg11,
      Write_Dx_m1a_system_Swreg11,
    },
    { /* 127 : INDEX_DX_M1A_SYSTEM_SWREG11_SWREG11 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xa0, DX_M1A_SYSTEM_SWREG11_SWREG11_LEN, DX_M1A_SYSTEM_SWREG11_SWREG11_MASK, DX_M1A_SYSTEM_SWREG11_SWREG11_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG11.SWREG11", 
      Read_Dx_m1a_system_Swreg11_SWREG11,
      Write_Dx_m1a_system_Swreg11_SWREG11,
    },
    { /* 128 : INDEX_DX_M1A_SYSTEM_SWREG12 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xa4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG12", 
      Read_Dx_m1a_system_Swreg12,
      Write_Dx_m1a_system_Swreg12,
    },
    { /* 129 : INDEX_DX_M1A_SYSTEM_SWREG12_SWREG12 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xa4, DX_M1A_SYSTEM_SWREG12_SWREG12_LEN, DX_M1A_SYSTEM_SWREG12_SWREG12_MASK, DX_M1A_SYSTEM_SWREG12_SWREG12_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG12.SWREG12", 
      Read_Dx_m1a_system_Swreg12_SWREG12,
      Write_Dx_m1a_system_Swreg12_SWREG12,
    },
    { /* 130 : INDEX_DX_M1A_SYSTEM_SWREG13 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xa8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG13", 
      Read_Dx_m1a_system_Swreg13,
      Write_Dx_m1a_system_Swreg13,
    },
    { /* 131 : INDEX_DX_M1A_SYSTEM_SWREG13_SWREG13 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xa8, DX_M1A_SYSTEM_SWREG13_SWREG13_LEN, DX_M1A_SYSTEM_SWREG13_SWREG13_MASK, DX_M1A_SYSTEM_SWREG13_SWREG13_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG13.SWREG13", 
      Read_Dx_m1a_system_Swreg13_SWREG13,
      Write_Dx_m1a_system_Swreg13_SWREG13,
    },
    { /* 132 : INDEX_DX_M1A_SYSTEM_SWREG14 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG14", 
      Read_Dx_m1a_system_Swreg14,
      Write_Dx_m1a_system_Swreg14,
    },
    { /* 133 : INDEX_DX_M1A_SYSTEM_SWREG14_SWREG14 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xac, DX_M1A_SYSTEM_SWREG14_SWREG14_LEN, DX_M1A_SYSTEM_SWREG14_SWREG14_MASK, DX_M1A_SYSTEM_SWREG14_SWREG14_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG14.SWREG14", 
      Read_Dx_m1a_system_Swreg14_SWREG14,
      Write_Dx_m1a_system_Swreg14_SWREG14,
    },
    { /* 134 : INDEX_DX_M1A_SYSTEM_SWREG15 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xb0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG15", 
      Read_Dx_m1a_system_Swreg15,
      Write_Dx_m1a_system_Swreg15,
    },
    { /* 135 : INDEX_DX_M1A_SYSTEM_SWREG15_SWREG15 */
      DXRT_NPU_REG_SYSTEM, REG_DX_M1A_SYSTEM_OFFSET, REG_DX_M1A_SYSTEM_OFFSET + 0xb0, DX_M1A_SYSTEM_SWREG15_SWREG15_LEN, DX_M1A_SYSTEM_SWREG15_SWREG15_MASK, DX_M1A_SYSTEM_SWREG15_SWREG15_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_SYSTEM.SWREG15.SWREG15", 
      Read_Dx_m1a_system_Swreg15_SWREG15,
      Write_Dx_m1a_system_Swreg15_SWREG15,
    },
    { /* 136 : INDEX_DX_M1A_DEBUG_STAMP0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DEBUG.STAMP0", 
      Read_Dx_m1a_debug_Stamp0,
      Write_Dx_m1a_debug_Stamp0,
    },
    { /* 137 : INDEX_DX_M1A_DEBUG_STAMP0_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x0, DX_M1A_DEBUG_STAMP0_RESERVED0_LEN, DX_M1A_DEBUG_STAMP0_RESERVED0_MASK, DX_M1A_DEBUG_STAMP0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.STAMP0.RESERVED0", 
      Read_Dx_m1a_debug_Stamp0_RESERVED0,
      Write_Dx_m1a_debug_Stamp0_RESERVED0,
    },
    { /* 138 : INDEX_DX_M1A_DEBUG_STAMP0_STAMP_OPT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x0, DX_M1A_DEBUG_STAMP0_STAMP_OPT_LEN, DX_M1A_DEBUG_STAMP0_STAMP_OPT_MASK, DX_M1A_DEBUG_STAMP0_STAMP_OPT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.STAMP0.STAMP_OPT", 
      Read_Dx_m1a_debug_Stamp0_STAMP_OPT,
      Write_Dx_m1a_debug_Stamp0_STAMP_OPT,
    },
    { /* 139 : INDEX_DX_M1A_DEBUG_STAMP0_STAMP_EN */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x0, DX_M1A_DEBUG_STAMP0_STAMP_EN_LEN, DX_M1A_DEBUG_STAMP0_STAMP_EN_MASK, DX_M1A_DEBUG_STAMP0_STAMP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.STAMP0.STAMP_EN", 
      Read_Dx_m1a_debug_Stamp0_STAMP_EN,
      Write_Dx_m1a_debug_Stamp0_STAMP_EN,
    },
    { /* 140 : INDEX_DX_M1A_DEBUG_STAMP1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DEBUG.STAMP1", 
      Read_Dx_m1a_debug_Stamp1,
      Write_Dx_m1a_debug_Stamp1,
    },
    { /* 141 : INDEX_DX_M1A_DEBUG_STAMP1_TILE_IDX */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x4, DX_M1A_DEBUG_STAMP1_TILE_IDX_LEN, DX_M1A_DEBUG_STAMP1_TILE_IDX_MASK, DX_M1A_DEBUG_STAMP1_TILE_IDX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.STAMP1.TILE_IDX", 
      Read_Dx_m1a_debug_Stamp1_TILE_IDX,
      Write_Dx_m1a_debug_Stamp1_TILE_IDX,
    },
    { /* 142 : INDEX_DX_M1A_DEBUG_STAMP1_LAYER_IDX */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x4, DX_M1A_DEBUG_STAMP1_LAYER_IDX_LEN, DX_M1A_DEBUG_STAMP1_LAYER_IDX_MASK, DX_M1A_DEBUG_STAMP1_LAYER_IDX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.STAMP1.LAYER_IDX", 
      Read_Dx_m1a_debug_Stamp1_LAYER_IDX,
      Write_Dx_m1a_debug_Stamp1_LAYER_IDX,
    },
    { /* 143 : INDEX_DX_M1A_DEBUG_STAMP2 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP2", 
      Read_Dx_m1a_debug_Stamp2,
      Write_Dx_m1a_debug_Stamp2,
    },
    { /* 144 : INDEX_DX_M1A_DEBUG_STAMP2_CLK_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8, DX_M1A_DEBUG_STAMP2_CLK_CNT_LEN, DX_M1A_DEBUG_STAMP2_CLK_CNT_MASK, DX_M1A_DEBUG_STAMP2_CLK_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP2.CLK_CNT", 
      Read_Dx_m1a_debug_Stamp2_CLK_CNT,
      Write_Dx_m1a_debug_Stamp2_CLK_CNT,
    },
    { /* 145 : INDEX_DX_M1A_DEBUG_STAMP3 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP3", 
      Read_Dx_m1a_debug_Stamp3,
      Write_Dx_m1a_debug_Stamp3,
    },
    { /* 146 : INDEX_DX_M1A_DEBUG_STAMP3_OP_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xc, DX_M1A_DEBUG_STAMP3_OP_CNT_LEN, DX_M1A_DEBUG_STAMP3_OP_CNT_MASK, DX_M1A_DEBUG_STAMP3_OP_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP3.OP_CNT", 
      Read_Dx_m1a_debug_Stamp3_OP_CNT,
      Write_Dx_m1a_debug_Stamp3_OP_CNT,
    },
    { /* 147 : INDEX_DX_M1A_DEBUG_STAMP4 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP4", 
      Read_Dx_m1a_debug_Stamp4,
      Write_Dx_m1a_debug_Stamp4,
    },
    { /* 148 : INDEX_DX_M1A_DEBUG_STAMP4_DMA_RD_WR_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x10, DX_M1A_DEBUG_STAMP4_DMA_RD_WR_CNT_LEN, DX_M1A_DEBUG_STAMP4_DMA_RD_WR_CNT_MASK, DX_M1A_DEBUG_STAMP4_DMA_RD_WR_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP4.DMA_RD_WR_CNT", 
      Read_Dx_m1a_debug_Stamp4_DMA_RD_WR_CNT,
      Write_Dx_m1a_debug_Stamp4_DMA_RD_WR_CNT,
    },
    { /* 149 : INDEX_DX_M1A_DEBUG_STAMP5 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP5", 
      Read_Dx_m1a_debug_Stamp5,
      Write_Dx_m1a_debug_Stamp5,
    },
    { /* 150 : INDEX_DX_M1A_DEBUG_STAMP5_DMA_RD_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x14, DX_M1A_DEBUG_STAMP5_DMA_RD_CNT_LEN, DX_M1A_DEBUG_STAMP5_DMA_RD_CNT_MASK, DX_M1A_DEBUG_STAMP5_DMA_RD_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP5.DMA_RD_CNT", 
      Read_Dx_m1a_debug_Stamp5_DMA_RD_CNT,
      Write_Dx_m1a_debug_Stamp5_DMA_RD_CNT,
    },
    { /* 151 : INDEX_DX_M1A_DEBUG_STAMP6 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP6", 
      Read_Dx_m1a_debug_Stamp6,
      Write_Dx_m1a_debug_Stamp6,
    },
    { /* 152 : INDEX_DX_M1A_DEBUG_STAMP6_DMA_WR_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x18, DX_M1A_DEBUG_STAMP6_DMA_WR_CNT_LEN, DX_M1A_DEBUG_STAMP6_DMA_WR_CNT_MASK, DX_M1A_DEBUG_STAMP6_DMA_WR_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP6.DMA_WR_CNT", 
      Read_Dx_m1a_debug_Stamp6_DMA_WR_CNT,
      Write_Dx_m1a_debug_Stamp6_DMA_WR_CNT,
    },
    { /* 153 : INDEX_DX_M1A_DEBUG_STAMP7 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP7", 
      Read_Dx_m1a_debug_Stamp7,
      Write_Dx_m1a_debug_Stamp7,
    },
    { /* 154 : INDEX_DX_M1A_DEBUG_STAMP7_HIDE_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x1c, DX_M1A_DEBUG_STAMP7_HIDE_CNT_LEN, DX_M1A_DEBUG_STAMP7_HIDE_CNT_MASK, DX_M1A_DEBUG_STAMP7_HIDE_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP7.HIDE_CNT", 
      Read_Dx_m1a_debug_Stamp7_HIDE_CNT,
      Write_Dx_m1a_debug_Stamp7_HIDE_CNT,
    },
    { /* 155 : INDEX_DX_M1A_DEBUG_STAMP8 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP8", 
      Read_Dx_m1a_debug_Stamp8,
      Write_Dx_m1a_debug_Stamp8,
    },
    { /* 156 : INDEX_DX_M1A_DEBUG_STAMP8_WAIT_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x20, DX_M1A_DEBUG_STAMP8_WAIT_CNT_LEN, DX_M1A_DEBUG_STAMP8_WAIT_CNT_MASK, DX_M1A_DEBUG_STAMP8_WAIT_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP8.WAIT_CNT", 
      Read_Dx_m1a_debug_Stamp8_WAIT_CNT,
      Write_Dx_m1a_debug_Stamp8_WAIT_CNT,
    },
    { /* 157 : INDEX_DX_M1A_DEBUG_STAMP9 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP9", 
      Read_Dx_m1a_debug_Stamp9,
      Write_Dx_m1a_debug_Stamp9,
    },
    { /* 158 : INDEX_DX_M1A_DEBUG_STAMP9_RMAP_RD_ONLY_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x24, DX_M1A_DEBUG_STAMP9_RMAP_RD_ONLY_CNT_LEN, DX_M1A_DEBUG_STAMP9_RMAP_RD_ONLY_CNT_MASK, DX_M1A_DEBUG_STAMP9_RMAP_RD_ONLY_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP9.RMAP_RD_ONLY_CNT", 
      Read_Dx_m1a_debug_Stamp9_RMAP_RD_ONLY_CNT,
      Write_Dx_m1a_debug_Stamp9_RMAP_RD_ONLY_CNT,
    },
    { /* 159 : INDEX_DX_M1A_DEBUG_STAMP10 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP10", 
      Read_Dx_m1a_debug_Stamp10,
      Write_Dx_m1a_debug_Stamp10,
    },
    { /* 160 : INDEX_DX_M1A_DEBUG_STAMP10_CLK_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x28, DX_M1A_DEBUG_STAMP10_CLK_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP10_CLK_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP10_CLK_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP10.CLK_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp10_CLK_CNT_SEL,
      Write_Dx_m1a_debug_Stamp10_CLK_CNT_SEL,
    },
    { /* 161 : INDEX_DX_M1A_DEBUG_STAMP11 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP11", 
      Read_Dx_m1a_debug_Stamp11,
      Write_Dx_m1a_debug_Stamp11,
    },
    { /* 162 : INDEX_DX_M1A_DEBUG_STAMP11_OP_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x2c, DX_M1A_DEBUG_STAMP11_OP_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP11_OP_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP11_OP_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP11.OP_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp11_OP_CNT_SEL,
      Write_Dx_m1a_debug_Stamp11_OP_CNT_SEL,
    },
    { /* 163 : INDEX_DX_M1A_DEBUG_STAMP12 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP12", 
      Read_Dx_m1a_debug_Stamp12,
      Write_Dx_m1a_debug_Stamp12,
    },
    { /* 164 : INDEX_DX_M1A_DEBUG_STAMP12_DMA_RD_WR_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x30, DX_M1A_DEBUG_STAMP12_DMA_RD_WR_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP12_DMA_RD_WR_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP12_DMA_RD_WR_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP12.DMA_RD_WR_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp12_DMA_RD_WR_CNT_SEL,
      Write_Dx_m1a_debug_Stamp12_DMA_RD_WR_CNT_SEL,
    },
    { /* 165 : INDEX_DX_M1A_DEBUG_STAMP13 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP13", 
      Read_Dx_m1a_debug_Stamp13,
      Write_Dx_m1a_debug_Stamp13,
    },
    { /* 166 : INDEX_DX_M1A_DEBUG_STAMP13_DMA_RD_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x34, DX_M1A_DEBUG_STAMP13_DMA_RD_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP13_DMA_RD_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP13_DMA_RD_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP13.DMA_RD_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp13_DMA_RD_CNT_SEL,
      Write_Dx_m1a_debug_Stamp13_DMA_RD_CNT_SEL,
    },
    { /* 167 : INDEX_DX_M1A_DEBUG_STAMP14 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP14", 
      Read_Dx_m1a_debug_Stamp14,
      Write_Dx_m1a_debug_Stamp14,
    },
    { /* 168 : INDEX_DX_M1A_DEBUG_STAMP14_DMA_WR_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x38, DX_M1A_DEBUG_STAMP14_DMA_WR_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP14_DMA_WR_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP14_DMA_WR_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP14.DMA_WR_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp14_DMA_WR_CNT_SEL,
      Write_Dx_m1a_debug_Stamp14_DMA_WR_CNT_SEL,
    },
    { /* 169 : INDEX_DX_M1A_DEBUG_STAMP15 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP15", 
      Read_Dx_m1a_debug_Stamp15,
      Write_Dx_m1a_debug_Stamp15,
    },
    { /* 170 : INDEX_DX_M1A_DEBUG_STAMP15_HIDE_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x3c, DX_M1A_DEBUG_STAMP15_HIDE_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP15_HIDE_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP15_HIDE_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP15.HIDE_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp15_HIDE_CNT_SEL,
      Write_Dx_m1a_debug_Stamp15_HIDE_CNT_SEL,
    },
    { /* 171 : INDEX_DX_M1A_DEBUG_STAMP16 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP16", 
      Read_Dx_m1a_debug_Stamp16,
      Write_Dx_m1a_debug_Stamp16,
    },
    { /* 172 : INDEX_DX_M1A_DEBUG_STAMP16_WAIT_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x40, DX_M1A_DEBUG_STAMP16_WAIT_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP16_WAIT_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP16_WAIT_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP16.WAIT_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp16_WAIT_CNT_SEL,
      Write_Dx_m1a_debug_Stamp16_WAIT_CNT_SEL,
    },
    { /* 173 : INDEX_DX_M1A_DEBUG_STAMP17 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, false, true, false,
      "DX_M1A_DEBUG.STAMP17", 
      Read_Dx_m1a_debug_Stamp17,
      Write_Dx_m1a_debug_Stamp17,
    },
    { /* 174 : INDEX_DX_M1A_DEBUG_STAMP17_RMAP_RD_ONLY_CNT_SEL */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x44, DX_M1A_DEBUG_STAMP17_RMAP_RD_ONLY_CNT_SEL_LEN, DX_M1A_DEBUG_STAMP17_RMAP_RD_ONLY_CNT_SEL_MASK, DX_M1A_DEBUG_STAMP17_RMAP_RD_ONLY_CNT_SEL_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.STAMP17.RMAP_RD_ONLY_CNT_SEL", 
      Read_Dx_m1a_debug_Stamp17_RMAP_RD_ONLY_CNT_SEL,
      Write_Dx_m1a_debug_Stamp17_RMAP_RD_ONLY_CNT_SEL,
    },
    { /* 175 : INDEX_DX_M1A_DEBUG_FSM_PE0_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE0_RD", 
      Read_Dx_m1a_debug_Fsm_pe0_rd,
      Write_Dx_m1a_debug_Fsm_pe0_rd,
    },
    { /* 176 : INDEX_DX_M1A_DEBUG_FSM_PE0_RD_FSM_PE0_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x48, DX_M1A_DEBUG_FSM_PE0_RD_FSM_PE0_RD_LEN, DX_M1A_DEBUG_FSM_PE0_RD_FSM_PE0_RD_MASK, DX_M1A_DEBUG_FSM_PE0_RD_FSM_PE0_RD_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE0_RD.FSM_PE0_RD", 
      Read_Dx_m1a_debug_Fsm_pe0_rd_FSM_PE0_RD,
      Write_Dx_m1a_debug_Fsm_pe0_rd_FSM_PE0_RD,
    },
    { /* 177 : INDEX_DX_M1A_DEBUG_FSM_PE0_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x48, DX_M1A_DEBUG_FSM_PE0_RD_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE0_RD_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE0_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE0_RD.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe0_rd_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe0_rd_RESERVED0,
    },
    { /* 178 : INDEX_DX_M1A_DEBUG_FSM_PE0_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE0_WR", 
      Read_Dx_m1a_debug_Fsm_pe0_wr,
      Write_Dx_m1a_debug_Fsm_pe0_wr,
    },
    { /* 179 : INDEX_DX_M1A_DEBUG_FSM_PE0_WR_FSM_PE0_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x4c, DX_M1A_DEBUG_FSM_PE0_WR_FSM_PE0_WR_LEN, DX_M1A_DEBUG_FSM_PE0_WR_FSM_PE0_WR_MASK, DX_M1A_DEBUG_FSM_PE0_WR_FSM_PE0_WR_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE0_WR.FSM_PE0_WR", 
      Read_Dx_m1a_debug_Fsm_pe0_wr_FSM_PE0_WR,
      Write_Dx_m1a_debug_Fsm_pe0_wr_FSM_PE0_WR,
    },
    { /* 180 : INDEX_DX_M1A_DEBUG_FSM_PE0_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x4c, DX_M1A_DEBUG_FSM_PE0_WR_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE0_WR_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE0_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE0_WR.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe0_wr_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe0_wr_RESERVED0,
    },
    { /* 181 : INDEX_DX_M1A_DEBUG_FSM_PE1_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE1_RD", 
      Read_Dx_m1a_debug_Fsm_pe1_rd,
      Write_Dx_m1a_debug_Fsm_pe1_rd,
    },
    { /* 182 : INDEX_DX_M1A_DEBUG_FSM_PE1_RD_FSM_PE1_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x50, DX_M1A_DEBUG_FSM_PE1_RD_FSM_PE1_RD_LEN, DX_M1A_DEBUG_FSM_PE1_RD_FSM_PE1_RD_MASK, DX_M1A_DEBUG_FSM_PE1_RD_FSM_PE1_RD_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE1_RD.FSM_PE1_RD", 
      Read_Dx_m1a_debug_Fsm_pe1_rd_FSM_PE1_RD,
      Write_Dx_m1a_debug_Fsm_pe1_rd_FSM_PE1_RD,
    },
    { /* 183 : INDEX_DX_M1A_DEBUG_FSM_PE1_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x50, DX_M1A_DEBUG_FSM_PE1_RD_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE1_RD_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE1_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE1_RD.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe1_rd_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe1_rd_RESERVED0,
    },
    { /* 184 : INDEX_DX_M1A_DEBUG_FSM_PE1_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE1_WR", 
      Read_Dx_m1a_debug_Fsm_pe1_wr,
      Write_Dx_m1a_debug_Fsm_pe1_wr,
    },
    { /* 185 : INDEX_DX_M1A_DEBUG_FSM_PE1_WR_FSM_PE1_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x54, DX_M1A_DEBUG_FSM_PE1_WR_FSM_PE1_WR_LEN, DX_M1A_DEBUG_FSM_PE1_WR_FSM_PE1_WR_MASK, DX_M1A_DEBUG_FSM_PE1_WR_FSM_PE1_WR_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE1_WR.FSM_PE1_WR", 
      Read_Dx_m1a_debug_Fsm_pe1_wr_FSM_PE1_WR,
      Write_Dx_m1a_debug_Fsm_pe1_wr_FSM_PE1_WR,
    },
    { /* 186 : INDEX_DX_M1A_DEBUG_FSM_PE1_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x54, DX_M1A_DEBUG_FSM_PE1_WR_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE1_WR_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE1_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE1_WR.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe1_wr_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe1_wr_RESERVED0,
    },
    { /* 187 : INDEX_DX_M1A_DEBUG_FSM_PE2_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE2_RD", 
      Read_Dx_m1a_debug_Fsm_pe2_rd,
      Write_Dx_m1a_debug_Fsm_pe2_rd,
    },
    { /* 188 : INDEX_DX_M1A_DEBUG_FSM_PE2_RD_FSM_PE2_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x58, DX_M1A_DEBUG_FSM_PE2_RD_FSM_PE2_RD_LEN, DX_M1A_DEBUG_FSM_PE2_RD_FSM_PE2_RD_MASK, DX_M1A_DEBUG_FSM_PE2_RD_FSM_PE2_RD_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE2_RD.FSM_PE2_RD", 
      Read_Dx_m1a_debug_Fsm_pe2_rd_FSM_PE2_RD,
      Write_Dx_m1a_debug_Fsm_pe2_rd_FSM_PE2_RD,
    },
    { /* 189 : INDEX_DX_M1A_DEBUG_FSM_PE2_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x58, DX_M1A_DEBUG_FSM_PE2_RD_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE2_RD_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE2_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE2_RD.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe2_rd_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe2_rd_RESERVED0,
    },
    { /* 190 : INDEX_DX_M1A_DEBUG_FSM_PE2_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE2_WR", 
      Read_Dx_m1a_debug_Fsm_pe2_wr,
      Write_Dx_m1a_debug_Fsm_pe2_wr,
    },
    { /* 191 : INDEX_DX_M1A_DEBUG_FSM_PE2_WR_FSM_PE2_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x5c, DX_M1A_DEBUG_FSM_PE2_WR_FSM_PE2_WR_LEN, DX_M1A_DEBUG_FSM_PE2_WR_FSM_PE2_WR_MASK, DX_M1A_DEBUG_FSM_PE2_WR_FSM_PE2_WR_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE2_WR.FSM_PE2_WR", 
      Read_Dx_m1a_debug_Fsm_pe2_wr_FSM_PE2_WR,
      Write_Dx_m1a_debug_Fsm_pe2_wr_FSM_PE2_WR,
    },
    { /* 192 : INDEX_DX_M1A_DEBUG_FSM_PE2_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x5c, DX_M1A_DEBUG_FSM_PE2_WR_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE2_WR_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE2_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE2_WR.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe2_wr_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe2_wr_RESERVED0,
    },
    { /* 193 : INDEX_DX_M1A_DEBUG_FSM_PE3_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE3_RD", 
      Read_Dx_m1a_debug_Fsm_pe3_rd,
      Write_Dx_m1a_debug_Fsm_pe3_rd,
    },
    { /* 194 : INDEX_DX_M1A_DEBUG_FSM_PE3_RD_FSM_PE3_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x60, DX_M1A_DEBUG_FSM_PE3_RD_FSM_PE3_RD_LEN, DX_M1A_DEBUG_FSM_PE3_RD_FSM_PE3_RD_MASK, DX_M1A_DEBUG_FSM_PE3_RD_FSM_PE3_RD_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE3_RD.FSM_PE3_RD", 
      Read_Dx_m1a_debug_Fsm_pe3_rd_FSM_PE3_RD,
      Write_Dx_m1a_debug_Fsm_pe3_rd_FSM_PE3_RD,
    },
    { /* 195 : INDEX_DX_M1A_DEBUG_FSM_PE3_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x60, DX_M1A_DEBUG_FSM_PE3_RD_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE3_RD_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE3_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE3_RD.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe3_rd_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe3_rd_RESERVED0,
    },
    { /* 196 : INDEX_DX_M1A_DEBUG_FSM_PE3_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_PE3_WR", 
      Read_Dx_m1a_debug_Fsm_pe3_wr,
      Write_Dx_m1a_debug_Fsm_pe3_wr,
    },
    { /* 197 : INDEX_DX_M1A_DEBUG_FSM_PE3_WR_FSM_PE3_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x64, DX_M1A_DEBUG_FSM_PE3_WR_FSM_PE3_WR_LEN, DX_M1A_DEBUG_FSM_PE3_WR_FSM_PE3_WR_MASK, DX_M1A_DEBUG_FSM_PE3_WR_FSM_PE3_WR_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.FSM_PE3_WR.FSM_PE3_WR", 
      Read_Dx_m1a_debug_Fsm_pe3_wr_FSM_PE3_WR,
      Write_Dx_m1a_debug_Fsm_pe3_wr_FSM_PE3_WR,
    },
    { /* 198 : INDEX_DX_M1A_DEBUG_FSM_PE3_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x64, DX_M1A_DEBUG_FSM_PE3_WR_RESERVED0_LEN, DX_M1A_DEBUG_FSM_PE3_WR_RESERVED0_MASK, DX_M1A_DEBUG_FSM_PE3_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_PE3_WR.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_pe3_wr_RESERVED0,
      Write_Dx_m1a_debug_Fsm_pe3_wr_RESERVED0,
    },
    { /* 199 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_CMD_ARB", 
      Read_Dx_m1a_debug_Dma_cmd_arb,
      Write_Dx_m1a_debug_Dma_cmd_arb,
    },
    { /* 200 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_EMPTY_RD,
    },
    { /* 201 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RIDFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RIDFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RIDFF_FULL_WR,
    },
    { /* 202 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_EMPTY_RD,
    },
    { /* 203 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WIDFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WIDFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WIDFF_FULL_WR,
    },
    { /* 204 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_EMPTY_RD,
    },
    { /* 205 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WDMAFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WDMAFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WDMAFF_FULL_WR,
    },
    { /* 206 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_EMPTY_RD,
    },
    { /* 207 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WMFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WMFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WMFF_FULL_WR,
    },
    { /* 208 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_EMPTY_RD,
    },
    { /* 209 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RAFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RAFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RAFF_FULL_WR,
    },
    { /* 210 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_EMPTY_RD,
    },
    { /* 211 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RMFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RMFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RMFF_FULL_WR,
    },
    { /* 212 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_EMPTY_RD,
    },
    { /* 213 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WAFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WAFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WAFF_FULL_WR,
    },
    { /* 214 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_EMPTY_RD,
    },
    { /* 215 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMEN_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMEN_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMEN_FULL_WR,
    },
    { /* 216 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_EMPTY_RD,
    },
    { /* 217 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_WCMFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_WCMFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_WCMFF_FULL_WR,
    },
    { /* 218 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_EMPTY_RD,
    },
    { /* 219 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_CMD_ARB_RCMFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.CMD_ARB_RCMFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmd_arb_CMD_ARB_RCMFF_FULL_WR,
    },
    { /* 220 : INDEX_DX_M1A_DEBUG_DMA_CMD_ARB_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x68, DX_M1A_DEBUG_DMA_CMD_ARB_RESERVED0_LEN, DX_M1A_DEBUG_DMA_CMD_ARB_RESERVED0_MASK, DX_M1A_DEBUG_DMA_CMD_ARB_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_CMD_ARB.RESERVED0", 
      Read_Dx_m1a_debug_Dma_cmd_arb_RESERVED0,
      Write_Dx_m1a_debug_Dma_cmd_arb_RESERVED0,
    },
    { /* 221 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_AXI_RD", 
      Read_Dx_m1a_debug_Dma_axi_rd,
      Write_Dx_m1a_debug_Dma_axi_rd,
    },
    { /* 222 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_ACSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_ACSM_LEN, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_ACSM_MASK, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_ACSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_ACSM", 
      Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_ACSM,
      Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_ACSM,
    },
    { /* 223 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_RESERVED2 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED2_LEN, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED2_MASK, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED2_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.RESERVED2", 
      Read_Dx_m1a_debug_Dma_axi_rd_RESERVED2,
      Write_Dx_m1a_debug_Dma_axi_rd_RESERVED2,
    },
    { /* 224 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DCSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DCSM_LEN, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DCSM_MASK, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DCSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DCSM", 
      Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DCSM,
      Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DCSM,
    },
    { /* 225 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_RESERVED1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED1_LEN, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED1_MASK, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.RESERVED1", 
      Read_Dx_m1a_debug_Dma_axi_rd_RESERVED1,
      Write_Dx_m1a_debug_Dma_axi_rd_RESERVED1,
    },
    { /* 226 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_EMPTY_RD,
    },
    { /* 227 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_FULL_WR_LEN, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_FULL_WR_MASK, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_DMAR_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_DMAR_FULL_WR", 
      Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_FULL_WR,
      Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_DMAR_FULL_WR,
    },
    { /* 228 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_EMPTY_RD,
    },
    { /* 229 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_AXI_RD_AXI_RD_AFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.AXI_RD_AFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_axi_rd_AXI_RD_AFF_FULL_WR,
    },
    { /* 230 : INDEX_DX_M1A_DEBUG_DMA_AXI_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x6c, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED0_LEN, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED0_MASK, DX_M1A_DEBUG_DMA_AXI_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_AXI_RD.RESERVED0", 
      Read_Dx_m1a_debug_Dma_axi_rd_RESERVED0,
      Write_Dx_m1a_debug_Dma_axi_rd_RESERVED0,
    },
    { /* 231 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_AXI_WR", 
      Read_Dx_m1a_debug_Dma_axi_wr,
      Write_Dx_m1a_debug_Dma_axi_wr,
    },
    { /* 232 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_ACSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_ACSM_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_ACSM_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_ACSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_ACSM", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_ACSM,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_ACSM,
    },
    { /* 233 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_RESERVED2 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED2_LEN, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED2_MASK, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED2_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.RESERVED2", 
      Read_Dx_m1a_debug_Dma_axi_wr_RESERVED2,
      Write_Dx_m1a_debug_Dma_axi_wr_RESERVED2,
    },
    { /* 234 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DCSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DCSM_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DCSM_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DCSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DCSM", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DCSM,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DCSM,
    },
    { /* 235 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_RESERVED1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED1_LEN, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED1_MASK, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.RESERVED1", 
      Read_Dx_m1a_debug_Dma_axi_wr_RESERVED1,
      Write_Dx_m1a_debug_Dma_axi_wr_RESERVED1,
    },
    { /* 236 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_EMPTY_RD,
    },
    { /* 237 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_FULL_WR_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_FULL_WR_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_DMAW_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_DMAW_FULL_WR", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_FULL_WR,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_DMAW_FULL_WR,
    },
    { /* 238 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_EMPTY_RD,
    },
    { /* 239 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_BFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_BFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_BFF_FULL_WR,
    },
    { /* 240 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_EMPTY_RD,
    },
    { /* 241 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_AXI_WR_AXI_WR_AFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.AXI_WR_AFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_axi_wr_AXI_WR_AFF_FULL_WR,
    },
    { /* 242 : INDEX_DX_M1A_DEBUG_DMA_AXI_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x70, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED0_LEN, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED0_MASK, DX_M1A_DEBUG_DMA_AXI_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_AXI_WR.RESERVED0", 
      Read_Dx_m1a_debug_Dma_axi_wr_RESERVED0,
      Write_Dx_m1a_debug_Dma_axi_wr_RESERVED0,
    },
    { /* 243 : INDEX_DX_M1A_DEBUG_DMA_MEM_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_MEM_WR", 
      Read_Dx_m1a_debug_Dma_mem_wr,
      Write_Dx_m1a_debug_Dma_mem_wr,
    },
    { /* 244 : INDEX_DX_M1A_DEBUG_DMA_MEM_WR_MEM_WR_CSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x74, DX_M1A_DEBUG_DMA_MEM_WR_MEM_WR_CSM_LEN, DX_M1A_DEBUG_DMA_MEM_WR_MEM_WR_CSM_MASK, DX_M1A_DEBUG_DMA_MEM_WR_MEM_WR_CSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_MEM_WR.MEM_WR_CSM", 
      Read_Dx_m1a_debug_Dma_mem_wr_MEM_WR_CSM,
      Write_Dx_m1a_debug_Dma_mem_wr_MEM_WR_CSM,
    },
    { /* 245 : INDEX_DX_M1A_DEBUG_DMA_MEM_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x74, DX_M1A_DEBUG_DMA_MEM_WR_RESERVED0_LEN, DX_M1A_DEBUG_DMA_MEM_WR_RESERVED0_MASK, DX_M1A_DEBUG_DMA_MEM_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_MEM_WR.RESERVED0", 
      Read_Dx_m1a_debug_Dma_mem_wr_RESERVED0,
      Write_Dx_m1a_debug_Dma_mem_wr_RESERVED0,
    },
    { /* 246 : INDEX_DX_M1A_DEBUG_DMA_MEM_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_MEM_RD", 
      Read_Dx_m1a_debug_Dma_mem_rd,
      Write_Dx_m1a_debug_Dma_mem_rd,
    },
    { /* 247 : INDEX_DX_M1A_DEBUG_DMA_MEM_RD_MEM_RD_CSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x78, DX_M1A_DEBUG_DMA_MEM_RD_MEM_RD_CSM_LEN, DX_M1A_DEBUG_DMA_MEM_RD_MEM_RD_CSM_MASK, DX_M1A_DEBUG_DMA_MEM_RD_MEM_RD_CSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_MEM_RD.MEM_RD_CSM", 
      Read_Dx_m1a_debug_Dma_mem_rd_MEM_RD_CSM,
      Write_Dx_m1a_debug_Dma_mem_rd_MEM_RD_CSM,
    },
    { /* 248 : INDEX_DX_M1A_DEBUG_DMA_MEM_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x78, DX_M1A_DEBUG_DMA_MEM_RD_RESERVED0_LEN, DX_M1A_DEBUG_DMA_MEM_RD_RESERVED0_MASK, DX_M1A_DEBUG_DMA_MEM_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_MEM_RD.RESERVED0", 
      Read_Dx_m1a_debug_Dma_mem_rd_RESERVED0,
      Write_Dx_m1a_debug_Dma_mem_rd_RESERVED0,
    },
    { /* 249 : INDEX_DX_M1A_DEBUG_DMA_MEM_CP */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_MEM_CP", 
      Read_Dx_m1a_debug_Dma_mem_cp,
      Write_Dx_m1a_debug_Dma_mem_cp,
    },
    { /* 250 : INDEX_DX_M1A_DEBUG_DMA_MEM_CP_MEM_CP_CSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x7c, DX_M1A_DEBUG_DMA_MEM_CP_MEM_CP_CSM_LEN, DX_M1A_DEBUG_DMA_MEM_CP_MEM_CP_CSM_MASK, DX_M1A_DEBUG_DMA_MEM_CP_MEM_CP_CSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_MEM_CP.MEM_CP_CSM", 
      Read_Dx_m1a_debug_Dma_mem_cp_MEM_CP_CSM,
      Write_Dx_m1a_debug_Dma_mem_cp_MEM_CP_CSM,
    },
    { /* 251 : INDEX_DX_M1A_DEBUG_DMA_MEM_CP_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x7c, DX_M1A_DEBUG_DMA_MEM_CP_RESERVED0_LEN, DX_M1A_DEBUG_DMA_MEM_CP_RESERVED0_MASK, DX_M1A_DEBUG_DMA_MEM_CP_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_MEM_CP.RESERVED0", 
      Read_Dx_m1a_debug_Dma_mem_cp_RESERVED0,
      Write_Dx_m1a_debug_Dma_mem_cp_RESERVED0,
    },
    { /* 252 : INDEX_DX_M1A_DEBUG_DMA_SFR_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x80, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_SFR_WR", 
      Read_Dx_m1a_debug_Dma_sfr_wr,
      Write_Dx_m1a_debug_Dma_sfr_wr,
    },
    { /* 253 : INDEX_DX_M1A_DEBUG_DMA_SFR_WR_SFR_WR_CSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x80, DX_M1A_DEBUG_DMA_SFR_WR_SFR_WR_CSM_LEN, DX_M1A_DEBUG_DMA_SFR_WR_SFR_WR_CSM_MASK, DX_M1A_DEBUG_DMA_SFR_WR_SFR_WR_CSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_SFR_WR.SFR_WR_CSM", 
      Read_Dx_m1a_debug_Dma_sfr_wr_SFR_WR_CSM,
      Write_Dx_m1a_debug_Dma_sfr_wr_SFR_WR_CSM,
    },
    { /* 254 : INDEX_DX_M1A_DEBUG_DMA_SFR_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x80, DX_M1A_DEBUG_DMA_SFR_WR_RESERVED0_LEN, DX_M1A_DEBUG_DMA_SFR_WR_RESERVED0_MASK, DX_M1A_DEBUG_DMA_SFR_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_SFR_WR.RESERVED0", 
      Read_Dx_m1a_debug_Dma_sfr_wr_RESERVED0,
      Write_Dx_m1a_debug_Dma_sfr_wr_RESERVED0,
    },
    { /* 255 : INDEX_DX_M1A_DEBUG_DMA_CMEM_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x84, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_CMEM_RD", 
      Read_Dx_m1a_debug_Dma_cmem_rd,
      Write_Dx_m1a_debug_Dma_cmem_rd,
    },
    { /* 256 : INDEX_DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_CSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x84, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_CSM_LEN, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_CSM_MASK, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_CSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_CSM", 
      Read_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_CSM,
      Write_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_CSM,
    },
    { /* 257 : INDEX_DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x84, DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED1_LEN, DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED1_MASK, DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED1", 
      Read_Dx_m1a_debug_Dma_cmem_rd_RESERVED1,
      Write_Dx_m1a_debug_Dma_cmem_rd_RESERVED1,
    },
    { /* 258 : INDEX_DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x84, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_EMPTY_RD,
    },
    { /* 259 : INDEX_DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x84, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMEM_RD_CMEM_RD_DMARFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMEM_RD.CMEM_RD_DMARFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmem_rd_CMEM_RD_DMARFF_FULL_WR,
    },
    { /* 260 : INDEX_DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x84, DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED0_LEN, DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED0_MASK, DX_M1A_DEBUG_DMA_CMEM_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_CMEM_RD.RESERVED0", 
      Read_Dx_m1a_debug_Dma_cmem_rd_RESERVED0,
      Write_Dx_m1a_debug_Dma_cmem_rd_RESERVED0,
    },
    { /* 261 : INDEX_DX_M1A_DEBUG_DMA_CMEM_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x88, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.DMA_CMEM_WR", 
      Read_Dx_m1a_debug_Dma_cmem_wr,
      Write_Dx_m1a_debug_Dma_cmem_wr,
    },
    { /* 262 : INDEX_DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_CSM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x88, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_CSM_LEN, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_CSM_MASK, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_CSM_OFFSET, 0x1, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_CSM", 
      Read_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_CSM,
      Write_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_CSM,
    },
    { /* 263 : INDEX_DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x88, DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED1_LEN, DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED1_MASK, DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED1", 
      Read_Dx_m1a_debug_Dma_cmem_wr_RESERVED1,
      Write_Dx_m1a_debug_Dma_cmem_wr_RESERVED1,
    },
    { /* 264 : INDEX_DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_EMPTY_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x88, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_EMPTY_RD_LEN, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_EMPTY_RD_MASK, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_EMPTY_RD_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_EMPTY_RD", 
      Read_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_EMPTY_RD,
      Write_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_EMPTY_RD,
    },
    { /* 265 : INDEX_DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_FULL_WR */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x88, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_FULL_WR_LEN, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_FULL_WR_MASK, DX_M1A_DEBUG_DMA_CMEM_WR_CMEM_WR_DMARFF_FULL_WR_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.DMA_CMEM_WR.CMEM_WR_DMARFF_FULL_WR", 
      Read_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_FULL_WR,
      Write_Dx_m1a_debug_Dma_cmem_wr_CMEM_WR_DMARFF_FULL_WR,
    },
    { /* 266 : INDEX_DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x88, DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED0_LEN, DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED0_MASK, DX_M1A_DEBUG_DMA_CMEM_WR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.DMA_CMEM_WR.RESERVED0", 
      Read_Dx_m1a_debug_Dma_cmem_wr_RESERVED0,
      Write_Dx_m1a_debug_Dma_cmem_wr_RESERVED0,
    },
    { /* 267 : INDEX_DX_M1A_DEBUG_SFU_FIFO */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.SFU_FIFO", 
      Read_Dx_m1a_debug_Sfu_fifo,
      Write_Dx_m1a_debug_Sfu_fifo,
    },
    { /* 268 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE1_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE1_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE1_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE1", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE1,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE1,
    },
    { /* 269 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE1_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE1_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE1_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE1", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE1,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE1,
    },
    { /* 270 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE0_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE0_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_LSB_PE0_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_LSB_PE0", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE0,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_LSB_PE0,
    },
    { /* 271 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE0_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE0_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_EMPTY_RD_MSB_PE0_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_EMPTY_RD_MSB_PE0", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE0,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_EMPTY_RD_MSB_PE0,
    },
    { /* 272 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE1_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE1_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE1_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE1", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE1,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE1,
    },
    { /* 273 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE1_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE1_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE1_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE1", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE1,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE1,
    },
    { /* 274 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE0_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE0_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_LSB_PE0_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_LSB_PE0", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE0,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_LSB_PE0,
    },
    { /* 275 : INDEX_DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE0_LEN, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE0_MASK, DX_M1A_DEBUG_SFU_FIFO_SFU_FF_FULL_WR_MSB_PE0_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.SFU_FIFO.SFU_FF_FULL_WR_MSB_PE0", 
      Read_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE0,
      Write_Dx_m1a_debug_Sfu_fifo_SFU_FF_FULL_WR_MSB_PE0,
    },
    { /* 276 : INDEX_DX_M1A_DEBUG_SFU_FIFO_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x8c, DX_M1A_DEBUG_SFU_FIFO_RESERVED0_LEN, DX_M1A_DEBUG_SFU_FIFO_RESERVED0_MASK, DX_M1A_DEBUG_SFU_FIFO_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.SFU_FIFO.RESERVED0", 
      Read_Dx_m1a_debug_Sfu_fifo_RESERVED0,
      Write_Dx_m1a_debug_Sfu_fifo_RESERVED0,
    },
    { /* 277 : INDEX_DX_M1A_DEBUG_NPU_DBG0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x90, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG0", 
      Read_Dx_m1a_debug_Npu_dbg0,
      Write_Dx_m1a_debug_Npu_dbg0,
    },
    { /* 278 : INDEX_DX_M1A_DEBUG_NPU_DBG0_FINISH_CNT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x90, DX_M1A_DEBUG_NPU_DBG0_FINISH_CNT_LEN, DX_M1A_DEBUG_NPU_DBG0_FINISH_CNT_MASK, DX_M1A_DEBUG_NPU_DBG0_FINISH_CNT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG0.FINISH_CNT", 
      Read_Dx_m1a_debug_Npu_dbg0_FINISH_CNT,
      Write_Dx_m1a_debug_Npu_dbg0_FINISH_CNT,
    },
    { /* 279 : INDEX_DX_M1A_DEBUG_NPU_DBG0_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x90, DX_M1A_DEBUG_NPU_DBG0_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG0_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG0.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg0_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg0_RESERVED0,
    },
    { /* 280 : INDEX_DX_M1A_DEBUG_NPU_DBG1 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x94, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DEBUG.NPU_DBG1", 
      Read_Dx_m1a_debug_Npu_dbg1,
      Write_Dx_m1a_debug_Npu_dbg1,
    },
    { /* 281 : INDEX_DX_M1A_DEBUG_NPU_DBG1_CAPTURE_START_TILE_NUM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x94, DX_M1A_DEBUG_NPU_DBG1_CAPTURE_START_TILE_NUM_LEN, DX_M1A_DEBUG_NPU_DBG1_CAPTURE_START_TILE_NUM_MASK, DX_M1A_DEBUG_NPU_DBG1_CAPTURE_START_TILE_NUM_OFFSET, 0xffff, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG1.CAPTURE_START_TILE_NUM", 
      Read_Dx_m1a_debug_Npu_dbg1_CAPTURE_START_TILE_NUM,
      Write_Dx_m1a_debug_Npu_dbg1_CAPTURE_START_TILE_NUM,
    },
    { /* 282 : INDEX_DX_M1A_DEBUG_NPU_DBG1_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x94, DX_M1A_DEBUG_NPU_DBG1_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG1_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG1.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg1_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg1_RESERVED0,
    },
    { /* 283 : INDEX_DX_M1A_DEBUG_NPU_DBG2 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x98, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG2", 
      Read_Dx_m1a_debug_Npu_dbg2,
      Write_Dx_m1a_debug_Npu_dbg2,
    },
    { /* 284 : INDEX_DX_M1A_DEBUG_NPU_DBG2_CAPTURE_PE_VALID_NUM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x98, DX_M1A_DEBUG_NPU_DBG2_CAPTURE_PE_VALID_NUM_LEN, DX_M1A_DEBUG_NPU_DBG2_CAPTURE_PE_VALID_NUM_MASK, DX_M1A_DEBUG_NPU_DBG2_CAPTURE_PE_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG2.CAPTURE_PE_VALID_NUM", 
      Read_Dx_m1a_debug_Npu_dbg2_CAPTURE_PE_VALID_NUM,
      Write_Dx_m1a_debug_Npu_dbg2_CAPTURE_PE_VALID_NUM,
    },
    { /* 285 : INDEX_DX_M1A_DEBUG_NPU_DBG3 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x9c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DEBUG.NPU_DBG3", 
      Read_Dx_m1a_debug_Npu_dbg3,
      Write_Dx_m1a_debug_Npu_dbg3,
    },
    { /* 286 : INDEX_DX_M1A_DEBUG_NPU_DBG3_CAPTURE_PE_CHANNEL_NUM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x9c, DX_M1A_DEBUG_NPU_DBG3_CAPTURE_PE_CHANNEL_NUM_LEN, DX_M1A_DEBUG_NPU_DBG3_CAPTURE_PE_CHANNEL_NUM_MASK, DX_M1A_DEBUG_NPU_DBG3_CAPTURE_PE_CHANNEL_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG3.CAPTURE_PE_CHANNEL_NUM", 
      Read_Dx_m1a_debug_Npu_dbg3_CAPTURE_PE_CHANNEL_NUM,
      Write_Dx_m1a_debug_Npu_dbg3_CAPTURE_PE_CHANNEL_NUM,
    },
    { /* 287 : INDEX_DX_M1A_DEBUG_NPU_DBG3_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0x9c, DX_M1A_DEBUG_NPU_DBG3_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG3_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG3_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG3.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg3_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg3_RESERVED0,
    },
    { /* 288 : INDEX_DX_M1A_DEBUG_NPU_DBG4 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa0, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG4", 
      Read_Dx_m1a_debug_Npu_dbg4,
      Write_Dx_m1a_debug_Npu_dbg4,
    },
    { /* 289 : INDEX_DX_M1A_DEBUG_NPU_DBG4_CAPTURE_PE0_OUT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa0, DX_M1A_DEBUG_NPU_DBG4_CAPTURE_PE0_OUT_LEN, DX_M1A_DEBUG_NPU_DBG4_CAPTURE_PE0_OUT_MASK, DX_M1A_DEBUG_NPU_DBG4_CAPTURE_PE0_OUT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG4.CAPTURE_PE0_OUT", 
      Read_Dx_m1a_debug_Npu_dbg4_CAPTURE_PE0_OUT,
      Write_Dx_m1a_debug_Npu_dbg4_CAPTURE_PE0_OUT,
    },
    { /* 290 : INDEX_DX_M1A_DEBUG_NPU_DBG4_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa0, DX_M1A_DEBUG_NPU_DBG4_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG4_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG4_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG4.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg4_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg4_RESERVED0,
    },
    { /* 291 : INDEX_DX_M1A_DEBUG_NPU_DBG5 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa4, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG5", 
      Read_Dx_m1a_debug_Npu_dbg5,
      Write_Dx_m1a_debug_Npu_dbg5,
    },
    { /* 292 : INDEX_DX_M1A_DEBUG_NPU_DBG5_CAPTURE_PE1_OUT */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa4, DX_M1A_DEBUG_NPU_DBG5_CAPTURE_PE1_OUT_LEN, DX_M1A_DEBUG_NPU_DBG5_CAPTURE_PE1_OUT_MASK, DX_M1A_DEBUG_NPU_DBG5_CAPTURE_PE1_OUT_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG5.CAPTURE_PE1_OUT", 
      Read_Dx_m1a_debug_Npu_dbg5_CAPTURE_PE1_OUT,
      Write_Dx_m1a_debug_Npu_dbg5_CAPTURE_PE1_OUT,
    },
    { /* 293 : INDEX_DX_M1A_DEBUG_NPU_DBG5_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa4, DX_M1A_DEBUG_NPU_DBG5_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG5_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG5_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG5.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg5_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg5_RESERVED0,
    },
    { /* 294 : INDEX_DX_M1A_DEBUG_NPU_DBG6 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG6", 
      Read_Dx_m1a_debug_Npu_dbg6,
      Write_Dx_m1a_debug_Npu_dbg6,
    },
    { /* 295 : INDEX_DX_M1A_DEBUG_NPU_DBG6_CAPTURE_SFU_VALID_NUM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xa8, DX_M1A_DEBUG_NPU_DBG6_CAPTURE_SFU_VALID_NUM_LEN, DX_M1A_DEBUG_NPU_DBG6_CAPTURE_SFU_VALID_NUM_MASK, DX_M1A_DEBUG_NPU_DBG6_CAPTURE_SFU_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG6.CAPTURE_SFU_VALID_NUM", 
      Read_Dx_m1a_debug_Npu_dbg6_CAPTURE_SFU_VALID_NUM,
      Write_Dx_m1a_debug_Npu_dbg6_CAPTURE_SFU_VALID_NUM,
    },
    { /* 296 : INDEX_DX_M1A_DEBUG_NPU_DBG7 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xac, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DEBUG.NPU_DBG7", 
      Read_Dx_m1a_debug_Npu_dbg7,
      Write_Dx_m1a_debug_Npu_dbg7,
    },
    { /* 297 : INDEX_DX_M1A_DEBUG_NPU_DBG7_CAPTURE_SFU_CHANNEL_NUM */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xac, DX_M1A_DEBUG_NPU_DBG7_CAPTURE_SFU_CHANNEL_NUM_LEN, DX_M1A_DEBUG_NPU_DBG7_CAPTURE_SFU_CHANNEL_NUM_MASK, DX_M1A_DEBUG_NPU_DBG7_CAPTURE_SFU_CHANNEL_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DEBUG.NPU_DBG7.CAPTURE_SFU_CHANNEL_NUM", 
      Read_Dx_m1a_debug_Npu_dbg7_CAPTURE_SFU_CHANNEL_NUM,
      Write_Dx_m1a_debug_Npu_dbg7_CAPTURE_SFU_CHANNEL_NUM,
    },
    { /* 298 : INDEX_DX_M1A_DEBUG_NPU_DBG7_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xac, DX_M1A_DEBUG_NPU_DBG7_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG7_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG7_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG7.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg7_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg7_RESERVED0,
    },
    { /* 299 : INDEX_DX_M1A_DEBUG_NPU_DBG8 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb0, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG8", 
      Read_Dx_m1a_debug_Npu_dbg8,
      Write_Dx_m1a_debug_Npu_dbg8,
    },
    { /* 300 : INDEX_DX_M1A_DEBUG_NPU_DBG8_CAPTURE_SFU_DEQ_DATA */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb0, DX_M1A_DEBUG_NPU_DBG8_CAPTURE_SFU_DEQ_DATA_LEN, DX_M1A_DEBUG_NPU_DBG8_CAPTURE_SFU_DEQ_DATA_MASK, DX_M1A_DEBUG_NPU_DBG8_CAPTURE_SFU_DEQ_DATA_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG8.CAPTURE_SFU_DEQ_DATA", 
      Read_Dx_m1a_debug_Npu_dbg8_CAPTURE_SFU_DEQ_DATA,
      Write_Dx_m1a_debug_Npu_dbg8_CAPTURE_SFU_DEQ_DATA,
    },
    { /* 301 : INDEX_DX_M1A_DEBUG_NPU_DBG8_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb0, DX_M1A_DEBUG_NPU_DBG8_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG8_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG8_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG8.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg8_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg8_RESERVED0,
    },
    { /* 302 : INDEX_DX_M1A_DEBUG_NPU_DBG9 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb4, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG9", 
      Read_Dx_m1a_debug_Npu_dbg9,
      Write_Dx_m1a_debug_Npu_dbg9,
    },
    { /* 303 : INDEX_DX_M1A_DEBUG_NPU_DBG9_CAPTURE_SFU_PAF_DATA */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb4, DX_M1A_DEBUG_NPU_DBG9_CAPTURE_SFU_PAF_DATA_LEN, DX_M1A_DEBUG_NPU_DBG9_CAPTURE_SFU_PAF_DATA_MASK, DX_M1A_DEBUG_NPU_DBG9_CAPTURE_SFU_PAF_DATA_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG9.CAPTURE_SFU_PAF_DATA", 
      Read_Dx_m1a_debug_Npu_dbg9_CAPTURE_SFU_PAF_DATA,
      Write_Dx_m1a_debug_Npu_dbg9_CAPTURE_SFU_PAF_DATA,
    },
    { /* 304 : INDEX_DX_M1A_DEBUG_NPU_DBG9_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb4, DX_M1A_DEBUG_NPU_DBG9_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG9_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG9_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG9.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg9_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg9_RESERVED0,
    },
    { /* 305 : INDEX_DX_M1A_DEBUG_NPU_DBG10 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb8, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG10", 
      Read_Dx_m1a_debug_Npu_dbg10,
      Write_Dx_m1a_debug_Npu_dbg10,
    },
    { /* 306 : INDEX_DX_M1A_DEBUG_NPU_DBG10_CAPTURE_SFU_POSTA_DATA */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb8, DX_M1A_DEBUG_NPU_DBG10_CAPTURE_SFU_POSTA_DATA_LEN, DX_M1A_DEBUG_NPU_DBG10_CAPTURE_SFU_POSTA_DATA_MASK, DX_M1A_DEBUG_NPU_DBG10_CAPTURE_SFU_POSTA_DATA_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG10.CAPTURE_SFU_POSTA_DATA", 
      Read_Dx_m1a_debug_Npu_dbg10_CAPTURE_SFU_POSTA_DATA,
      Write_Dx_m1a_debug_Npu_dbg10_CAPTURE_SFU_POSTA_DATA,
    },
    { /* 307 : INDEX_DX_M1A_DEBUG_NPU_DBG10_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xb8, DX_M1A_DEBUG_NPU_DBG10_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG10_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG10_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG10.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg10_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg10_RESERVED0,
    },
    { /* 308 : INDEX_DX_M1A_DEBUG_NPU_DBG11 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xbc, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.NPU_DBG11", 
      Read_Dx_m1a_debug_Npu_dbg11,
      Write_Dx_m1a_debug_Npu_dbg11,
    },
    { /* 309 : INDEX_DX_M1A_DEBUG_NPU_DBG11_CAPTURE_SFU_POSTB_DATA */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xbc, DX_M1A_DEBUG_NPU_DBG11_CAPTURE_SFU_POSTB_DATA_LEN, DX_M1A_DEBUG_NPU_DBG11_CAPTURE_SFU_POSTB_DATA_MASK, DX_M1A_DEBUG_NPU_DBG11_CAPTURE_SFU_POSTB_DATA_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.NPU_DBG11.CAPTURE_SFU_POSTB_DATA", 
      Read_Dx_m1a_debug_Npu_dbg11_CAPTURE_SFU_POSTB_DATA,
      Write_Dx_m1a_debug_Npu_dbg11_CAPTURE_SFU_POSTB_DATA,
    },
    { /* 310 : INDEX_DX_M1A_DEBUG_NPU_DBG11_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xbc, DX_M1A_DEBUG_NPU_DBG11_RESERVED0_LEN, DX_M1A_DEBUG_NPU_DBG11_RESERVED0_MASK, DX_M1A_DEBUG_NPU_DBG11_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.NPU_DBG11.RESERVED0", 
      Read_Dx_m1a_debug_Npu_dbg11_RESERVED0,
      Write_Dx_m1a_debug_Npu_dbg11_RESERVED0,
    },
    { /* 311 : INDEX_DX_M1A_DEBUG_FSM_RD */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xc0, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DEBUG.FSM_RD", 
      Read_Dx_m1a_debug_Fsm_rd,
      Write_Dx_m1a_debug_Fsm_rd,
    },
    { /* 312 : INDEX_DX_M1A_DEBUG_FSM_RD_FSM_RD_PULSE */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xc0, DX_M1A_DEBUG_FSM_RD_FSM_RD_PULSE_LEN, DX_M1A_DEBUG_FSM_RD_FSM_RD_PULSE_MASK, DX_M1A_DEBUG_FSM_RD_FSM_RD_PULSE_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DEBUG.FSM_RD.FSM_RD_PULSE", 
      Read_Dx_m1a_debug_Fsm_rd_FSM_RD_PULSE,
      Write_Dx_m1a_debug_Fsm_rd_FSM_RD_PULSE,
    },
    { /* 313 : INDEX_DX_M1A_DEBUG_FSM_RD_RESERVED0 */
      DXRT_NPU_REG_DEBUG, REG_DX_M1A_DEBUG_OFFSET, REG_DX_M1A_DEBUG_OFFSET + 0xc0, DX_M1A_DEBUG_FSM_RD_RESERVED0_LEN, DX_M1A_DEBUG_FSM_RD_RESERVED0_MASK, DX_M1A_DEBUG_FSM_RD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DEBUG.FSM_RD.RESERVED0", 
      Read_Dx_m1a_debug_Fsm_rd_RESERVED0,
      Write_Dx_m1a_debug_Fsm_rd_RESERVED0,
    },
    { /* 314 : INDEX_DX_M1A_DMA_AXI_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.AXI_BASE_ADDR_LOW", 
      Read_Dx_m1a_dma_Axi_base_addr_low,
      Write_Dx_m1a_dma_Axi_base_addr_low,
    },
    { /* 315 : INDEX_DX_M1A_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x0, DX_M1A_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW_LEN, DX_M1A_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW_MASK, DX_M1A_DMA_AXI_BASE_ADDR_LOW_AXI4_BASE_ADDR_LOW_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.AXI_BASE_ADDR_LOW.AXI4_BASE_ADDR_LOW", 
      Read_Dx_m1a_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW,
      Write_Dx_m1a_dma_Axi_base_addr_low_AXI4_BASE_ADDR_LOW,
    },
    { /* 316 : INDEX_DX_M1A_DMA_AXI_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.AXI_BASE_ADDR_HIGH", 
      Read_Dx_m1a_dma_Axi_base_addr_high,
      Write_Dx_m1a_dma_Axi_base_addr_high,
    },
    { /* 317 : INDEX_DX_M1A_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x4, DX_M1A_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH_LEN, DX_M1A_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH_MASK, DX_M1A_DMA_AXI_BASE_ADDR_HIGH_AXI4_BASE_ADDR_HIGH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.AXI_BASE_ADDR_HIGH.AXI4_BASE_ADDR_HIGH", 
      Read_Dx_m1a_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH,
      Write_Dx_m1a_dma_Axi_base_addr_high_AXI4_BASE_ADDR_HIGH,
    },
    { /* 318 : INDEX_DX_M1A_DMA_AXI4_RADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.AXI4_RADDR", 
      Read_Dx_m1a_dma_Axi4_raddr,
      Write_Dx_m1a_dma_Axi4_raddr,
    },
    { /* 319 : INDEX_DX_M1A_DMA_AXI4_RADDR_DMA0_AXI4_RADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x8, DX_M1A_DMA_AXI4_RADDR_DMA0_AXI4_RADDR_LEN, DX_M1A_DMA_AXI4_RADDR_DMA0_AXI4_RADDR_MASK, DX_M1A_DMA_AXI4_RADDR_DMA0_AXI4_RADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.AXI4_RADDR.DMA0_AXI4_RADDR", 
      Read_Dx_m1a_dma_Axi4_raddr_DMA0_AXI4_RADDR,
      Write_Dx_m1a_dma_Axi4_raddr_DMA0_AXI4_RADDR,
    },
    { /* 320 : INDEX_DX_M1A_DMA_AXI4_WADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.AXI4_WADDR", 
      Read_Dx_m1a_dma_Axi4_waddr,
      Write_Dx_m1a_dma_Axi4_waddr,
    },
    { /* 321 : INDEX_DX_M1A_DMA_AXI4_WADDR_DMA0_AXI4_WADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0xc, DX_M1A_DMA_AXI4_WADDR_DMA0_AXI4_WADDR_LEN, DX_M1A_DMA_AXI4_WADDR_DMA0_AXI4_WADDR_MASK, DX_M1A_DMA_AXI4_WADDR_DMA0_AXI4_WADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.AXI4_WADDR.DMA0_AXI4_WADDR", 
      Read_Dx_m1a_dma_Axi4_waddr_DMA0_AXI4_WADDR,
      Write_Dx_m1a_dma_Axi4_waddr_DMA0_AXI4_WADDR,
    },
    { /* 322 : INDEX_DX_M1A_DMA_RSVD0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.RSVD0", 
      Read_Dx_m1a_dma_Rsvd0,
      Write_Dx_m1a_dma_Rsvd0,
    },
    { /* 323 : INDEX_DX_M1A_DMA_RSVD0_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x10, DX_M1A_DMA_RSVD0_RESERVED0_LEN, DX_M1A_DMA_RSVD0_RESERVED0_MASK, DX_M1A_DMA_RSVD0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.RSVD0.RESERVED0", 
      Read_Dx_m1a_dma_Rsvd0_RESERVED0,
      Write_Dx_m1a_dma_Rsvd0_RESERVED0,
    },
    { /* 324 : INDEX_DX_M1A_DMA_RSVD1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.RSVD1", 
      Read_Dx_m1a_dma_Rsvd1,
      Write_Dx_m1a_dma_Rsvd1,
    },
    { /* 325 : INDEX_DX_M1A_DMA_RSVD1_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x14, DX_M1A_DMA_RSVD1_RESERVED0_LEN, DX_M1A_DMA_RSVD1_RESERVED0_MASK, DX_M1A_DMA_RSVD1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.RSVD1.RESERVED0", 
      Read_Dx_m1a_dma_Rsvd1_RESERVED0,
      Write_Dx_m1a_dma_Rsvd1_RESERVED0,
    },
    { /* 326 : INDEX_DX_M1A_DMA_SRAM_DST_ADDR0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.SRAM_DST_ADDR0", 
      Read_Dx_m1a_dma_Sram_dst_addr0,
      Write_Dx_m1a_dma_Sram_dst_addr0,
    },
    { /* 327 : INDEX_DX_M1A_DMA_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x18, DX_M1A_DMA_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0_LEN, DX_M1A_DMA_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0_MASK, DX_M1A_DMA_SRAM_DST_ADDR0_DMA0_SRAM_DST_ADDR0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SRAM_DST_ADDR0.DMA0_SRAM_DST_ADDR0", 
      Read_Dx_m1a_dma_Sram_dst_addr0_DMA0_SRAM_DST_ADDR0,
      Write_Dx_m1a_dma_Sram_dst_addr0_DMA0_SRAM_DST_ADDR0,
    },
    { /* 328 : INDEX_DX_M1A_DMA_SRAM_DST_ADDR1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.SRAM_DST_ADDR1", 
      Read_Dx_m1a_dma_Sram_dst_addr1,
      Write_Dx_m1a_dma_Sram_dst_addr1,
    },
    { /* 329 : INDEX_DX_M1A_DMA_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x1c, DX_M1A_DMA_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1_LEN, DX_M1A_DMA_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1_MASK, DX_M1A_DMA_SRAM_DST_ADDR1_DMA0_SRAM_DST_ADDR1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SRAM_DST_ADDR1.DMA0_SRAM_DST_ADDR1", 
      Read_Dx_m1a_dma_Sram_dst_addr1_DMA0_SRAM_DST_ADDR1,
      Write_Dx_m1a_dma_Sram_dst_addr1_DMA0_SRAM_DST_ADDR1,
    },
    { /* 330 : INDEX_DX_M1A_DMA_SRAM_SRC_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.SRAM_SRC_ADDR", 
      Read_Dx_m1a_dma_Sram_src_addr,
      Write_Dx_m1a_dma_Sram_src_addr,
    },
    { /* 331 : INDEX_DX_M1A_DMA_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x20, DX_M1A_DMA_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR_LEN, DX_M1A_DMA_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR_MASK, DX_M1A_DMA_SRAM_SRC_ADDR_DMA0_SRAM_SRC_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SRAM_SRC_ADDR.DMA0_SRAM_SRC_ADDR", 
      Read_Dx_m1a_dma_Sram_src_addr_DMA0_SRAM_SRC_ADDR,
      Write_Dx_m1a_dma_Sram_src_addr_DMA0_SRAM_SRC_ADDR,
    },
    { /* 332 : INDEX_DX_M1A_DMA_READ_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.READ_SIZE", 
      Read_Dx_m1a_dma_Read_size,
      Write_Dx_m1a_dma_Read_size,
    },
    { /* 333 : INDEX_DX_M1A_DMA_READ_SIZE_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x24, DX_M1A_DMA_READ_SIZE_RESERVED1_LEN, DX_M1A_DMA_READ_SIZE_RESERVED1_MASK, DX_M1A_DMA_READ_SIZE_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.READ_SIZE.RESERVED1", 
      Read_Dx_m1a_dma_Read_size_RESERVED1,
      Write_Dx_m1a_dma_Read_size_RESERVED1,
    },
    { /* 334 : INDEX_DX_M1A_DMA_READ_SIZE_DMA0_READ_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x24, DX_M1A_DMA_READ_SIZE_DMA0_READ_SIZE_LEN, DX_M1A_DMA_READ_SIZE_DMA0_READ_SIZE_MASK, DX_M1A_DMA_READ_SIZE_DMA0_READ_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.READ_SIZE.DMA0_READ_SIZE", 
      Read_Dx_m1a_dma_Read_size_DMA0_READ_SIZE,
      Write_Dx_m1a_dma_Read_size_DMA0_READ_SIZE,
    },
    { /* 335 : INDEX_DX_M1A_DMA_READ_SIZE_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x24, DX_M1A_DMA_READ_SIZE_RESERVED0_LEN, DX_M1A_DMA_READ_SIZE_RESERVED0_MASK, DX_M1A_DMA_READ_SIZE_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.READ_SIZE.RESERVED0", 
      Read_Dx_m1a_dma_Read_size_RESERVED0,
      Write_Dx_m1a_dma_Read_size_RESERVED0,
    },
    { /* 336 : INDEX_DX_M1A_DMA_WRITE_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.WRITE_SIZE", 
      Read_Dx_m1a_dma_Write_size,
      Write_Dx_m1a_dma_Write_size,
    },
    { /* 337 : INDEX_DX_M1A_DMA_WRITE_SIZE_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x28, DX_M1A_DMA_WRITE_SIZE_RESERVED1_LEN, DX_M1A_DMA_WRITE_SIZE_RESERVED1_MASK, DX_M1A_DMA_WRITE_SIZE_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.WRITE_SIZE.RESERVED1", 
      Read_Dx_m1a_dma_Write_size_RESERVED1,
      Write_Dx_m1a_dma_Write_size_RESERVED1,
    },
    { /* 338 : INDEX_DX_M1A_DMA_WRITE_SIZE_DMA0_WRITE_SIZE */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x28, DX_M1A_DMA_WRITE_SIZE_DMA0_WRITE_SIZE_LEN, DX_M1A_DMA_WRITE_SIZE_DMA0_WRITE_SIZE_MASK, DX_M1A_DMA_WRITE_SIZE_DMA0_WRITE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.WRITE_SIZE.DMA0_WRITE_SIZE", 
      Read_Dx_m1a_dma_Write_size_DMA0_WRITE_SIZE,
      Write_Dx_m1a_dma_Write_size_DMA0_WRITE_SIZE,
    },
    { /* 339 : INDEX_DX_M1A_DMA_WRITE_SIZE_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x28, DX_M1A_DMA_WRITE_SIZE_RESERVED0_LEN, DX_M1A_DMA_WRITE_SIZE_RESERVED0_MASK, DX_M1A_DMA_WRITE_SIZE_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.WRITE_SIZE.RESERVED0", 
      Read_Dx_m1a_dma_Write_size_RESERVED0,
      Write_Dx_m1a_dma_Write_size_RESERVED0,
    },
    { /* 340 : INDEX_DX_M1A_DMA_RSVD2 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.RSVD2", 
      Read_Dx_m1a_dma_Rsvd2,
      Write_Dx_m1a_dma_Rsvd2,
    },
    { /* 341 : INDEX_DX_M1A_DMA_RSVD2_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x2c, DX_M1A_DMA_RSVD2_RESERVED0_LEN, DX_M1A_DMA_RSVD2_RESERVED0_MASK, DX_M1A_DMA_RSVD2_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.RSVD2.RESERVED0", 
      Read_Dx_m1a_dma_Rsvd2_RESERVED0,
      Write_Dx_m1a_dma_Rsvd2_RESERVED0,
    },
    { /* 342 : INDEX_DX_M1A_DMA_RSVD3 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.RSVD3", 
      Read_Dx_m1a_dma_Rsvd3,
      Write_Dx_m1a_dma_Rsvd3,
    },
    { /* 343 : INDEX_DX_M1A_DMA_RSVD3_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x30, DX_M1A_DMA_RSVD3_RESERVED0_LEN, DX_M1A_DMA_RSVD3_RESERVED0_MASK, DX_M1A_DMA_RSVD3_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.RSVD3.RESERVED0", 
      Read_Dx_m1a_dma_Rsvd3_RESERVED0,
      Write_Dx_m1a_dma_Rsvd3_RESERVED0,
    },
    { /* 344 : INDEX_DX_M1A_DMA_RSVD4 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.RSVD4", 
      Read_Dx_m1a_dma_Rsvd4,
      Write_Dx_m1a_dma_Rsvd4,
    },
    { /* 345 : INDEX_DX_M1A_DMA_RSVD4_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x34, DX_M1A_DMA_RSVD4_RESERVED0_LEN, DX_M1A_DMA_RSVD4_RESERVED0_MASK, DX_M1A_DMA_RSVD4_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.RSVD4.RESERVED0", 
      Read_Dx_m1a_dma_Rsvd4_RESERVED0,
      Write_Dx_m1a_dma_Rsvd4_RESERVED0,
    },
    { /* 346 : INDEX_DX_M1A_DMA_RSVD5 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.RSVD5", 
      Read_Dx_m1a_dma_Rsvd5,
      Write_Dx_m1a_dma_Rsvd5,
    },
    { /* 347 : INDEX_DX_M1A_DMA_RSVD5_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x38, DX_M1A_DMA_RSVD5_RESERVED0_LEN, DX_M1A_DMA_RSVD5_RESERVED0_MASK, DX_M1A_DMA_RSVD5_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.RSVD5.RESERVED0", 
      Read_Dx_m1a_dma_Rsvd5_RESERVED0,
      Write_Dx_m1a_dma_Rsvd5_RESERVED0,
    },
    { /* 348 : INDEX_DX_M1A_DMA_IRQ */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.IRQ", 
      Read_Dx_m1a_dma_Irq,
      Write_Dx_m1a_dma_Irq,
    },
    { /* 349 : INDEX_DX_M1A_DMA_IRQ_DMA_IRQ_EN */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x3c, DX_M1A_DMA_IRQ_DMA_IRQ_EN_LEN, DX_M1A_DMA_IRQ_DMA_IRQ_EN_MASK, DX_M1A_DMA_IRQ_DMA_IRQ_EN_OFFSET, 0x18, true, true, true, false,
      "DX_M1A_DMA.IRQ.DMA_IRQ_EN", 
      Read_Dx_m1a_dma_Irq_DMA_IRQ_EN,
      Write_Dx_m1a_dma_Irq_DMA_IRQ_EN,
    },
    { /* 350 : INDEX_DX_M1A_DMA_IRQ_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x3c, DX_M1A_DMA_IRQ_RESERVED0_LEN, DX_M1A_DMA_IRQ_RESERVED0_MASK, DX_M1A_DMA_IRQ_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.IRQ.RESERVED0", 
      Read_Dx_m1a_dma_Irq_RESERVED0,
      Write_Dx_m1a_dma_Irq_RESERVED0,
    },
    { /* 351 : INDEX_DX_M1A_DMA_CMD */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, false, true, true, true,
      "DX_M1A_DMA.CMD", 
      Read_Dx_m1a_dma_Cmd,
      Write_Dx_m1a_dma_Cmd,
    },
    { /* 352 : INDEX_DX_M1A_DMA_CMD_DMA_START_CMD */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x40, DX_M1A_DMA_CMD_DMA_START_CMD_LEN, DX_M1A_DMA_CMD_DMA_START_CMD_MASK, DX_M1A_DMA_CMD_DMA_START_CMD_OFFSET, 0x0, false, true, true, false,
      "DX_M1A_DMA.CMD.DMA_START_CMD", 
      Read_Dx_m1a_dma_Cmd_DMA_START_CMD,
      Write_Dx_m1a_dma_Cmd_DMA_START_CMD,
    },
    { /* 353 : INDEX_DX_M1A_DMA_CMD_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x40, DX_M1A_DMA_CMD_RESERVED0_LEN, DX_M1A_DMA_CMD_RESERVED0_MASK, DX_M1A_DMA_CMD_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.CMD.RESERVED0", 
      Read_Dx_m1a_dma_Cmd_RESERVED0,
      Write_Dx_m1a_dma_Cmd_RESERVED0,
    },
    { /* 354 : INDEX_DX_M1A_DMA_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DMA.STATUS", 
      Read_Dx_m1a_dma_Status,
      Write_Dx_m1a_dma_Status,
    },
    { /* 355 : INDEX_DX_M1A_DMA_STATUS_DMA_DONE_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x44, DX_M1A_DMA_STATUS_DMA_DONE_STATUS_LEN, DX_M1A_DMA_STATUS_DMA_DONE_STATUS_MASK, DX_M1A_DMA_STATUS_DMA_DONE_STATUS_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DMA.STATUS.DMA_DONE_STATUS", 
      Read_Dx_m1a_dma_Status_DMA_DONE_STATUS,
      Write_Dx_m1a_dma_Status_DMA_DONE_STATUS,
    },
    { /* 356 : INDEX_DX_M1A_DMA_STATUS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x44, DX_M1A_DMA_STATUS_RESERVED0_LEN, DX_M1A_DMA_STATUS_RESERVED0_MASK, DX_M1A_DMA_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.STATUS.RESERVED0", 
      Read_Dx_m1a_dma_Status_RESERVED0,
      Write_Dx_m1a_dma_Status_RESERVED0,
    },
    { /* 357 : INDEX_DX_M1A_DMA_SFR_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.SFR_BASE_ADDR_LOW", 
      Read_Dx_m1a_dma_Sfr_base_addr_low,
      Write_Dx_m1a_dma_Sfr_base_addr_low,
    },
    { /* 358 : INDEX_DX_M1A_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x48, DX_M1A_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_LEN, DX_M1A_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_MASK, DX_M1A_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW", 
      Read_Dx_m1a_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW,
      Write_Dx_m1a_dma_Sfr_base_addr_low_SFR_BASE_ADDR_LOW,
    },
    { /* 359 : INDEX_DX_M1A_DMA_SFR_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.SFR_BASE_ADDR_HIGH", 
      Read_Dx_m1a_dma_Sfr_base_addr_high,
      Write_Dx_m1a_dma_Sfr_base_addr_high,
    },
    { /* 360 : INDEX_DX_M1A_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x4c, DX_M1A_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_LEN, DX_M1A_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_MASK, DX_M1A_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH", 
      Read_Dx_m1a_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH,
      Write_Dx_m1a_dma_Sfr_base_addr_high_SFR_BASE_ADDR_HIGH,
    },
    { /* 361 : INDEX_DX_M1A_DMA_SFR_ADDR_OFFS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.SFR_ADDR_OFFS", 
      Read_Dx_m1a_dma_Sfr_addr_offs,
      Write_Dx_m1a_dma_Sfr_addr_offs,
    },
    { /* 362 : INDEX_DX_M1A_DMA_SFR_ADDR_OFFS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x50, DX_M1A_DMA_SFR_ADDR_OFFS_RESERVED0_LEN, DX_M1A_DMA_SFR_ADDR_OFFS_RESERVED0_MASK, DX_M1A_DMA_SFR_ADDR_OFFS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.SFR_ADDR_OFFS.RESERVED0", 
      Read_Dx_m1a_dma_Sfr_addr_offs_RESERVED0,
      Write_Dx_m1a_dma_Sfr_addr_offs_RESERVED0,
    },
    { /* 363 : INDEX_DX_M1A_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x50, DX_M1A_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_LEN, DX_M1A_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_MASK, DX_M1A_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS", 
      Read_Dx_m1a_dma_Sfr_addr_offs_SFR_ADDR_OFFS,
      Write_Dx_m1a_dma_Sfr_addr_offs_SFR_ADDR_OFFS,
    },
    { /* 364 : INDEX_DX_M1A_DMA_SFR_START_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.SFR_START_ADDR", 
      Read_Dx_m1a_dma_Sfr_start_addr,
      Write_Dx_m1a_dma_Sfr_start_addr,
    },
    { /* 365 : INDEX_DX_M1A_DMA_SFR_START_ADDR_SFR_START_ADDR */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x54, DX_M1A_DMA_SFR_START_ADDR_SFR_START_ADDR_LEN, DX_M1A_DMA_SFR_START_ADDR_SFR_START_ADDR_MASK, DX_M1A_DMA_SFR_START_ADDR_SFR_START_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SFR_START_ADDR.SFR_START_ADDR", 
      Read_Dx_m1a_dma_Sfr_start_addr_SFR_START_ADDR,
      Write_Dx_m1a_dma_Sfr_start_addr_SFR_START_ADDR,
    },
    { /* 366 : INDEX_DX_M1A_DMA_SFR_START_ADDR_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x54, DX_M1A_DMA_SFR_START_ADDR_RESERVED0_LEN, DX_M1A_DMA_SFR_START_ADDR_RESERVED0_MASK, DX_M1A_DMA_SFR_START_ADDR_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.SFR_START_ADDR.RESERVED0", 
      Read_Dx_m1a_dma_Sfr_start_addr_RESERVED0,
      Write_Dx_m1a_dma_Sfr_start_addr_RESERVED0,
    },
    { /* 367 : INDEX_DX_M1A_DMA_SFR_MOVE_CNT */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_DMA.SFR_MOVE_CNT", 
      Read_Dx_m1a_dma_Sfr_move_cnt,
      Write_Dx_m1a_dma_Sfr_move_cnt,
    },
    { /* 368 : INDEX_DX_M1A_DMA_SFR_MOVE_CNT_RESERVED1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x58, DX_M1A_DMA_SFR_MOVE_CNT_RESERVED1_LEN, DX_M1A_DMA_SFR_MOVE_CNT_RESERVED1_MASK, DX_M1A_DMA_SFR_MOVE_CNT_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.SFR_MOVE_CNT.RESERVED1", 
      Read_Dx_m1a_dma_Sfr_move_cnt_RESERVED1,
      Write_Dx_m1a_dma_Sfr_move_cnt_RESERVED1,
    },
    { /* 369 : INDEX_DX_M1A_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x58, DX_M1A_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT_LEN, DX_M1A_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT_MASK, DX_M1A_DMA_SFR_MOVE_CNT_SFR_MOVE_CNT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.SFR_MOVE_CNT.SFR_MOVE_CNT", 
      Read_Dx_m1a_dma_Sfr_move_cnt_SFR_MOVE_CNT,
      Write_Dx_m1a_dma_Sfr_move_cnt_SFR_MOVE_CNT,
    },
    { /* 370 : INDEX_DX_M1A_DMA_SFR_MOVE_CNT_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x58, DX_M1A_DMA_SFR_MOVE_CNT_RESERVED0_LEN, DX_M1A_DMA_SFR_MOVE_CNT_RESERVED0_MASK, DX_M1A_DMA_SFR_MOVE_CNT_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.SFR_MOVE_CNT.RESERVED0", 
      Read_Dx_m1a_dma_Sfr_move_cnt_RESERVED0,
      Write_Dx_m1a_dma_Sfr_move_cnt_RESERVED0,
    },
    { /* 371 : INDEX_DX_M1A_DMA_SFR_ID */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, false, true, true, true,
      "DX_M1A_DMA.SFR_ID", 
      Read_Dx_m1a_dma_Sfr_id,
      Write_Dx_m1a_dma_Sfr_id,
    },
    { /* 372 : INDEX_DX_M1A_DMA_SFR_ID_SFR_ID */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x5c, DX_M1A_DMA_SFR_ID_SFR_ID_LEN, DX_M1A_DMA_SFR_ID_SFR_ID_MASK, DX_M1A_DMA_SFR_ID_SFR_ID_OFFSET, 0x0, false, true, true, false,
      "DX_M1A_DMA.SFR_ID.SFR_ID", 
      Read_Dx_m1a_dma_Sfr_id_SFR_ID,
      Write_Dx_m1a_dma_Sfr_id_SFR_ID,
    },
    { /* 373 : INDEX_DX_M1A_DMA_SFR_ID_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x5c, DX_M1A_DMA_SFR_ID_RESERVED0_LEN, DX_M1A_DMA_SFR_ID_RESERVED0_MASK, DX_M1A_DMA_SFR_ID_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.SFR_ID.RESERVED0", 
      Read_Dx_m1a_dma_Sfr_id_RESERVED0,
      Write_Dx_m1a_dma_Sfr_id_RESERVED0,
    },
    { /* 374 : INDEX_DX_M1A_DMA_SFR_DMA_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DMA.SFR_DMA_STATUS", 
      Read_Dx_m1a_dma_Sfr_dma_status,
      Write_Dx_m1a_dma_Sfr_dma_status,
    },
    { /* 375 : INDEX_DX_M1A_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x60, DX_M1A_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS_LEN, DX_M1A_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS_MASK, DX_M1A_DMA_SFR_DMA_STATUS_SFR_DMA_DONE_STATUS_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DMA.SFR_DMA_STATUS.SFR_DMA_DONE_STATUS", 
      Read_Dx_m1a_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS,
      Write_Dx_m1a_dma_Sfr_dma_status_SFR_DMA_DONE_STATUS,
    },
    { /* 376 : INDEX_DX_M1A_DMA_SFR_DMA_STATUS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x60, DX_M1A_DMA_SFR_DMA_STATUS_RESERVED0_LEN, DX_M1A_DMA_SFR_DMA_STATUS_RESERVED0_MASK, DX_M1A_DMA_SFR_DMA_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.SFR_DMA_STATUS.RESERVED0", 
      Read_Dx_m1a_dma_Sfr_dma_status_RESERVED0,
      Write_Dx_m1a_dma_Sfr_dma_status_RESERVED0,
    },
    { /* 377 : INDEX_DX_M1A_DMA_DMA_CTRL */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.DMA_CTRL", 
      Read_Dx_m1a_dma_Dma_ctrl,
      Write_Dx_m1a_dma_Dma_ctrl,
    },
    { /* 378 : INDEX_DX_M1A_DMA_DMA_CTRL_DMA_CTRL_ENABLE */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x64, DX_M1A_DMA_DMA_CTRL_DMA_CTRL_ENABLE_LEN, DX_M1A_DMA_DMA_CTRL_DMA_CTRL_ENABLE_MASK, DX_M1A_DMA_DMA_CTRL_DMA_CTRL_ENABLE_OFFSET, 0x4, true, true, true, false,
      "DX_M1A_DMA.DMA_CTRL.DMA_CTRL_ENABLE", 
      Read_Dx_m1a_dma_Dma_ctrl_DMA_CTRL_ENABLE,
      Write_Dx_m1a_dma_Dma_ctrl_DMA_CTRL_ENABLE,
    },
    { /* 379 : INDEX_DX_M1A_DMA_DMA_CTRL_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x64, DX_M1A_DMA_DMA_CTRL_RESERVED0_LEN, DX_M1A_DMA_DMA_CTRL_RESERVED0_MASK, DX_M1A_DMA_DMA_CTRL_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.DMA_CTRL.RESERVED0", 
      Read_Dx_m1a_dma_Dma_ctrl_RESERVED0,
      Write_Dx_m1a_dma_Dma_ctrl_RESERVED0,
    },
    { /* 380 : INDEX_DX_M1A_DMA_FLUSH_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, false, true, true,
      "DX_M1A_DMA.FLUSH_STATUS", 
      Read_Dx_m1a_dma_Flush_status,
      Write_Dx_m1a_dma_Flush_status,
    },
    { /* 381 : INDEX_DX_M1A_DMA_FLUSH_STATUS_FLUSH_STATUS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x68, DX_M1A_DMA_FLUSH_STATUS_FLUSH_STATUS_LEN, DX_M1A_DMA_FLUSH_STATUS_FLUSH_STATUS_MASK, DX_M1A_DMA_FLUSH_STATUS_FLUSH_STATUS_OFFSET, 0x0, true, false, true, false,
      "DX_M1A_DMA.FLUSH_STATUS.FLUSH_STATUS", 
      Read_Dx_m1a_dma_Flush_status_FLUSH_STATUS,
      Write_Dx_m1a_dma_Flush_status_FLUSH_STATUS,
    },
    { /* 382 : INDEX_DX_M1A_DMA_FLUSH_STATUS_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x68, DX_M1A_DMA_FLUSH_STATUS_RESERVED0_LEN, DX_M1A_DMA_FLUSH_STATUS_RESERVED0_MASK, DX_M1A_DMA_FLUSH_STATUS_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.FLUSH_STATUS.RESERVED0", 
      Read_Dx_m1a_dma_Flush_status_RESERVED0,
      Write_Dx_m1a_dma_Flush_status_RESERVED0,
    },
    { /* 383 : INDEX_DX_M1A_DMA_AXI_CFG0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG0", 
      Read_Dx_m1a_dma_Axi_cfg0,
      Write_Dx_m1a_dma_Axi_cfg0,
    },
    { /* 384 : INDEX_DX_M1A_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x6c, DX_M1A_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH_LEN, DX_M1A_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH_MASK, DX_M1A_DMA_AXI_CFG0_AXI_RDMA_BURST_LENGTH_OFFSET, 0x10, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG0.AXI_RDMA_BURST_LENGTH", 
      Read_Dx_m1a_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH,
      Write_Dx_m1a_dma_Axi_cfg0_AXI_RDMA_BURST_LENGTH,
    },
    { /* 385 : INDEX_DX_M1A_DMA_AXI_CFG0_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x6c, DX_M1A_DMA_AXI_CFG0_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG0_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG0.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg0_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg0_RESERVED0,
    },
    { /* 386 : INDEX_DX_M1A_DMA_AXI_CFG1 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG1", 
      Read_Dx_m1a_dma_Axi_cfg1,
      Write_Dx_m1a_dma_Axi_cfg1,
    },
    { /* 387 : INDEX_DX_M1A_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x70, DX_M1A_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH_LEN, DX_M1A_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH_MASK, DX_M1A_DMA_AXI_CFG1_AXI_WDMA_BURST_LENGTH_OFFSET, 0x10, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG1.AXI_WDMA_BURST_LENGTH", 
      Read_Dx_m1a_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH,
      Write_Dx_m1a_dma_Axi_cfg1_AXI_WDMA_BURST_LENGTH,
    },
    { /* 388 : INDEX_DX_M1A_DMA_AXI_CFG1_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x70, DX_M1A_DMA_AXI_CFG1_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG1_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG1.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg1_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg1_RESERVED0,
    },
    { /* 389 : INDEX_DX_M1A_DMA_AXI_CFG2 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG2", 
      Read_Dx_m1a_dma_Axi_cfg2,
      Write_Dx_m1a_dma_Axi_cfg2,
    },
    { /* 390 : INDEX_DX_M1A_DMA_AXI_CFG2_AXI_RDMA_MO */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x74, DX_M1A_DMA_AXI_CFG2_AXI_RDMA_MO_LEN, DX_M1A_DMA_AXI_CFG2_AXI_RDMA_MO_MASK, DX_M1A_DMA_AXI_CFG2_AXI_RDMA_MO_OFFSET, 0xf, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG2.AXI_RDMA_MO", 
      Read_Dx_m1a_dma_Axi_cfg2_AXI_RDMA_MO,
      Write_Dx_m1a_dma_Axi_cfg2_AXI_RDMA_MO,
    },
    { /* 391 : INDEX_DX_M1A_DMA_AXI_CFG2_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x74, DX_M1A_DMA_AXI_CFG2_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG2_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG2_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG2.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg2_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg2_RESERVED0,
    },
    { /* 392 : INDEX_DX_M1A_DMA_AXI_CFG3 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG3", 
      Read_Dx_m1a_dma_Axi_cfg3,
      Write_Dx_m1a_dma_Axi_cfg3,
    },
    { /* 393 : INDEX_DX_M1A_DMA_AXI_CFG3_AXI_WDMA_MO */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x78, DX_M1A_DMA_AXI_CFG3_AXI_WDMA_MO_LEN, DX_M1A_DMA_AXI_CFG3_AXI_WDMA_MO_MASK, DX_M1A_DMA_AXI_CFG3_AXI_WDMA_MO_OFFSET, 0xf, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG3.AXI_WDMA_MO", 
      Read_Dx_m1a_dma_Axi_cfg3_AXI_WDMA_MO,
      Write_Dx_m1a_dma_Axi_cfg3_AXI_WDMA_MO,
    },
    { /* 394 : INDEX_DX_M1A_DMA_AXI_CFG3_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x78, DX_M1A_DMA_AXI_CFG3_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG3_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG3_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG3.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg3_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg3_RESERVED0,
    },
    { /* 395 : INDEX_DX_M1A_DMA_AXI_CFG4 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG4", 
      Read_Dx_m1a_dma_Axi_cfg4,
      Write_Dx_m1a_dma_Axi_cfg4,
    },
    { /* 396 : INDEX_DX_M1A_DMA_AXI_CFG4_AXI_4KB_BOUNDARY */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x7c, DX_M1A_DMA_AXI_CFG4_AXI_4KB_BOUNDARY_LEN, DX_M1A_DMA_AXI_CFG4_AXI_4KB_BOUNDARY_MASK, DX_M1A_DMA_AXI_CFG4_AXI_4KB_BOUNDARY_OFFSET, 0x1, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG4.AXI_4KB_BOUNDARY", 
      Read_Dx_m1a_dma_Axi_cfg4_AXI_4KB_BOUNDARY,
      Write_Dx_m1a_dma_Axi_cfg4_AXI_4KB_BOUNDARY,
    },
    { /* 397 : INDEX_DX_M1A_DMA_AXI_CFG4_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x7c, DX_M1A_DMA_AXI_CFG4_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG4_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG4_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG4.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg4_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg4_RESERVED0,
    },
    { /* 398 : INDEX_DX_M1A_DMA_AXI_CFG5 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x80, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG5", 
      Read_Dx_m1a_dma_Axi_cfg5,
      Write_Dx_m1a_dma_Axi_cfg5,
    },
    { /* 399 : INDEX_DX_M1A_DMA_AXI_CFG5_AXI_RDMA_QOS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x80, DX_M1A_DMA_AXI_CFG5_AXI_RDMA_QOS_LEN, DX_M1A_DMA_AXI_CFG5_AXI_RDMA_QOS_MASK, DX_M1A_DMA_AXI_CFG5_AXI_RDMA_QOS_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG5.AXI_RDMA_QOS", 
      Read_Dx_m1a_dma_Axi_cfg5_AXI_RDMA_QOS,
      Write_Dx_m1a_dma_Axi_cfg5_AXI_RDMA_QOS,
    },
    { /* 400 : INDEX_DX_M1A_DMA_AXI_CFG5_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x80, DX_M1A_DMA_AXI_CFG5_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG5_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG5_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG5.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg5_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg5_RESERVED0,
    },
    { /* 401 : INDEX_DX_M1A_DMA_AXI_CFG6 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x84, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.AXI_CFG6", 
      Read_Dx_m1a_dma_Axi_cfg6,
      Write_Dx_m1a_dma_Axi_cfg6,
    },
    { /* 402 : INDEX_DX_M1A_DMA_AXI_CFG6_AXI_WDMA_QOS */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x84, DX_M1A_DMA_AXI_CFG6_AXI_WDMA_QOS_LEN, DX_M1A_DMA_AXI_CFG6_AXI_WDMA_QOS_MASK, DX_M1A_DMA_AXI_CFG6_AXI_WDMA_QOS_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.AXI_CFG6.AXI_WDMA_QOS", 
      Read_Dx_m1a_dma_Axi_cfg6_AXI_WDMA_QOS,
      Write_Dx_m1a_dma_Axi_cfg6_AXI_WDMA_QOS,
    },
    { /* 403 : INDEX_DX_M1A_DMA_AXI_CFG6_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x84, DX_M1A_DMA_AXI_CFG6_RESERVED0_LEN, DX_M1A_DMA_AXI_CFG6_RESERVED0_MASK, DX_M1A_DMA_AXI_CFG6_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.AXI_CFG6.RESERVED0", 
      Read_Dx_m1a_dma_Axi_cfg6_RESERVED0,
      Write_Dx_m1a_dma_Axi_cfg6_RESERVED0,
    },
    { /* 404 : INDEX_DX_M1A_DMA_VIRT_RD_EN */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x88, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_DMA.VIRT_RD_EN", 
      Read_Dx_m1a_dma_Virt_rd_en,
      Write_Dx_m1a_dma_Virt_rd_en,
    },
    { /* 405 : INDEX_DX_M1A_DMA_VIRT_RD_EN_VIRTUAL_READ_EN */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x88, DX_M1A_DMA_VIRT_RD_EN_VIRTUAL_READ_EN_LEN, DX_M1A_DMA_VIRT_RD_EN_VIRTUAL_READ_EN_MASK, DX_M1A_DMA_VIRT_RD_EN_VIRTUAL_READ_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.VIRT_RD_EN.VIRTUAL_READ_EN", 
      Read_Dx_m1a_dma_Virt_rd_en_VIRTUAL_READ_EN,
      Write_Dx_m1a_dma_Virt_rd_en_VIRTUAL_READ_EN,
    },
    { /* 406 : INDEX_DX_M1A_DMA_VIRT_RD_EN_RESERVED0 */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x88, DX_M1A_DMA_VIRT_RD_EN_RESERVED0_LEN, DX_M1A_DMA_VIRT_RD_EN_RESERVED0_MASK, DX_M1A_DMA_VIRT_RD_EN_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_DMA.VIRT_RD_EN.RESERVED0", 
      Read_Dx_m1a_dma_Virt_rd_en_RESERVED0,
      Write_Dx_m1a_dma_Virt_rd_en_RESERVED0,
    },
    { /* 407 : INDEX_DX_M1A_DMA_VIRT_RD_PTRN */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x8c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_DMA.VIRT_RD_PTRN", 
      Read_Dx_m1a_dma_Virt_rd_ptrn,
      Write_Dx_m1a_dma_Virt_rd_ptrn,
    },
    { /* 408 : INDEX_DX_M1A_DMA_VIRT_RD_PTRN_VIRTUAL_READ_PATTERN */
      DXRT_NPU_REG_DMA, REG_DX_M1A_DMA_OFFSET, REG_DX_M1A_DMA_OFFSET + 0x8c, DX_M1A_DMA_VIRT_RD_PTRN_VIRTUAL_READ_PATTERN_LEN, DX_M1A_DMA_VIRT_RD_PTRN_VIRTUAL_READ_PATTERN_MASK, DX_M1A_DMA_VIRT_RD_PTRN_VIRTUAL_READ_PATTERN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_DMA.VIRT_RD_PTRN.VIRTUAL_READ_PATTERN", 
      Read_Dx_m1a_dma_Virt_rd_ptrn_VIRTUAL_READ_PATTERN,
      Write_Dx_m1a_dma_Virt_rd_ptrn_VIRTUAL_READ_PATTERN,
    },
    { /* 409 : INDEX_DX_M1A_NPU0_DATA_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.DATA_CFG0", 
      Read_Dx_m1a_npu0_Data_cfg0,
      Write_Dx_m1a_npu0_Data_cfg0,
    },
    { /* 410 : INDEX_DX_M1A_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x0, DX_M1A_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH_LEN, DX_M1A_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH_MASK, DX_M1A_NPU0_DATA_CFG0_FEATURE_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.DATA_CFG0.FEATURE_BIT_WIDTH", 
      Read_Dx_m1a_npu0_Data_cfg0_FEATURE_BIT_WIDTH,
      Write_Dx_m1a_npu0_Data_cfg0_FEATURE_BIT_WIDTH,
    },
    { /* 411 : INDEX_DX_M1A_NPU0_DATA_CFG0_W_FEATURE_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x0, DX_M1A_NPU0_DATA_CFG0_W_FEATURE_BIT_WIDTH_LEN, DX_M1A_NPU0_DATA_CFG0_W_FEATURE_BIT_WIDTH_MASK, DX_M1A_NPU0_DATA_CFG0_W_FEATURE_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.DATA_CFG0.W_FEATURE_BIT_WIDTH", 
      Read_Dx_m1a_npu0_Data_cfg0_W_FEATURE_BIT_WIDTH,
      Write_Dx_m1a_npu0_Data_cfg0_W_FEATURE_BIT_WIDTH,
    },
    { /* 412 : INDEX_DX_M1A_NPU0_DATA_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x0, DX_M1A_NPU0_DATA_CFG0_RESERVED0_LEN, DX_M1A_NPU0_DATA_CFG0_RESERVED0_MASK, DX_M1A_NPU0_DATA_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.DATA_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Data_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Data_cfg0_RESERVED0,
    },
    { /* 413 : INDEX_DX_M1A_NPU0_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.CTRL", 
      Read_Dx_m1a_npu0_Ctrl,
      Write_Dx_m1a_npu0_Ctrl,
    },
    { /* 414 : INDEX_DX_M1A_NPU0_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_RESERVED0_LEN, DX_M1A_NPU0_CTRL_RESERVED0_MASK, DX_M1A_NPU0_CTRL_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.CTRL.RESERVED0", 
      Read_Dx_m1a_npu0_Ctrl_RESERVED0,
      Write_Dx_m1a_npu0_Ctrl_RESERVED0,
    },
    { /* 415 : INDEX_DX_M1A_NPU0_CTRL_RESIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_RESIZE_LEN, DX_M1A_NPU0_CTRL_RESIZE_MASK, DX_M1A_NPU0_CTRL_RESIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.RESIZE", 
      Read_Dx_m1a_npu0_Ctrl_RESIZE,
      Write_Dx_m1a_npu0_Ctrl_RESIZE,
    },
    { /* 416 : INDEX_DX_M1A_NPU0_CTRL_WRITE_POOL_ONLY */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_WRITE_POOL_ONLY_LEN, DX_M1A_NPU0_CTRL_WRITE_POOL_ONLY_MASK, DX_M1A_NPU0_CTRL_WRITE_POOL_ONLY_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.WRITE_POOL_ONLY", 
      Read_Dx_m1a_npu0_Ctrl_WRITE_POOL_ONLY,
      Write_Dx_m1a_npu0_Ctrl_WRITE_POOL_ONLY,
    },
    { /* 417 : INDEX_DX_M1A_NPU0_CTRL_WEIGHT_BROADCAST_MODE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_WEIGHT_BROADCAST_MODE_EN_LEN, DX_M1A_NPU0_CTRL_WEIGHT_BROADCAST_MODE_EN_MASK, DX_M1A_NPU0_CTRL_WEIGHT_BROADCAST_MODE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.WEIGHT_BROADCAST_MODE_EN", 
      Read_Dx_m1a_npu0_Ctrl_WEIGHT_BROADCAST_MODE_EN,
      Write_Dx_m1a_npu0_Ctrl_WEIGHT_BROADCAST_MODE_EN,
    },
    { /* 418 : INDEX_DX_M1A_NPU0_CTRL_FEATURE_BROADCAST_MODE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_FEATURE_BROADCAST_MODE_EN_LEN, DX_M1A_NPU0_CTRL_FEATURE_BROADCAST_MODE_EN_MASK, DX_M1A_NPU0_CTRL_FEATURE_BROADCAST_MODE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.FEATURE_BROADCAST_MODE_EN", 
      Read_Dx_m1a_npu0_Ctrl_FEATURE_BROADCAST_MODE_EN,
      Write_Dx_m1a_npu0_Ctrl_FEATURE_BROADCAST_MODE_EN,
    },
    { /* 419 : INDEX_DX_M1A_NPU0_CTRL_ACTIVE_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_ACTIVE_CNT_LEN, DX_M1A_NPU0_CTRL_ACTIVE_CNT_MASK, DX_M1A_NPU0_CTRL_ACTIVE_CNT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.ACTIVE_CNT", 
      Read_Dx_m1a_npu0_Ctrl_ACTIVE_CNT,
      Write_Dx_m1a_npu0_Ctrl_ACTIVE_CNT,
    },
    { /* 420 : INDEX_DX_M1A_NPU0_CTRL_ACTIVE_PERIOD */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_ACTIVE_PERIOD_LEN, DX_M1A_NPU0_CTRL_ACTIVE_PERIOD_MASK, DX_M1A_NPU0_CTRL_ACTIVE_PERIOD_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.ACTIVE_PERIOD", 
      Read_Dx_m1a_npu0_Ctrl_ACTIVE_PERIOD,
      Write_Dx_m1a_npu0_Ctrl_ACTIVE_PERIOD,
    },
    { /* 421 : INDEX_DX_M1A_NPU0_CTRL_FEATURE_DATA_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_FEATURE_DATA_TYPE_LEN, DX_M1A_NPU0_CTRL_FEATURE_DATA_TYPE_MASK, DX_M1A_NPU0_CTRL_FEATURE_DATA_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.FEATURE_DATA_TYPE", 
      Read_Dx_m1a_npu0_Ctrl_FEATURE_DATA_TYPE,
      Write_Dx_m1a_npu0_Ctrl_FEATURE_DATA_TYPE,
    },
    { /* 422 : INDEX_DX_M1A_NPU0_CTRL_INPUT_DONE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, DX_M1A_NPU0_CTRL_INPUT_DONE_LEN, DX_M1A_NPU0_CTRL_INPUT_DONE_MASK, DX_M1A_NPU0_CTRL_INPUT_DONE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CTRL.INPUT_DONE", 
      Read_Dx_m1a_npu0_Ctrl_INPUT_DONE,
      Write_Dx_m1a_npu0_Ctrl_INPUT_DONE,
    },
    { /* 423 : INDEX_DX_M1A_NPU0_MISC */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.MISC", 
      Read_Dx_m1a_npu0_Misc,
      Write_Dx_m1a_npu0_Misc,
    },
    { /* 424 : INDEX_DX_M1A_NPU0_MISC_TILE_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8, DX_M1A_NPU0_MISC_TILE_NUM_LEN, DX_M1A_NPU0_MISC_TILE_NUM_MASK, DX_M1A_NPU0_MISC_TILE_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.MISC.TILE_NUM", 
      Read_Dx_m1a_npu0_Misc_TILE_NUM,
      Write_Dx_m1a_npu0_Misc_TILE_NUM,
    },
    { /* 425 : INDEX_DX_M1A_NPU0_MISC_LAYER_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8, DX_M1A_NPU0_MISC_LAYER_NUM_LEN, DX_M1A_NPU0_MISC_LAYER_NUM_MASK, DX_M1A_NPU0_MISC_LAYER_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.MISC.LAYER_NUM", 
      Read_Dx_m1a_npu0_Misc_LAYER_NUM,
      Write_Dx_m1a_npu0_Misc_LAYER_NUM,
    },
    { /* 426 : INDEX_DX_M1A_NPU0_PSEUDO */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc, 32, 0xffffffff, 0x0, -1, true, true, false, true,
      "DX_M1A_NPU0.PSEUDO", 
      Read_Dx_m1a_npu0_Pseudo,
      Write_Dx_m1a_npu0_Pseudo,
    },
    { /* 427 : INDEX_DX_M1A_NPU0_PSEUDO_PSEUDO_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc, DX_M1A_NPU0_PSEUDO_PSEUDO_CNT_LEN, DX_M1A_NPU0_PSEUDO_PSEUDO_CNT_MASK, DX_M1A_NPU0_PSEUDO_PSEUDO_CNT_OFFSET, 0x0, true, true, false, false,
      "DX_M1A_NPU0.PSEUDO.PSEUDO_CNT", 
      Read_Dx_m1a_npu0_Pseudo_PSEUDO_CNT,
      Write_Dx_m1a_npu0_Pseudo_PSEUDO_CNT,
    },
    { /* 428 : INDEX_DX_M1A_NPU0_TRP0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.TRP0", 
      Read_Dx_m1a_npu0_Trp0,
      Write_Dx_m1a_npu0_Trp0,
    },
    { /* 429 : INDEX_DX_M1A_NPU0_TRP0_TRP_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10, DX_M1A_NPU0_TRP0_TRP_SURFACE_STRIDE_LEN, DX_M1A_NPU0_TRP0_TRP_SURFACE_STRIDE_MASK, DX_M1A_NPU0_TRP0_TRP_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP0.TRP_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Trp0_TRP_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Trp0_TRP_SURFACE_STRIDE,
    },
    { /* 430 : INDEX_DX_M1A_NPU0_TRP0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10, DX_M1A_NPU0_TRP0_RESERVED0_LEN, DX_M1A_NPU0_TRP0_RESERVED0_MASK, DX_M1A_NPU0_TRP0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.TRP0.RESERVED0", 
      Read_Dx_m1a_npu0_Trp0_RESERVED0,
      Write_Dx_m1a_npu0_Trp0_RESERVED0,
    },
    { /* 431 : INDEX_DX_M1A_NPU0_TRP0_TRP_32BIT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10, DX_M1A_NPU0_TRP0_TRP_32BIT_MODE_LEN, DX_M1A_NPU0_TRP0_TRP_32BIT_MODE_MASK, DX_M1A_NPU0_TRP0_TRP_32BIT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP0.TRP_32BIT_MODE", 
      Read_Dx_m1a_npu0_Trp0_TRP_32BIT_MODE,
      Write_Dx_m1a_npu0_Trp0_TRP_32BIT_MODE,
    },
    { /* 432 : INDEX_DX_M1A_NPU0_TRP0_TRP_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10, DX_M1A_NPU0_TRP0_TRP_EN_LEN, DX_M1A_NPU0_TRP0_TRP_EN_MASK, DX_M1A_NPU0_TRP0_TRP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP0.TRP_EN", 
      Read_Dx_m1a_npu0_Trp0_TRP_EN,
      Write_Dx_m1a_npu0_Trp0_TRP_EN,
    },
    { /* 433 : INDEX_DX_M1A_NPU0_TRP1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.TRP1", 
      Read_Dx_m1a_npu0_Trp1,
      Write_Dx_m1a_npu0_Trp1,
    },
    { /* 434 : INDEX_DX_M1A_NPU0_TRP1_TRP_TOTAL_WSIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14, DX_M1A_NPU0_TRP1_TRP_TOTAL_WSIZE_LEN, DX_M1A_NPU0_TRP1_TRP_TOTAL_WSIZE_MASK, DX_M1A_NPU0_TRP1_TRP_TOTAL_WSIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP1.TRP_TOTAL_WSIZE", 
      Read_Dx_m1a_npu0_Trp1_TRP_TOTAL_WSIZE,
      Write_Dx_m1a_npu0_Trp1_TRP_TOTAL_WSIZE,
    },
    { /* 435 : INDEX_DX_M1A_NPU0_TRP1_TRP_IN_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14, DX_M1A_NPU0_TRP1_TRP_IN_SIZE_LEN, DX_M1A_NPU0_TRP1_TRP_IN_SIZE_MASK, DX_M1A_NPU0_TRP1_TRP_IN_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP1.TRP_IN_SIZE", 
      Read_Dx_m1a_npu0_Trp1_TRP_IN_SIZE,
      Write_Dx_m1a_npu0_Trp1_TRP_IN_SIZE,
    },
    { /* 436 : INDEX_DX_M1A_NPU0_TRP2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.TRP2", 
      Read_Dx_m1a_npu0_Trp2,
      Write_Dx_m1a_npu0_Trp2,
    },
    { /* 437 : INDEX_DX_M1A_NPU0_TRP2_TRP_ADDR_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18, DX_M1A_NPU0_TRP2_TRP_ADDR_STRIDE_LEN, DX_M1A_NPU0_TRP2_TRP_ADDR_STRIDE_MASK, DX_M1A_NPU0_TRP2_TRP_ADDR_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP2.TRP_ADDR_STRIDE", 
      Read_Dx_m1a_npu0_Trp2_TRP_ADDR_STRIDE,
      Write_Dx_m1a_npu0_Trp2_TRP_ADDR_STRIDE,
    },
    { /* 438 : INDEX_DX_M1A_NPU0_TRP2_TRP_ITER */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18, DX_M1A_NPU0_TRP2_TRP_ITER_LEN, DX_M1A_NPU0_TRP2_TRP_ITER_MASK, DX_M1A_NPU0_TRP2_TRP_ITER_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP2.TRP_ITER", 
      Read_Dx_m1a_npu0_Trp2_TRP_ITER,
      Write_Dx_m1a_npu0_Trp2_TRP_ITER,
    },
    { /* 439 : INDEX_DX_M1A_NPU0_TRP2_TRP_LAST_WSIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18, DX_M1A_NPU0_TRP2_TRP_LAST_WSIZE_LEN, DX_M1A_NPU0_TRP2_TRP_LAST_WSIZE_MASK, DX_M1A_NPU0_TRP2_TRP_LAST_WSIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP2.TRP_LAST_WSIZE", 
      Read_Dx_m1a_npu0_Trp2_TRP_LAST_WSIZE,
      Write_Dx_m1a_npu0_Trp2_TRP_LAST_WSIZE,
    },
    { /* 440 : INDEX_DX_M1A_NPU0_TRP3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.TRP3", 
      Read_Dx_m1a_npu0_Trp3,
      Write_Dx_m1a_npu0_Trp3,
    },
    { /* 441 : INDEX_DX_M1A_NPU0_TRP3_TRP_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c, DX_M1A_NPU0_TRP3_TRP_READ_BASE_ADDR_LEN, DX_M1A_NPU0_TRP3_TRP_READ_BASE_ADDR_MASK, DX_M1A_NPU0_TRP3_TRP_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP3.TRP_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Trp3_TRP_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Trp3_TRP_READ_BASE_ADDR,
    },
    { /* 442 : INDEX_DX_M1A_NPU0_TRP4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.TRP4", 
      Read_Dx_m1a_npu0_Trp4,
      Write_Dx_m1a_npu0_Trp4,
    },
    { /* 443 : INDEX_DX_M1A_NPU0_TRP4_TRP_WRITE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20, DX_M1A_NPU0_TRP4_TRP_WRITE_BASE_ADDR_LEN, DX_M1A_NPU0_TRP4_TRP_WRITE_BASE_ADDR_MASK, DX_M1A_NPU0_TRP4_TRP_WRITE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP4.TRP_WRITE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Trp4_TRP_WRITE_BASE_ADDR,
      Write_Dx_m1a_npu0_Trp4_TRP_WRITE_BASE_ADDR,
    },
    { /* 444 : INDEX_DX_M1A_NPU0_ARG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.ARG0", 
      Read_Dx_m1a_npu0_Arg0,
      Write_Dx_m1a_npu0_Arg0,
    },
    { /* 445 : INDEX_DX_M1A_NPU0_ARG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24, DX_M1A_NPU0_ARG0_RESERVED0_LEN, DX_M1A_NPU0_ARG0_RESERVED0_MASK, DX_M1A_NPU0_ARG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.ARG0.RESERVED0", 
      Read_Dx_m1a_npu0_Arg0_RESERVED0,
      Write_Dx_m1a_npu0_Arg0_RESERVED0,
    },
    { /* 446 : INDEX_DX_M1A_NPU0_ARG0_ARG_MAX_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24, DX_M1A_NPU0_ARG0_ARG_MAX_MODE_LEN, DX_M1A_NPU0_ARG0_ARG_MAX_MODE_MASK, DX_M1A_NPU0_ARG0_ARG_MAX_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.ARG0.ARG_MAX_MODE", 
      Read_Dx_m1a_npu0_Arg0_ARG_MAX_MODE,
      Write_Dx_m1a_npu0_Arg0_ARG_MAX_MODE,
    },
    { /* 447 : INDEX_DX_M1A_NPU0_ARG0_ARG_CLASS_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24, DX_M1A_NPU0_ARG0_ARG_CLASS_NUM_LEN, DX_M1A_NPU0_ARG0_ARG_CLASS_NUM_MASK, DX_M1A_NPU0_ARG0_ARG_CLASS_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.ARG0.ARG_CLASS_NUM", 
      Read_Dx_m1a_npu0_Arg0_ARG_CLASS_NUM,
      Write_Dx_m1a_npu0_Arg0_ARG_CLASS_NUM,
    },
    { /* 448 : INDEX_DX_M1A_NPU0_ARG0_ARG_MAX_OUT_FORMAT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24, DX_M1A_NPU0_ARG0_ARG_MAX_OUT_FORMAT_LEN, DX_M1A_NPU0_ARG0_ARG_MAX_OUT_FORMAT_MASK, DX_M1A_NPU0_ARG0_ARG_MAX_OUT_FORMAT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.ARG0.ARG_MAX_OUT_FORMAT", 
      Read_Dx_m1a_npu0_Arg0_ARG_MAX_OUT_FORMAT,
      Write_Dx_m1a_npu0_Arg0_ARG_MAX_OUT_FORMAT,
    },
    { /* 449 : INDEX_DX_M1A_NPU0_POOL0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.POOL0", 
      Read_Dx_m1a_npu0_Pool0,
      Write_Dx_m1a_npu0_Pool0,
    },
    { /* 450 : INDEX_DX_M1A_NPU0_POOL0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28, DX_M1A_NPU0_POOL0_RESERVED0_LEN, DX_M1A_NPU0_POOL0_RESERVED0_MASK, DX_M1A_NPU0_POOL0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.POOL0.RESERVED0", 
      Read_Dx_m1a_npu0_Pool0_RESERVED0,
      Write_Dx_m1a_npu0_Pool0_RESERVED0,
    },
    { /* 451 : INDEX_DX_M1A_NPU0_POOL0_POOL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28, DX_M1A_NPU0_POOL0_POOL_MODE_LEN, DX_M1A_NPU0_POOL0_POOL_MODE_MASK, DX_M1A_NPU0_POOL0_POOL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.POOL0.POOL_MODE", 
      Read_Dx_m1a_npu0_Pool0_POOL_MODE,
      Write_Dx_m1a_npu0_Pool0_POOL_MODE,
    },
    { /* 452 : INDEX_DX_M1A_NPU0_POOL1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.POOL1", 
      Read_Dx_m1a_npu0_Pool1,
      Write_Dx_m1a_npu0_Pool1,
    },
    { /* 453 : INDEX_DX_M1A_NPU0_POOL1_POOL_WINSIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c, DX_M1A_NPU0_POOL1_POOL_WINSIZE_LEN, DX_M1A_NPU0_POOL1_POOL_WINSIZE_MASK, DX_M1A_NPU0_POOL1_POOL_WINSIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.POOL1.POOL_WINSIZE", 
      Read_Dx_m1a_npu0_Pool1_POOL_WINSIZE,
      Write_Dx_m1a_npu0_Pool1_POOL_WINSIZE,
    },
    { /* 454 : INDEX_DX_M1A_NPU0_POOL2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x30, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.POOL2", 
      Read_Dx_m1a_npu0_Pool2,
      Write_Dx_m1a_npu0_Pool2,
    },
    { /* 455 : INDEX_DX_M1A_NPU0_POOL2_AVG_POOL_MULT_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x30, DX_M1A_NPU0_POOL2_AVG_POOL_MULT_COEFF_LEN, DX_M1A_NPU0_POOL2_AVG_POOL_MULT_COEFF_MASK, DX_M1A_NPU0_POOL2_AVG_POOL_MULT_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.POOL2.AVG_POOL_MULT_COEFF", 
      Read_Dx_m1a_npu0_Pool2_AVG_POOL_MULT_COEFF,
      Write_Dx_m1a_npu0_Pool2_AVG_POOL_MULT_COEFF,
    },
    { /* 456 : INDEX_DX_M1A_NPU0_SFU_CTRL0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.SFU_CTRL0", 
      Read_Dx_m1a_npu0_Sfu_ctrl0,
      Write_Dx_m1a_npu0_Sfu_ctrl0,
    },
    { /* 457 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SFU_HALF_RUN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SFU_HALF_RUN_MODE_LEN, DX_M1A_NPU0_SFU_CTRL0_SFU_HALF_RUN_MODE_MASK, DX_M1A_NPU0_SFU_CTRL0_SFU_HALF_RUN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SFU_HALF_RUN_MODE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SFU_HALF_RUN_MODE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SFU_HALF_RUN_MODE,
    },
    { /* 458 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SKIP_ADD_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SKIP_ADD_SEL_LEN, DX_M1A_NPU0_SFU_CTRL0_SKIP_ADD_SEL_MASK, DX_M1A_NPU0_SFU_CTRL0_SKIP_ADD_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SKIP_ADD_SEL", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SKIP_ADD_SEL,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SKIP_ADD_SEL,
    },
    { /* 459 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SKIP_MUL_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SKIP_MUL_SEL_LEN, DX_M1A_NPU0_SFU_CTRL0_SKIP_MUL_SEL_MASK, DX_M1A_NPU0_SFU_CTRL0_SKIP_MUL_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SKIP_MUL_SEL", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SKIP_MUL_SEL,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SKIP_MUL_SEL,
    },
    { /* 460 : INDEX_DX_M1A_NPU0_SFU_CTRL0_FLOAT2INT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_FLOAT2INT_MODE_LEN, DX_M1A_NPU0_SFU_CTRL0_FLOAT2INT_MODE_MASK, DX_M1A_NPU0_SFU_CTRL0_FLOAT2INT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.FLOAT2INT_MODE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_FLOAT2INT_MODE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_FLOAT2INT_MODE,
    },
    { /* 461 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SKIP_IN_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SKIP_IN_TYPE_LEN, DX_M1A_NPU0_SFU_CTRL0_SKIP_IN_TYPE_MASK, DX_M1A_NPU0_SFU_CTRL0_SKIP_IN_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SKIP_IN_TYPE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SKIP_IN_TYPE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SKIP_IN_TYPE,
    },
    { /* 462 : INDEX_DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_POW_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_POW_EN_LEN, DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_POW_EN_MASK, DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_POW_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_POW_EN", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_POW_EN,
      Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_POW_EN,
    },
    { /* 463 : INDEX_DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_MODE_LEN, DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_MODE_MASK, DX_M1A_NPU0_SFU_CTRL0_PRE_ACT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.PRE_ACT_MODE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_MODE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_ACT_MODE,
    },
    { /* 464 : INDEX_DX_M1A_NPU0_SFU_CTRL0_PRE_MULT_COEFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_PRE_MULT_COEFF_SEL_LEN, DX_M1A_NPU0_SFU_CTRL0_PRE_MULT_COEFF_SEL_MASK, DX_M1A_NPU0_SFU_CTRL0_PRE_MULT_COEFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.PRE_MULT_COEFF_SEL", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_MULT_COEFF_SEL,
      Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_MULT_COEFF_SEL,
    },
    { /* 465 : INDEX_DX_M1A_NPU0_SFU_CTRL0_ACT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_ACT_MODE_LEN, DX_M1A_NPU0_SFU_CTRL0_ACT_MODE_MASK, DX_M1A_NPU0_SFU_CTRL0_ACT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.ACT_MODE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_ACT_MODE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_ACT_MODE,
    },
    { /* 466 : INDEX_DX_M1A_NPU0_SFU_CTRL0_ACT_INOUT_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_ACT_INOUT_CTRL_LEN, DX_M1A_NPU0_SFU_CTRL0_ACT_INOUT_CTRL_MASK, DX_M1A_NPU0_SFU_CTRL0_ACT_INOUT_CTRL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.ACT_INOUT_CTRL", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_ACT_INOUT_CTRL,
      Write_Dx_m1a_npu0_Sfu_ctrl0_ACT_INOUT_CTRL,
    },
    { /* 467 : INDEX_DX_M1A_NPU0_SFU_CTRL0_POST_ACT_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_POST_ACT_MODE_LEN, DX_M1A_NPU0_SFU_CTRL0_POST_ACT_MODE_MASK, DX_M1A_NPU0_SFU_CTRL0_POST_ACT_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.POST_ACT_MODE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_POST_ACT_MODE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_POST_ACT_MODE,
    },
    { /* 468 : INDEX_DX_M1A_NPU0_SFU_CTRL0_PRE_ADD_COEFF_SEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_PRE_ADD_COEFF_SEL_LEN, DX_M1A_NPU0_SFU_CTRL0_PRE_ADD_COEFF_SEL_MASK, DX_M1A_NPU0_SFU_CTRL0_PRE_ADD_COEFF_SEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.PRE_ADD_COEFF_SEL", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_PRE_ADD_COEFF_SEL,
      Write_Dx_m1a_npu0_Sfu_ctrl0_PRE_ADD_COEFF_SEL,
    },
    { /* 469 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SE_EN_LEN, DX_M1A_NPU0_SFU_CTRL0_SE_EN_MASK, DX_M1A_NPU0_SFU_CTRL0_SE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SE_EN", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SE_EN,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SE_EN,
    },
    { /* 470 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SE_WRITE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SE_WRITE_LEN, DX_M1A_NPU0_SFU_CTRL0_SE_WRITE_MASK, DX_M1A_NPU0_SFU_CTRL0_SE_WRITE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SE_WRITE", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SE_WRITE,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SE_WRITE,
    },
    { /* 471 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_NUM_LEN, DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_NUM_MASK, DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_NUM", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_NUM,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_NUM,
    },
    { /* 472 : INDEX_DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_EN_LEN, DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_EN_MASK, DX_M1A_NPU0_SFU_CTRL0_SFU_OUT_MERGE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_CTRL0.SFU_OUT_MERGE_EN", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_EN,
      Write_Dx_m1a_npu0_Sfu_ctrl0_SFU_OUT_MERGE_EN,
    },
    { /* 473 : INDEX_DX_M1A_NPU0_SFU_CTRL0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, DX_M1A_NPU0_SFU_CTRL0_RESERVED0_LEN, DX_M1A_NPU0_SFU_CTRL0_RESERVED0_MASK, DX_M1A_NPU0_SFU_CTRL0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.SFU_CTRL0.RESERVED0", 
      Read_Dx_m1a_npu0_Sfu_ctrl0_RESERVED0,
      Write_Dx_m1a_npu0_Sfu_ctrl0_RESERVED0,
    },
    { /* 474 : INDEX_DX_M1A_NPU0_SFU_COEFF0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x38, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF0", 
      Read_Dx_m1a_npu0_Sfu_coeff0,
      Write_Dx_m1a_npu0_Sfu_coeff0,
    },
    { /* 475 : INDEX_DX_M1A_NPU0_SFU_COEFF0_CLIP_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x38, DX_M1A_NPU0_SFU_COEFF0_CLIP_MAX_LEN, DX_M1A_NPU0_SFU_COEFF0_CLIP_MAX_MASK, DX_M1A_NPU0_SFU_COEFF0_CLIP_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF0.CLIP_MAX", 
      Read_Dx_m1a_npu0_Sfu_coeff0_CLIP_MAX,
      Write_Dx_m1a_npu0_Sfu_coeff0_CLIP_MAX,
    },
    { /* 476 : INDEX_DX_M1A_NPU0_SFU_COEFF1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF1", 
      Read_Dx_m1a_npu0_Sfu_coeff1,
      Write_Dx_m1a_npu0_Sfu_coeff1,
    },
    { /* 477 : INDEX_DX_M1A_NPU0_SFU_COEFF1_CLIP_MIN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3c, DX_M1A_NPU0_SFU_COEFF1_CLIP_MIN_LEN, DX_M1A_NPU0_SFU_COEFF1_CLIP_MIN_MASK, DX_M1A_NPU0_SFU_COEFF1_CLIP_MIN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF1.CLIP_MIN", 
      Read_Dx_m1a_npu0_Sfu_coeff1_CLIP_MIN,
      Write_Dx_m1a_npu0_Sfu_coeff1_CLIP_MIN,
    },
    { /* 478 : INDEX_DX_M1A_NPU0_SFU_COEFF2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x40, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF2", 
      Read_Dx_m1a_npu0_Sfu_coeff2,
      Write_Dx_m1a_npu0_Sfu_coeff2,
    },
    { /* 479 : INDEX_DX_M1A_NPU0_SFU_COEFF2_SKIP_ADD_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x40, DX_M1A_NPU0_SFU_COEFF2_SKIP_ADD_COEFF_LEN, DX_M1A_NPU0_SFU_COEFF2_SKIP_ADD_COEFF_MASK, DX_M1A_NPU0_SFU_COEFF2_SKIP_ADD_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF2.SKIP_ADD_COEFF", 
      Read_Dx_m1a_npu0_Sfu_coeff2_SKIP_ADD_COEFF,
      Write_Dx_m1a_npu0_Sfu_coeff2_SKIP_ADD_COEFF,
    },
    { /* 480 : INDEX_DX_M1A_NPU0_SFU_COEFF3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x44, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF3", 
      Read_Dx_m1a_npu0_Sfu_coeff3,
      Write_Dx_m1a_npu0_Sfu_coeff3,
    },
    { /* 481 : INDEX_DX_M1A_NPU0_SFU_COEFF3_PRE_ACT_MULT_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x44, DX_M1A_NPU0_SFU_COEFF3_PRE_ACT_MULT_COEFF_LEN, DX_M1A_NPU0_SFU_COEFF3_PRE_ACT_MULT_COEFF_MASK, DX_M1A_NPU0_SFU_COEFF3_PRE_ACT_MULT_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF3.PRE_ACT_MULT_COEFF", 
      Read_Dx_m1a_npu0_Sfu_coeff3_PRE_ACT_MULT_COEFF,
      Write_Dx_m1a_npu0_Sfu_coeff3_PRE_ACT_MULT_COEFF,
    },
    { /* 482 : INDEX_DX_M1A_NPU0_SFU_COEFF4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x48, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF4", 
      Read_Dx_m1a_npu0_Sfu_coeff4,
      Write_Dx_m1a_npu0_Sfu_coeff4,
    },
    { /* 483 : INDEX_DX_M1A_NPU0_SFU_COEFF4_PRE_ACT_ADD_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x48, DX_M1A_NPU0_SFU_COEFF4_PRE_ACT_ADD_COEFF_LEN, DX_M1A_NPU0_SFU_COEFF4_PRE_ACT_ADD_COEFF_MASK, DX_M1A_NPU0_SFU_COEFF4_PRE_ACT_ADD_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF4.PRE_ACT_ADD_COEFF", 
      Read_Dx_m1a_npu0_Sfu_coeff4_PRE_ACT_ADD_COEFF,
      Write_Dx_m1a_npu0_Sfu_coeff4_PRE_ACT_ADD_COEFF,
    },
    { /* 484 : INDEX_DX_M1A_NPU0_SFU_COEFF5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF5", 
      Read_Dx_m1a_npu0_Sfu_coeff5,
      Write_Dx_m1a_npu0_Sfu_coeff5,
    },
    { /* 485 : INDEX_DX_M1A_NPU0_SFU_COEFF5_LMUL_ADD_COEFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4c, DX_M1A_NPU0_SFU_COEFF5_LMUL_ADD_COEFF_LEN, DX_M1A_NPU0_SFU_COEFF5_LMUL_ADD_COEFF_MASK, DX_M1A_NPU0_SFU_COEFF5_LMUL_ADD_COEFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF5.LMUL_ADD_COEFF", 
      Read_Dx_m1a_npu0_Sfu_coeff5_LMUL_ADD_COEFF,
      Write_Dx_m1a_npu0_Sfu_coeff5_LMUL_ADD_COEFF,
    },
    { /* 486 : INDEX_DX_M1A_NPU0_SFU_COEFF6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x50, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF6", 
      Read_Dx_m1a_npu0_Sfu_coeff6,
      Write_Dx_m1a_npu0_Sfu_coeff6,
    },
    { /* 487 : INDEX_DX_M1A_NPU0_SFU_COEFF6_ACT_OFFSET_VAL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x50, DX_M1A_NPU0_SFU_COEFF6_ACT_OFFSET_VAL_LEN, DX_M1A_NPU0_SFU_COEFF6_ACT_OFFSET_VAL_MASK, DX_M1A_NPU0_SFU_COEFF6_ACT_OFFSET_VAL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF6.ACT_OFFSET_VAL", 
      Read_Dx_m1a_npu0_Sfu_coeff6_ACT_OFFSET_VAL,
      Write_Dx_m1a_npu0_Sfu_coeff6_ACT_OFFSET_VAL,
    },
    { /* 488 : INDEX_DX_M1A_NPU0_SFU_COEFF7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x54, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF7", 
      Read_Dx_m1a_npu0_Sfu_coeff7,
      Write_Dx_m1a_npu0_Sfu_coeff7,
    },
    { /* 489 : INDEX_DX_M1A_NPU0_SFU_COEFF7_SKIP_SCALE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x54, DX_M1A_NPU0_SFU_COEFF7_SKIP_SCALE_LEN, DX_M1A_NPU0_SFU_COEFF7_SKIP_SCALE_MASK, DX_M1A_NPU0_SFU_COEFF7_SKIP_SCALE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF7.SKIP_SCALE", 
      Read_Dx_m1a_npu0_Sfu_coeff7_SKIP_SCALE,
      Write_Dx_m1a_npu0_Sfu_coeff7_SKIP_SCALE,
    },
    { /* 490 : INDEX_DX_M1A_NPU0_SFU_COEFF8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x58, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF8", 
      Read_Dx_m1a_npu0_Sfu_coeff8,
      Write_Dx_m1a_npu0_Sfu_coeff8,
    },
    { /* 491 : INDEX_DX_M1A_NPU0_SFU_COEFF8_LEAKY_RELU_SLOPE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x58, DX_M1A_NPU0_SFU_COEFF8_LEAKY_RELU_SLOPE_LEN, DX_M1A_NPU0_SFU_COEFF8_LEAKY_RELU_SLOPE_MASK, DX_M1A_NPU0_SFU_COEFF8_LEAKY_RELU_SLOPE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF8.LEAKY_RELU_SLOPE", 
      Read_Dx_m1a_npu0_Sfu_coeff8_LEAKY_RELU_SLOPE,
      Write_Dx_m1a_npu0_Sfu_coeff8_LEAKY_RELU_SLOPE,
    },
    { /* 492 : INDEX_DX_M1A_NPU0_SFU_COEFF9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x5c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF9", 
      Read_Dx_m1a_npu0_Sfu_coeff9,
      Write_Dx_m1a_npu0_Sfu_coeff9,
    },
    { /* 493 : INDEX_DX_M1A_NPU0_SFU_COEFF9_RELU6_CLIP_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x5c, DX_M1A_NPU0_SFU_COEFF9_RELU6_CLIP_MAX_LEN, DX_M1A_NPU0_SFU_COEFF9_RELU6_CLIP_MAX_MASK, DX_M1A_NPU0_SFU_COEFF9_RELU6_CLIP_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF9.RELU6_CLIP_MAX", 
      Read_Dx_m1a_npu0_Sfu_coeff9_RELU6_CLIP_MAX,
      Write_Dx_m1a_npu0_Sfu_coeff9_RELU6_CLIP_MAX,
    },
    { /* 494 : INDEX_DX_M1A_NPU0_SFU_PAF0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x60, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF0", 
      Read_Dx_m1a_npu0_Sfu_paf0,
      Write_Dx_m1a_npu0_Sfu_paf0,
    },
    { /* 495 : INDEX_DX_M1A_NPU0_SFU_PAF0_PAF_BOUNDARY0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x60, DX_M1A_NPU0_SFU_PAF0_PAF_BOUNDARY0_LEN, DX_M1A_NPU0_SFU_PAF0_PAF_BOUNDARY0_MASK, DX_M1A_NPU0_SFU_PAF0_PAF_BOUNDARY0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF0.PAF_BOUNDARY0", 
      Read_Dx_m1a_npu0_Sfu_paf0_PAF_BOUNDARY0,
      Write_Dx_m1a_npu0_Sfu_paf0_PAF_BOUNDARY0,
    },
    { /* 496 : INDEX_DX_M1A_NPU0_SFU_PAF1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x64, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF1", 
      Read_Dx_m1a_npu0_Sfu_paf1,
      Write_Dx_m1a_npu0_Sfu_paf1,
    },
    { /* 497 : INDEX_DX_M1A_NPU0_SFU_PAF1_PAF_BOUNDARY1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x64, DX_M1A_NPU0_SFU_PAF1_PAF_BOUNDARY1_LEN, DX_M1A_NPU0_SFU_PAF1_PAF_BOUNDARY1_MASK, DX_M1A_NPU0_SFU_PAF1_PAF_BOUNDARY1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF1.PAF_BOUNDARY1", 
      Read_Dx_m1a_npu0_Sfu_paf1_PAF_BOUNDARY1,
      Write_Dx_m1a_npu0_Sfu_paf1_PAF_BOUNDARY1,
    },
    { /* 498 : INDEX_DX_M1A_NPU0_SFU_PAF2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x68, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF2", 
      Read_Dx_m1a_npu0_Sfu_paf2,
      Write_Dx_m1a_npu0_Sfu_paf2,
    },
    { /* 499 : INDEX_DX_M1A_NPU0_SFU_PAF2_PAF_BOUNDARY2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x68, DX_M1A_NPU0_SFU_PAF2_PAF_BOUNDARY2_LEN, DX_M1A_NPU0_SFU_PAF2_PAF_BOUNDARY2_MASK, DX_M1A_NPU0_SFU_PAF2_PAF_BOUNDARY2_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF2.PAF_BOUNDARY2", 
      Read_Dx_m1a_npu0_Sfu_paf2_PAF_BOUNDARY2,
      Write_Dx_m1a_npu0_Sfu_paf2_PAF_BOUNDARY2,
    },
    { /* 500 : INDEX_DX_M1A_NPU0_SFU_PAF3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x6c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF3", 
      Read_Dx_m1a_npu0_Sfu_paf3,
      Write_Dx_m1a_npu0_Sfu_paf3,
    },
    { /* 501 : INDEX_DX_M1A_NPU0_SFU_PAF3_PAF_BOUNDARY3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x6c, DX_M1A_NPU0_SFU_PAF3_PAF_BOUNDARY3_LEN, DX_M1A_NPU0_SFU_PAF3_PAF_BOUNDARY3_MASK, DX_M1A_NPU0_SFU_PAF3_PAF_BOUNDARY3_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF3.PAF_BOUNDARY3", 
      Read_Dx_m1a_npu0_Sfu_paf3_PAF_BOUNDARY3,
      Write_Dx_m1a_npu0_Sfu_paf3_PAF_BOUNDARY3,
    },
    { /* 502 : INDEX_DX_M1A_NPU0_SFU_PAF4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x70, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF4", 
      Read_Dx_m1a_npu0_Sfu_paf4,
      Write_Dx_m1a_npu0_Sfu_paf4,
    },
    { /* 503 : INDEX_DX_M1A_NPU0_SFU_PAF4_PAF_BOUNDARY4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x70, DX_M1A_NPU0_SFU_PAF4_PAF_BOUNDARY4_LEN, DX_M1A_NPU0_SFU_PAF4_PAF_BOUNDARY4_MASK, DX_M1A_NPU0_SFU_PAF4_PAF_BOUNDARY4_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF4.PAF_BOUNDARY4", 
      Read_Dx_m1a_npu0_Sfu_paf4_PAF_BOUNDARY4,
      Write_Dx_m1a_npu0_Sfu_paf4_PAF_BOUNDARY4,
    },
    { /* 504 : INDEX_DX_M1A_NPU0_SFU_PAF5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x74, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF5", 
      Read_Dx_m1a_npu0_Sfu_paf5,
      Write_Dx_m1a_npu0_Sfu_paf5,
    },
    { /* 505 : INDEX_DX_M1A_NPU0_SFU_PAF5_PAF_BOUNDARY5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x74, DX_M1A_NPU0_SFU_PAF5_PAF_BOUNDARY5_LEN, DX_M1A_NPU0_SFU_PAF5_PAF_BOUNDARY5_MASK, DX_M1A_NPU0_SFU_PAF5_PAF_BOUNDARY5_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF5.PAF_BOUNDARY5", 
      Read_Dx_m1a_npu0_Sfu_paf5_PAF_BOUNDARY5,
      Write_Dx_m1a_npu0_Sfu_paf5_PAF_BOUNDARY5,
    },
    { /* 506 : INDEX_DX_M1A_NPU0_SFU_PAF6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x78, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF6", 
      Read_Dx_m1a_npu0_Sfu_paf6,
      Write_Dx_m1a_npu0_Sfu_paf6,
    },
    { /* 507 : INDEX_DX_M1A_NPU0_SFU_PAF6_PAF_BOUNDARY6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x78, DX_M1A_NPU0_SFU_PAF6_PAF_BOUNDARY6_LEN, DX_M1A_NPU0_SFU_PAF6_PAF_BOUNDARY6_MASK, DX_M1A_NPU0_SFU_PAF6_PAF_BOUNDARY6_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF6.PAF_BOUNDARY6", 
      Read_Dx_m1a_npu0_Sfu_paf6_PAF_BOUNDARY6,
      Write_Dx_m1a_npu0_Sfu_paf6_PAF_BOUNDARY6,
    },
    { /* 508 : INDEX_DX_M1A_NPU0_SFU_PAF7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x7c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF7", 
      Read_Dx_m1a_npu0_Sfu_paf7,
      Write_Dx_m1a_npu0_Sfu_paf7,
    },
    { /* 509 : INDEX_DX_M1A_NPU0_SFU_PAF7_PAF_BOUNDARY7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x7c, DX_M1A_NPU0_SFU_PAF7_PAF_BOUNDARY7_LEN, DX_M1A_NPU0_SFU_PAF7_PAF_BOUNDARY7_MASK, DX_M1A_NPU0_SFU_PAF7_PAF_BOUNDARY7_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF7.PAF_BOUNDARY7", 
      Read_Dx_m1a_npu0_Sfu_paf7_PAF_BOUNDARY7,
      Write_Dx_m1a_npu0_Sfu_paf7_PAF_BOUNDARY7,
    },
    { /* 510 : INDEX_DX_M1A_NPU0_SFU_PAF8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x80, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF8", 
      Read_Dx_m1a_npu0_Sfu_paf8,
      Write_Dx_m1a_npu0_Sfu_paf8,
    },
    { /* 511 : INDEX_DX_M1A_NPU0_SFU_PAF8_PAF_BOUNDARY8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x80, DX_M1A_NPU0_SFU_PAF8_PAF_BOUNDARY8_LEN, DX_M1A_NPU0_SFU_PAF8_PAF_BOUNDARY8_MASK, DX_M1A_NPU0_SFU_PAF8_PAF_BOUNDARY8_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF8.PAF_BOUNDARY8", 
      Read_Dx_m1a_npu0_Sfu_paf8_PAF_BOUNDARY8,
      Write_Dx_m1a_npu0_Sfu_paf8_PAF_BOUNDARY8,
    },
    { /* 512 : INDEX_DX_M1A_NPU0_SFU_PAF9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x84, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF9", 
      Read_Dx_m1a_npu0_Sfu_paf9,
      Write_Dx_m1a_npu0_Sfu_paf9,
    },
    { /* 513 : INDEX_DX_M1A_NPU0_SFU_PAF9_PAF_BOUNDARY9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x84, DX_M1A_NPU0_SFU_PAF9_PAF_BOUNDARY9_LEN, DX_M1A_NPU0_SFU_PAF9_PAF_BOUNDARY9_MASK, DX_M1A_NPU0_SFU_PAF9_PAF_BOUNDARY9_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF9.PAF_BOUNDARY9", 
      Read_Dx_m1a_npu0_Sfu_paf9_PAF_BOUNDARY9,
      Write_Dx_m1a_npu0_Sfu_paf9_PAF_BOUNDARY9,
    },
    { /* 514 : INDEX_DX_M1A_NPU0_SFU_PAF10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x88, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF10", 
      Read_Dx_m1a_npu0_Sfu_paf10,
      Write_Dx_m1a_npu0_Sfu_paf10,
    },
    { /* 515 : INDEX_DX_M1A_NPU0_SFU_PAF10_PAF_BOUNDARY10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x88, DX_M1A_NPU0_SFU_PAF10_PAF_BOUNDARY10_LEN, DX_M1A_NPU0_SFU_PAF10_PAF_BOUNDARY10_MASK, DX_M1A_NPU0_SFU_PAF10_PAF_BOUNDARY10_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF10.PAF_BOUNDARY10", 
      Read_Dx_m1a_npu0_Sfu_paf10_PAF_BOUNDARY10,
      Write_Dx_m1a_npu0_Sfu_paf10_PAF_BOUNDARY10,
    },
    { /* 516 : INDEX_DX_M1A_NPU0_SFU_PAF11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF11", 
      Read_Dx_m1a_npu0_Sfu_paf11,
      Write_Dx_m1a_npu0_Sfu_paf11,
    },
    { /* 517 : INDEX_DX_M1A_NPU0_SFU_PAF11_PAF_BOUNDARY11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8c, DX_M1A_NPU0_SFU_PAF11_PAF_BOUNDARY11_LEN, DX_M1A_NPU0_SFU_PAF11_PAF_BOUNDARY11_MASK, DX_M1A_NPU0_SFU_PAF11_PAF_BOUNDARY11_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF11.PAF_BOUNDARY11", 
      Read_Dx_m1a_npu0_Sfu_paf11_PAF_BOUNDARY11,
      Write_Dx_m1a_npu0_Sfu_paf11_PAF_BOUNDARY11,
    },
    { /* 518 : INDEX_DX_M1A_NPU0_SFU_PAF12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x90, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF12", 
      Read_Dx_m1a_npu0_Sfu_paf12,
      Write_Dx_m1a_npu0_Sfu_paf12,
    },
    { /* 519 : INDEX_DX_M1A_NPU0_SFU_PAF12_PAF_BOUNDARY12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x90, DX_M1A_NPU0_SFU_PAF12_PAF_BOUNDARY12_LEN, DX_M1A_NPU0_SFU_PAF12_PAF_BOUNDARY12_MASK, DX_M1A_NPU0_SFU_PAF12_PAF_BOUNDARY12_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF12.PAF_BOUNDARY12", 
      Read_Dx_m1a_npu0_Sfu_paf12_PAF_BOUNDARY12,
      Write_Dx_m1a_npu0_Sfu_paf12_PAF_BOUNDARY12,
    },
    { /* 520 : INDEX_DX_M1A_NPU0_SFU_PAF13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x94, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF13", 
      Read_Dx_m1a_npu0_Sfu_paf13,
      Write_Dx_m1a_npu0_Sfu_paf13,
    },
    { /* 521 : INDEX_DX_M1A_NPU0_SFU_PAF13_PAF_BOUNDARY13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x94, DX_M1A_NPU0_SFU_PAF13_PAF_BOUNDARY13_LEN, DX_M1A_NPU0_SFU_PAF13_PAF_BOUNDARY13_MASK, DX_M1A_NPU0_SFU_PAF13_PAF_BOUNDARY13_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF13.PAF_BOUNDARY13", 
      Read_Dx_m1a_npu0_Sfu_paf13_PAF_BOUNDARY13,
      Write_Dx_m1a_npu0_Sfu_paf13_PAF_BOUNDARY13,
    },
    { /* 522 : INDEX_DX_M1A_NPU0_SFU_PAF14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x98, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF14", 
      Read_Dx_m1a_npu0_Sfu_paf14,
      Write_Dx_m1a_npu0_Sfu_paf14,
    },
    { /* 523 : INDEX_DX_M1A_NPU0_SFU_PAF14_PAF_BOUNDARY14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x98, DX_M1A_NPU0_SFU_PAF14_PAF_BOUNDARY14_LEN, DX_M1A_NPU0_SFU_PAF14_PAF_BOUNDARY14_MASK, DX_M1A_NPU0_SFU_PAF14_PAF_BOUNDARY14_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF14.PAF_BOUNDARY14", 
      Read_Dx_m1a_npu0_Sfu_paf14_PAF_BOUNDARY14,
      Write_Dx_m1a_npu0_Sfu_paf14_PAF_BOUNDARY14,
    },
    { /* 524 : INDEX_DX_M1A_NPU0_SFU_PAF15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x9c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF15", 
      Read_Dx_m1a_npu0_Sfu_paf15,
      Write_Dx_m1a_npu0_Sfu_paf15,
    },
    { /* 525 : INDEX_DX_M1A_NPU0_SFU_PAF15_PAF_MULT_COEFF0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x9c, DX_M1A_NPU0_SFU_PAF15_PAF_MULT_COEFF0_LEN, DX_M1A_NPU0_SFU_PAF15_PAF_MULT_COEFF0_MASK, DX_M1A_NPU0_SFU_PAF15_PAF_MULT_COEFF0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF15.PAF_MULT_COEFF0", 
      Read_Dx_m1a_npu0_Sfu_paf15_PAF_MULT_COEFF0,
      Write_Dx_m1a_npu0_Sfu_paf15_PAF_MULT_COEFF0,
    },
    { /* 526 : INDEX_DX_M1A_NPU0_SFU_PAF16 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF16", 
      Read_Dx_m1a_npu0_Sfu_paf16,
      Write_Dx_m1a_npu0_Sfu_paf16,
    },
    { /* 527 : INDEX_DX_M1A_NPU0_SFU_PAF16_PAF_MULT_COEFF1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa0, DX_M1A_NPU0_SFU_PAF16_PAF_MULT_COEFF1_LEN, DX_M1A_NPU0_SFU_PAF16_PAF_MULT_COEFF1_MASK, DX_M1A_NPU0_SFU_PAF16_PAF_MULT_COEFF1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF16.PAF_MULT_COEFF1", 
      Read_Dx_m1a_npu0_Sfu_paf16_PAF_MULT_COEFF1,
      Write_Dx_m1a_npu0_Sfu_paf16_PAF_MULT_COEFF1,
    },
    { /* 528 : INDEX_DX_M1A_NPU0_SFU_PAF17 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF17", 
      Read_Dx_m1a_npu0_Sfu_paf17,
      Write_Dx_m1a_npu0_Sfu_paf17,
    },
    { /* 529 : INDEX_DX_M1A_NPU0_SFU_PAF17_PAF_MULT_COEFF2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa4, DX_M1A_NPU0_SFU_PAF17_PAF_MULT_COEFF2_LEN, DX_M1A_NPU0_SFU_PAF17_PAF_MULT_COEFF2_MASK, DX_M1A_NPU0_SFU_PAF17_PAF_MULT_COEFF2_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF17.PAF_MULT_COEFF2", 
      Read_Dx_m1a_npu0_Sfu_paf17_PAF_MULT_COEFF2,
      Write_Dx_m1a_npu0_Sfu_paf17_PAF_MULT_COEFF2,
    },
    { /* 530 : INDEX_DX_M1A_NPU0_SFU_PAF18 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF18", 
      Read_Dx_m1a_npu0_Sfu_paf18,
      Write_Dx_m1a_npu0_Sfu_paf18,
    },
    { /* 531 : INDEX_DX_M1A_NPU0_SFU_PAF18_PAF_MULT_COEFF3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa8, DX_M1A_NPU0_SFU_PAF18_PAF_MULT_COEFF3_LEN, DX_M1A_NPU0_SFU_PAF18_PAF_MULT_COEFF3_MASK, DX_M1A_NPU0_SFU_PAF18_PAF_MULT_COEFF3_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF18.PAF_MULT_COEFF3", 
      Read_Dx_m1a_npu0_Sfu_paf18_PAF_MULT_COEFF3,
      Write_Dx_m1a_npu0_Sfu_paf18_PAF_MULT_COEFF3,
    },
    { /* 532 : INDEX_DX_M1A_NPU0_SFU_PAF19 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF19", 
      Read_Dx_m1a_npu0_Sfu_paf19,
      Write_Dx_m1a_npu0_Sfu_paf19,
    },
    { /* 533 : INDEX_DX_M1A_NPU0_SFU_PAF19_PAF_MULT_COEFF4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xac, DX_M1A_NPU0_SFU_PAF19_PAF_MULT_COEFF4_LEN, DX_M1A_NPU0_SFU_PAF19_PAF_MULT_COEFF4_MASK, DX_M1A_NPU0_SFU_PAF19_PAF_MULT_COEFF4_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF19.PAF_MULT_COEFF4", 
      Read_Dx_m1a_npu0_Sfu_paf19_PAF_MULT_COEFF4,
      Write_Dx_m1a_npu0_Sfu_paf19_PAF_MULT_COEFF4,
    },
    { /* 534 : INDEX_DX_M1A_NPU0_SFU_PAF20 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF20", 
      Read_Dx_m1a_npu0_Sfu_paf20,
      Write_Dx_m1a_npu0_Sfu_paf20,
    },
    { /* 535 : INDEX_DX_M1A_NPU0_SFU_PAF20_PAF_MULT_COEFF5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb0, DX_M1A_NPU0_SFU_PAF20_PAF_MULT_COEFF5_LEN, DX_M1A_NPU0_SFU_PAF20_PAF_MULT_COEFF5_MASK, DX_M1A_NPU0_SFU_PAF20_PAF_MULT_COEFF5_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF20.PAF_MULT_COEFF5", 
      Read_Dx_m1a_npu0_Sfu_paf20_PAF_MULT_COEFF5,
      Write_Dx_m1a_npu0_Sfu_paf20_PAF_MULT_COEFF5,
    },
    { /* 536 : INDEX_DX_M1A_NPU0_SFU_PAF21 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF21", 
      Read_Dx_m1a_npu0_Sfu_paf21,
      Write_Dx_m1a_npu0_Sfu_paf21,
    },
    { /* 537 : INDEX_DX_M1A_NPU0_SFU_PAF21_PAF_MULT_COEFF6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb4, DX_M1A_NPU0_SFU_PAF21_PAF_MULT_COEFF6_LEN, DX_M1A_NPU0_SFU_PAF21_PAF_MULT_COEFF6_MASK, DX_M1A_NPU0_SFU_PAF21_PAF_MULT_COEFF6_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF21.PAF_MULT_COEFF6", 
      Read_Dx_m1a_npu0_Sfu_paf21_PAF_MULT_COEFF6,
      Write_Dx_m1a_npu0_Sfu_paf21_PAF_MULT_COEFF6,
    },
    { /* 538 : INDEX_DX_M1A_NPU0_SFU_PAF22 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF22", 
      Read_Dx_m1a_npu0_Sfu_paf22,
      Write_Dx_m1a_npu0_Sfu_paf22,
    },
    { /* 539 : INDEX_DX_M1A_NPU0_SFU_PAF22_PAF_MULT_COEFF7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb8, DX_M1A_NPU0_SFU_PAF22_PAF_MULT_COEFF7_LEN, DX_M1A_NPU0_SFU_PAF22_PAF_MULT_COEFF7_MASK, DX_M1A_NPU0_SFU_PAF22_PAF_MULT_COEFF7_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF22.PAF_MULT_COEFF7", 
      Read_Dx_m1a_npu0_Sfu_paf22_PAF_MULT_COEFF7,
      Write_Dx_m1a_npu0_Sfu_paf22_PAF_MULT_COEFF7,
    },
    { /* 540 : INDEX_DX_M1A_NPU0_SFU_PAF23 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xbc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF23", 
      Read_Dx_m1a_npu0_Sfu_paf23,
      Write_Dx_m1a_npu0_Sfu_paf23,
    },
    { /* 541 : INDEX_DX_M1A_NPU0_SFU_PAF23_PAF_MULT_COEFF8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xbc, DX_M1A_NPU0_SFU_PAF23_PAF_MULT_COEFF8_LEN, DX_M1A_NPU0_SFU_PAF23_PAF_MULT_COEFF8_MASK, DX_M1A_NPU0_SFU_PAF23_PAF_MULT_COEFF8_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF23.PAF_MULT_COEFF8", 
      Read_Dx_m1a_npu0_Sfu_paf23_PAF_MULT_COEFF8,
      Write_Dx_m1a_npu0_Sfu_paf23_PAF_MULT_COEFF8,
    },
    { /* 542 : INDEX_DX_M1A_NPU0_SFU_PAF24 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF24", 
      Read_Dx_m1a_npu0_Sfu_paf24,
      Write_Dx_m1a_npu0_Sfu_paf24,
    },
    { /* 543 : INDEX_DX_M1A_NPU0_SFU_PAF24_PAF_MULT_COEFF9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc0, DX_M1A_NPU0_SFU_PAF24_PAF_MULT_COEFF9_LEN, DX_M1A_NPU0_SFU_PAF24_PAF_MULT_COEFF9_MASK, DX_M1A_NPU0_SFU_PAF24_PAF_MULT_COEFF9_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF24.PAF_MULT_COEFF9", 
      Read_Dx_m1a_npu0_Sfu_paf24_PAF_MULT_COEFF9,
      Write_Dx_m1a_npu0_Sfu_paf24_PAF_MULT_COEFF9,
    },
    { /* 544 : INDEX_DX_M1A_NPU0_SFU_PAF25 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF25", 
      Read_Dx_m1a_npu0_Sfu_paf25,
      Write_Dx_m1a_npu0_Sfu_paf25,
    },
    { /* 545 : INDEX_DX_M1A_NPU0_SFU_PAF25_PAF_MULT_COEFF10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc4, DX_M1A_NPU0_SFU_PAF25_PAF_MULT_COEFF10_LEN, DX_M1A_NPU0_SFU_PAF25_PAF_MULT_COEFF10_MASK, DX_M1A_NPU0_SFU_PAF25_PAF_MULT_COEFF10_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF25.PAF_MULT_COEFF10", 
      Read_Dx_m1a_npu0_Sfu_paf25_PAF_MULT_COEFF10,
      Write_Dx_m1a_npu0_Sfu_paf25_PAF_MULT_COEFF10,
    },
    { /* 546 : INDEX_DX_M1A_NPU0_SFU_PAF26 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF26", 
      Read_Dx_m1a_npu0_Sfu_paf26,
      Write_Dx_m1a_npu0_Sfu_paf26,
    },
    { /* 547 : INDEX_DX_M1A_NPU0_SFU_PAF26_PAF_MULT_COEFF11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc8, DX_M1A_NPU0_SFU_PAF26_PAF_MULT_COEFF11_LEN, DX_M1A_NPU0_SFU_PAF26_PAF_MULT_COEFF11_MASK, DX_M1A_NPU0_SFU_PAF26_PAF_MULT_COEFF11_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF26.PAF_MULT_COEFF11", 
      Read_Dx_m1a_npu0_Sfu_paf26_PAF_MULT_COEFF11,
      Write_Dx_m1a_npu0_Sfu_paf26_PAF_MULT_COEFF11,
    },
    { /* 548 : INDEX_DX_M1A_NPU0_SFU_PAF27 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xcc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF27", 
      Read_Dx_m1a_npu0_Sfu_paf27,
      Write_Dx_m1a_npu0_Sfu_paf27,
    },
    { /* 549 : INDEX_DX_M1A_NPU0_SFU_PAF27_PAF_MULT_COEFF12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xcc, DX_M1A_NPU0_SFU_PAF27_PAF_MULT_COEFF12_LEN, DX_M1A_NPU0_SFU_PAF27_PAF_MULT_COEFF12_MASK, DX_M1A_NPU0_SFU_PAF27_PAF_MULT_COEFF12_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF27.PAF_MULT_COEFF12", 
      Read_Dx_m1a_npu0_Sfu_paf27_PAF_MULT_COEFF12,
      Write_Dx_m1a_npu0_Sfu_paf27_PAF_MULT_COEFF12,
    },
    { /* 550 : INDEX_DX_M1A_NPU0_SFU_PAF28 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF28", 
      Read_Dx_m1a_npu0_Sfu_paf28,
      Write_Dx_m1a_npu0_Sfu_paf28,
    },
    { /* 551 : INDEX_DX_M1A_NPU0_SFU_PAF28_PAF_MULT_COEFF13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd0, DX_M1A_NPU0_SFU_PAF28_PAF_MULT_COEFF13_LEN, DX_M1A_NPU0_SFU_PAF28_PAF_MULT_COEFF13_MASK, DX_M1A_NPU0_SFU_PAF28_PAF_MULT_COEFF13_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF28.PAF_MULT_COEFF13", 
      Read_Dx_m1a_npu0_Sfu_paf28_PAF_MULT_COEFF13,
      Write_Dx_m1a_npu0_Sfu_paf28_PAF_MULT_COEFF13,
    },
    { /* 552 : INDEX_DX_M1A_NPU0_SFU_PAF29 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF29", 
      Read_Dx_m1a_npu0_Sfu_paf29,
      Write_Dx_m1a_npu0_Sfu_paf29,
    },
    { /* 553 : INDEX_DX_M1A_NPU0_SFU_PAF29_PAF_MULT_COEFF14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd4, DX_M1A_NPU0_SFU_PAF29_PAF_MULT_COEFF14_LEN, DX_M1A_NPU0_SFU_PAF29_PAF_MULT_COEFF14_MASK, DX_M1A_NPU0_SFU_PAF29_PAF_MULT_COEFF14_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF29.PAF_MULT_COEFF14", 
      Read_Dx_m1a_npu0_Sfu_paf29_PAF_MULT_COEFF14,
      Write_Dx_m1a_npu0_Sfu_paf29_PAF_MULT_COEFF14,
    },
    { /* 554 : INDEX_DX_M1A_NPU0_SFU_PAF30 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF30", 
      Read_Dx_m1a_npu0_Sfu_paf30,
      Write_Dx_m1a_npu0_Sfu_paf30,
    },
    { /* 555 : INDEX_DX_M1A_NPU0_SFU_PAF30_PAF_MULT_COEFF15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd8, DX_M1A_NPU0_SFU_PAF30_PAF_MULT_COEFF15_LEN, DX_M1A_NPU0_SFU_PAF30_PAF_MULT_COEFF15_MASK, DX_M1A_NPU0_SFU_PAF30_PAF_MULT_COEFF15_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF30.PAF_MULT_COEFF15", 
      Read_Dx_m1a_npu0_Sfu_paf30_PAF_MULT_COEFF15,
      Write_Dx_m1a_npu0_Sfu_paf30_PAF_MULT_COEFF15,
    },
    { /* 556 : INDEX_DX_M1A_NPU0_SFU_PAF31 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xdc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF31", 
      Read_Dx_m1a_npu0_Sfu_paf31,
      Write_Dx_m1a_npu0_Sfu_paf31,
    },
    { /* 557 : INDEX_DX_M1A_NPU0_SFU_PAF31_PAF_ADD_COEFF0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xdc, DX_M1A_NPU0_SFU_PAF31_PAF_ADD_COEFF0_LEN, DX_M1A_NPU0_SFU_PAF31_PAF_ADD_COEFF0_MASK, DX_M1A_NPU0_SFU_PAF31_PAF_ADD_COEFF0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF31.PAF_ADD_COEFF0", 
      Read_Dx_m1a_npu0_Sfu_paf31_PAF_ADD_COEFF0,
      Write_Dx_m1a_npu0_Sfu_paf31_PAF_ADD_COEFF0,
    },
    { /* 558 : INDEX_DX_M1A_NPU0_SFU_PAF32 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF32", 
      Read_Dx_m1a_npu0_Sfu_paf32,
      Write_Dx_m1a_npu0_Sfu_paf32,
    },
    { /* 559 : INDEX_DX_M1A_NPU0_SFU_PAF32_PAF_ADD_COEFF1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe0, DX_M1A_NPU0_SFU_PAF32_PAF_ADD_COEFF1_LEN, DX_M1A_NPU0_SFU_PAF32_PAF_ADD_COEFF1_MASK, DX_M1A_NPU0_SFU_PAF32_PAF_ADD_COEFF1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF32.PAF_ADD_COEFF1", 
      Read_Dx_m1a_npu0_Sfu_paf32_PAF_ADD_COEFF1,
      Write_Dx_m1a_npu0_Sfu_paf32_PAF_ADD_COEFF1,
    },
    { /* 560 : INDEX_DX_M1A_NPU0_SFU_PAF33 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF33", 
      Read_Dx_m1a_npu0_Sfu_paf33,
      Write_Dx_m1a_npu0_Sfu_paf33,
    },
    { /* 561 : INDEX_DX_M1A_NPU0_SFU_PAF33_PAF_ADD_COEFF2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe4, DX_M1A_NPU0_SFU_PAF33_PAF_ADD_COEFF2_LEN, DX_M1A_NPU0_SFU_PAF33_PAF_ADD_COEFF2_MASK, DX_M1A_NPU0_SFU_PAF33_PAF_ADD_COEFF2_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF33.PAF_ADD_COEFF2", 
      Read_Dx_m1a_npu0_Sfu_paf33_PAF_ADD_COEFF2,
      Write_Dx_m1a_npu0_Sfu_paf33_PAF_ADD_COEFF2,
    },
    { /* 562 : INDEX_DX_M1A_NPU0_SFU_PAF34 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF34", 
      Read_Dx_m1a_npu0_Sfu_paf34,
      Write_Dx_m1a_npu0_Sfu_paf34,
    },
    { /* 563 : INDEX_DX_M1A_NPU0_SFU_PAF34_PAF_ADD_COEFF3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe8, DX_M1A_NPU0_SFU_PAF34_PAF_ADD_COEFF3_LEN, DX_M1A_NPU0_SFU_PAF34_PAF_ADD_COEFF3_MASK, DX_M1A_NPU0_SFU_PAF34_PAF_ADD_COEFF3_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF34.PAF_ADD_COEFF3", 
      Read_Dx_m1a_npu0_Sfu_paf34_PAF_ADD_COEFF3,
      Write_Dx_m1a_npu0_Sfu_paf34_PAF_ADD_COEFF3,
    },
    { /* 564 : INDEX_DX_M1A_NPU0_SFU_PAF35 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xec, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF35", 
      Read_Dx_m1a_npu0_Sfu_paf35,
      Write_Dx_m1a_npu0_Sfu_paf35,
    },
    { /* 565 : INDEX_DX_M1A_NPU0_SFU_PAF35_PAF_ADD_COEFF4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xec, DX_M1A_NPU0_SFU_PAF35_PAF_ADD_COEFF4_LEN, DX_M1A_NPU0_SFU_PAF35_PAF_ADD_COEFF4_MASK, DX_M1A_NPU0_SFU_PAF35_PAF_ADD_COEFF4_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF35.PAF_ADD_COEFF4", 
      Read_Dx_m1a_npu0_Sfu_paf35_PAF_ADD_COEFF4,
      Write_Dx_m1a_npu0_Sfu_paf35_PAF_ADD_COEFF4,
    },
    { /* 566 : INDEX_DX_M1A_NPU0_SFU_PAF36 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF36", 
      Read_Dx_m1a_npu0_Sfu_paf36,
      Write_Dx_m1a_npu0_Sfu_paf36,
    },
    { /* 567 : INDEX_DX_M1A_NPU0_SFU_PAF36_PAF_ADD_COEFF5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf0, DX_M1A_NPU0_SFU_PAF36_PAF_ADD_COEFF5_LEN, DX_M1A_NPU0_SFU_PAF36_PAF_ADD_COEFF5_MASK, DX_M1A_NPU0_SFU_PAF36_PAF_ADD_COEFF5_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF36.PAF_ADD_COEFF5", 
      Read_Dx_m1a_npu0_Sfu_paf36_PAF_ADD_COEFF5,
      Write_Dx_m1a_npu0_Sfu_paf36_PAF_ADD_COEFF5,
    },
    { /* 568 : INDEX_DX_M1A_NPU0_SFU_PAF37 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF37", 
      Read_Dx_m1a_npu0_Sfu_paf37,
      Write_Dx_m1a_npu0_Sfu_paf37,
    },
    { /* 569 : INDEX_DX_M1A_NPU0_SFU_PAF37_PAF_ADD_COEFF6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf4, DX_M1A_NPU0_SFU_PAF37_PAF_ADD_COEFF6_LEN, DX_M1A_NPU0_SFU_PAF37_PAF_ADD_COEFF6_MASK, DX_M1A_NPU0_SFU_PAF37_PAF_ADD_COEFF6_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF37.PAF_ADD_COEFF6", 
      Read_Dx_m1a_npu0_Sfu_paf37_PAF_ADD_COEFF6,
      Write_Dx_m1a_npu0_Sfu_paf37_PAF_ADD_COEFF6,
    },
    { /* 570 : INDEX_DX_M1A_NPU0_SFU_PAF38 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF38", 
      Read_Dx_m1a_npu0_Sfu_paf38,
      Write_Dx_m1a_npu0_Sfu_paf38,
    },
    { /* 571 : INDEX_DX_M1A_NPU0_SFU_PAF38_PAF_ADD_COEFF7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf8, DX_M1A_NPU0_SFU_PAF38_PAF_ADD_COEFF7_LEN, DX_M1A_NPU0_SFU_PAF38_PAF_ADD_COEFF7_MASK, DX_M1A_NPU0_SFU_PAF38_PAF_ADD_COEFF7_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF38.PAF_ADD_COEFF7", 
      Read_Dx_m1a_npu0_Sfu_paf38_PAF_ADD_COEFF7,
      Write_Dx_m1a_npu0_Sfu_paf38_PAF_ADD_COEFF7,
    },
    { /* 572 : INDEX_DX_M1A_NPU0_SFU_PAF39 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xfc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF39", 
      Read_Dx_m1a_npu0_Sfu_paf39,
      Write_Dx_m1a_npu0_Sfu_paf39,
    },
    { /* 573 : INDEX_DX_M1A_NPU0_SFU_PAF39_PAF_ADD_COEFF8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xfc, DX_M1A_NPU0_SFU_PAF39_PAF_ADD_COEFF8_LEN, DX_M1A_NPU0_SFU_PAF39_PAF_ADD_COEFF8_MASK, DX_M1A_NPU0_SFU_PAF39_PAF_ADD_COEFF8_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF39.PAF_ADD_COEFF8", 
      Read_Dx_m1a_npu0_Sfu_paf39_PAF_ADD_COEFF8,
      Write_Dx_m1a_npu0_Sfu_paf39_PAF_ADD_COEFF8,
    },
    { /* 574 : INDEX_DX_M1A_NPU0_SFU_PAF40 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x100, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF40", 
      Read_Dx_m1a_npu0_Sfu_paf40,
      Write_Dx_m1a_npu0_Sfu_paf40,
    },
    { /* 575 : INDEX_DX_M1A_NPU0_SFU_PAF40_PAF_ADD_COEFF9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x100, DX_M1A_NPU0_SFU_PAF40_PAF_ADD_COEFF9_LEN, DX_M1A_NPU0_SFU_PAF40_PAF_ADD_COEFF9_MASK, DX_M1A_NPU0_SFU_PAF40_PAF_ADD_COEFF9_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF40.PAF_ADD_COEFF9", 
      Read_Dx_m1a_npu0_Sfu_paf40_PAF_ADD_COEFF9,
      Write_Dx_m1a_npu0_Sfu_paf40_PAF_ADD_COEFF9,
    },
    { /* 576 : INDEX_DX_M1A_NPU0_SFU_PAF41 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x104, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF41", 
      Read_Dx_m1a_npu0_Sfu_paf41,
      Write_Dx_m1a_npu0_Sfu_paf41,
    },
    { /* 577 : INDEX_DX_M1A_NPU0_SFU_PAF41_PAF_ADD_COEFF10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x104, DX_M1A_NPU0_SFU_PAF41_PAF_ADD_COEFF10_LEN, DX_M1A_NPU0_SFU_PAF41_PAF_ADD_COEFF10_MASK, DX_M1A_NPU0_SFU_PAF41_PAF_ADD_COEFF10_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF41.PAF_ADD_COEFF10", 
      Read_Dx_m1a_npu0_Sfu_paf41_PAF_ADD_COEFF10,
      Write_Dx_m1a_npu0_Sfu_paf41_PAF_ADD_COEFF10,
    },
    { /* 578 : INDEX_DX_M1A_NPU0_SFU_PAF42 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x108, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF42", 
      Read_Dx_m1a_npu0_Sfu_paf42,
      Write_Dx_m1a_npu0_Sfu_paf42,
    },
    { /* 579 : INDEX_DX_M1A_NPU0_SFU_PAF42_PAF_ADD_COEFF11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x108, DX_M1A_NPU0_SFU_PAF42_PAF_ADD_COEFF11_LEN, DX_M1A_NPU0_SFU_PAF42_PAF_ADD_COEFF11_MASK, DX_M1A_NPU0_SFU_PAF42_PAF_ADD_COEFF11_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF42.PAF_ADD_COEFF11", 
      Read_Dx_m1a_npu0_Sfu_paf42_PAF_ADD_COEFF11,
      Write_Dx_m1a_npu0_Sfu_paf42_PAF_ADD_COEFF11,
    },
    { /* 580 : INDEX_DX_M1A_NPU0_SFU_PAF43 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF43", 
      Read_Dx_m1a_npu0_Sfu_paf43,
      Write_Dx_m1a_npu0_Sfu_paf43,
    },
    { /* 581 : INDEX_DX_M1A_NPU0_SFU_PAF43_PAF_ADD_COEFF12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10c, DX_M1A_NPU0_SFU_PAF43_PAF_ADD_COEFF12_LEN, DX_M1A_NPU0_SFU_PAF43_PAF_ADD_COEFF12_MASK, DX_M1A_NPU0_SFU_PAF43_PAF_ADD_COEFF12_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF43.PAF_ADD_COEFF12", 
      Read_Dx_m1a_npu0_Sfu_paf43_PAF_ADD_COEFF12,
      Write_Dx_m1a_npu0_Sfu_paf43_PAF_ADD_COEFF12,
    },
    { /* 582 : INDEX_DX_M1A_NPU0_SFU_PAF44 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x110, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF44", 
      Read_Dx_m1a_npu0_Sfu_paf44,
      Write_Dx_m1a_npu0_Sfu_paf44,
    },
    { /* 583 : INDEX_DX_M1A_NPU0_SFU_PAF44_PAF_ADD_COEFF13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x110, DX_M1A_NPU0_SFU_PAF44_PAF_ADD_COEFF13_LEN, DX_M1A_NPU0_SFU_PAF44_PAF_ADD_COEFF13_MASK, DX_M1A_NPU0_SFU_PAF44_PAF_ADD_COEFF13_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF44.PAF_ADD_COEFF13", 
      Read_Dx_m1a_npu0_Sfu_paf44_PAF_ADD_COEFF13,
      Write_Dx_m1a_npu0_Sfu_paf44_PAF_ADD_COEFF13,
    },
    { /* 584 : INDEX_DX_M1A_NPU0_SFU_PAF45 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x114, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF45", 
      Read_Dx_m1a_npu0_Sfu_paf45,
      Write_Dx_m1a_npu0_Sfu_paf45,
    },
    { /* 585 : INDEX_DX_M1A_NPU0_SFU_PAF45_PAF_ADD_COEFF14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x114, DX_M1A_NPU0_SFU_PAF45_PAF_ADD_COEFF14_LEN, DX_M1A_NPU0_SFU_PAF45_PAF_ADD_COEFF14_MASK, DX_M1A_NPU0_SFU_PAF45_PAF_ADD_COEFF14_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF45.PAF_ADD_COEFF14", 
      Read_Dx_m1a_npu0_Sfu_paf45_PAF_ADD_COEFF14,
      Write_Dx_m1a_npu0_Sfu_paf45_PAF_ADD_COEFF14,
    },
    { /* 586 : INDEX_DX_M1A_NPU0_SFU_PAF46 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x118, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF46", 
      Read_Dx_m1a_npu0_Sfu_paf46,
      Write_Dx_m1a_npu0_Sfu_paf46,
    },
    { /* 587 : INDEX_DX_M1A_NPU0_SFU_PAF46_PAF_ADD_COEFF15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x118, DX_M1A_NPU0_SFU_PAF46_PAF_ADD_COEFF15_LEN, DX_M1A_NPU0_SFU_PAF46_PAF_ADD_COEFF15_MASK, DX_M1A_NPU0_SFU_PAF46_PAF_ADD_COEFF15_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF46.PAF_ADD_COEFF15", 
      Read_Dx_m1a_npu0_Sfu_paf46_PAF_ADD_COEFF15,
      Write_Dx_m1a_npu0_Sfu_paf46_PAF_ADD_COEFF15,
    },
    { /* 588 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x11c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.SFU_SCALE_CFG0", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg0,
      Write_Dx_m1a_npu0_Sfu_scale_cfg0,
    },
    { /* 589 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG0_SCALE_OUTLIER_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x11c, DX_M1A_NPU0_SFU_SCALE_CFG0_SCALE_OUTLIER_EN_LEN, DX_M1A_NPU0_SFU_SCALE_CFG0_SCALE_OUTLIER_EN_MASK, DX_M1A_NPU0_SFU_SCALE_CFG0_SCALE_OUTLIER_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG0.SCALE_OUTLIER_EN", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg0_SCALE_OUTLIER_EN,
      Write_Dx_m1a_npu0_Sfu_scale_cfg0_SCALE_OUTLIER_EN,
    },
    { /* 590 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x11c, DX_M1A_NPU0_SFU_SCALE_CFG0_RESERVED0_LEN, DX_M1A_NPU0_SFU_SCALE_CFG0_RESERVED0_MASK, DX_M1A_NPU0_SFU_SCALE_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Sfu_scale_cfg0_RESERVED0,
    },
    { /* 591 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x120, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.SFU_SCALE_CFG1", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg1,
      Write_Dx_m1a_npu0_Sfu_scale_cfg1,
    },
    { /* 592 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG1_SCALE_OUTLIER_BIG_BOUND */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x120, DX_M1A_NPU0_SFU_SCALE_CFG1_SCALE_OUTLIER_BIG_BOUND_LEN, DX_M1A_NPU0_SFU_SCALE_CFG1_SCALE_OUTLIER_BIG_BOUND_MASK, DX_M1A_NPU0_SFU_SCALE_CFG1_SCALE_OUTLIER_BIG_BOUND_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG1.SCALE_OUTLIER_BIG_BOUND", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg1_SCALE_OUTLIER_BIG_BOUND,
      Write_Dx_m1a_npu0_Sfu_scale_cfg1_SCALE_OUTLIER_BIG_BOUND,
    },
    { /* 593 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x120, DX_M1A_NPU0_SFU_SCALE_CFG1_RESERVED0_LEN, DX_M1A_NPU0_SFU_SCALE_CFG1_RESERVED0_MASK, DX_M1A_NPU0_SFU_SCALE_CFG1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG1.RESERVED0", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg1_RESERVED0,
      Write_Dx_m1a_npu0_Sfu_scale_cfg1_RESERVED0,
    },
    { /* 594 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x124, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.SFU_SCALE_CFG2", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg2,
      Write_Dx_m1a_npu0_Sfu_scale_cfg2,
    },
    { /* 595 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG2_SCALE_OUTLIER_SMALL_BOUND */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x124, DX_M1A_NPU0_SFU_SCALE_CFG2_SCALE_OUTLIER_SMALL_BOUND_LEN, DX_M1A_NPU0_SFU_SCALE_CFG2_SCALE_OUTLIER_SMALL_BOUND_MASK, DX_M1A_NPU0_SFU_SCALE_CFG2_SCALE_OUTLIER_SMALL_BOUND_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG2.SCALE_OUTLIER_SMALL_BOUND", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg2_SCALE_OUTLIER_SMALL_BOUND,
      Write_Dx_m1a_npu0_Sfu_scale_cfg2_SCALE_OUTLIER_SMALL_BOUND,
    },
    { /* 596 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG2_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x124, DX_M1A_NPU0_SFU_SCALE_CFG2_RESERVED0_LEN, DX_M1A_NPU0_SFU_SCALE_CFG2_RESERVED0_MASK, DX_M1A_NPU0_SFU_SCALE_CFG2_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG2.RESERVED0", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg2_RESERVED0,
      Write_Dx_m1a_npu0_Sfu_scale_cfg2_RESERVED0,
    },
    { /* 597 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x128, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG3", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg3,
      Write_Dx_m1a_npu0_Sfu_scale_cfg3,
    },
    { /* 598 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x128, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP_LEN, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP_MASK, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_OUT_SCALE_EXP", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP,
      Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_OUT_SCALE_EXP,
    },
    { /* 599 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_IN_SCALE_EXP */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x128, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_IN_SCALE_EXP_LEN, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_IN_SCALE_EXP_MASK, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_BIG_IN_SCALE_EXP_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_BIG_IN_SCALE_EXP", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_IN_SCALE_EXP,
      Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_BIG_IN_SCALE_EXP,
    },
    { /* 600 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x128, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP_LEN, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP_MASK, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_OUT_SCALE_EXP", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP,
      Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_OUT_SCALE_EXP,
    },
    { /* 601 : INDEX_DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x128, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP_LEN, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP_MASK, DX_M1A_NPU0_SFU_SCALE_CFG3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG3.SCALE_OUTLIER_SMALL_IN_SCALE_EXP", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP,
      Write_Dx_m1a_npu0_Sfu_scale_cfg3_SCALE_OUTLIER_SMALL_IN_SCALE_EXP,
    },
    { /* 602 : INDEX_DX_M1A_NPU0_SFU_ELEM_BRD0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x12c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.SFU_ELEM_BRD0", 
      Read_Dx_m1a_npu0_Sfu_elem_brd0,
      Write_Dx_m1a_npu0_Sfu_elem_brd0,
    },
    { /* 603 : INDEX_DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x12c, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_NUM_LEN, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_NUM_MASK, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_NUM", 
      Read_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_NUM,
      Write_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_NUM,
    },
    { /* 604 : INDEX_DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x12c, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_SIZE_LEN, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_SIZE_MASK, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_CHANNEL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_CHANNEL_SIZE", 
      Read_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_SIZE,
      Write_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_CHANNEL_SIZE,
    },
    { /* 605 : INDEX_DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x12c, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_EN_LEN, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_EN_MASK, DX_M1A_NPU0_SFU_ELEM_BRD0_ELEM_BROADCAST0_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_ELEM_BRD0.ELEM_BROADCAST0_EN", 
      Read_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_EN,
      Write_Dx_m1a_npu0_Sfu_elem_brd0_ELEM_BROADCAST0_EN,
    },
    { /* 606 : INDEX_DX_M1A_NPU0_SFU_ELEM_BRD0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x12c, DX_M1A_NPU0_SFU_ELEM_BRD0_RESERVED0_LEN, DX_M1A_NPU0_SFU_ELEM_BRD0_RESERVED0_MASK, DX_M1A_NPU0_SFU_ELEM_BRD0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.SFU_ELEM_BRD0.RESERVED0", 
      Read_Dx_m1a_npu0_Sfu_elem_brd0_RESERVED0,
      Write_Dx_m1a_npu0_Sfu_elem_brd0_RESERVED0,
    },
    { /* 607 : INDEX_DX_M1A_NPU0_SFU_PAF_DISABLE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x130, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF_DISABLE", 
      Read_Dx_m1a_npu0_Sfu_paf_disable,
      Write_Dx_m1a_npu0_Sfu_paf_disable,
    },
    { /* 608 : INDEX_DX_M1A_NPU0_SFU_PAF_DISABLE_PAF_LINE_DISABLE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x130, DX_M1A_NPU0_SFU_PAF_DISABLE_PAF_LINE_DISABLE_LEN, DX_M1A_NPU0_SFU_PAF_DISABLE_PAF_LINE_DISABLE_MASK, DX_M1A_NPU0_SFU_PAF_DISABLE_PAF_LINE_DISABLE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF_DISABLE.PAF_LINE_DISABLE", 
      Read_Dx_m1a_npu0_Sfu_paf_disable_PAF_LINE_DISABLE,
      Write_Dx_m1a_npu0_Sfu_paf_disable_PAF_LINE_DISABLE,
    },
    { /* 609 : INDEX_DX_M1A_NPU0_PRE0_I2C0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.PRE0_I2C0", 
      Read_Dx_m1a_npu0_Pre0_i2c0,
      Write_Dx_m1a_npu0_Pre0_i2c0,
    },
    { /* 610 : INDEX_DX_M1A_NPU0_PRE0_I2C0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, DX_M1A_NPU0_PRE0_I2C0_RESERVED0_LEN, DX_M1A_NPU0_PRE0_I2C0_RESERVED0_MASK, DX_M1A_NPU0_PRE0_I2C0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PRE0_I2C0.RESERVED0", 
      Read_Dx_m1a_npu0_Pre0_i2c0_RESERVED0,
      Write_Dx_m1a_npu0_Pre0_i2c0_RESERVED0,
    },
    { /* 611 : INDEX_DX_M1A_NPU0_PRE0_I2C0_I2C0_LINE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, DX_M1A_NPU0_PRE0_I2C0_I2C0_LINE_OFFSET_LEN, DX_M1A_NPU0_PRE0_I2C0_I2C0_LINE_OFFSET_MASK, DX_M1A_NPU0_PRE0_I2C0_I2C0_LINE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C0.I2C0_LINE_OFFSET", 
      Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_LINE_OFFSET,
      Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_LINE_OFFSET,
    },
    { /* 612 : INDEX_DX_M1A_NPU0_PRE0_I2C0_I2C0_LAST_VALID_BYTE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, DX_M1A_NPU0_PRE0_I2C0_I2C0_LAST_VALID_BYTE_LEN, DX_M1A_NPU0_PRE0_I2C0_I2C0_LAST_VALID_BYTE_MASK, DX_M1A_NPU0_PRE0_I2C0_I2C0_LAST_VALID_BYTE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C0.I2C0_LAST_VALID_BYTE", 
      Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_LAST_VALID_BYTE,
      Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_LAST_VALID_BYTE,
    },
    { /* 613 : INDEX_DX_M1A_NPU0_PRE0_I2C0_I2C0_RQST_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, DX_M1A_NPU0_PRE0_I2C0_I2C0_RQST_NUM_LEN, DX_M1A_NPU0_PRE0_I2C0_I2C0_RQST_NUM_MASK, DX_M1A_NPU0_PRE0_I2C0_I2C0_RQST_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C0.I2C0_RQST_NUM", 
      Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_RQST_NUM,
      Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_RQST_NUM,
    },
    { /* 614 : INDEX_DX_M1A_NPU0_PRE0_I2C0_I2C0_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, DX_M1A_NPU0_PRE0_I2C0_I2C0_EN_LEN, DX_M1A_NPU0_PRE0_I2C0_I2C0_EN_MASK, DX_M1A_NPU0_PRE0_I2C0_I2C0_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C0.I2C0_EN", 
      Read_Dx_m1a_npu0_Pre0_i2c0_I2C0_EN,
      Write_Dx_m1a_npu0_Pre0_i2c0_I2C0_EN,
    },
    { /* 615 : INDEX_DX_M1A_NPU0_PRE0_I2C1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x138, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PRE0_I2C1", 
      Read_Dx_m1a_npu0_Pre0_i2c1,
      Write_Dx_m1a_npu0_Pre0_i2c1,
    },
    { /* 616 : INDEX_DX_M1A_NPU0_PRE0_I2C1_I2C0_WRITE_FEATURE_BASE_ADDR_0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x138, DX_M1A_NPU0_PRE0_I2C1_I2C0_WRITE_FEATURE_BASE_ADDR_0_LEN, DX_M1A_NPU0_PRE0_I2C1_I2C0_WRITE_FEATURE_BASE_ADDR_0_MASK, DX_M1A_NPU0_PRE0_I2C1_I2C0_WRITE_FEATURE_BASE_ADDR_0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C1.I2C0_WRITE_FEATURE_BASE_ADDR_0", 
      Read_Dx_m1a_npu0_Pre0_i2c1_I2C0_WRITE_FEATURE_BASE_ADDR_0,
      Write_Dx_m1a_npu0_Pre0_i2c1_I2C0_WRITE_FEATURE_BASE_ADDR_0,
    },
    { /* 617 : INDEX_DX_M1A_NPU0_PRE0_I2C1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x138, DX_M1A_NPU0_PRE0_I2C1_RESERVED0_LEN, DX_M1A_NPU0_PRE0_I2C1_RESERVED0_MASK, DX_M1A_NPU0_PRE0_I2C1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PRE0_I2C1.RESERVED0", 
      Read_Dx_m1a_npu0_Pre0_i2c1_RESERVED0,
      Write_Dx_m1a_npu0_Pre0_i2c1_RESERVED0,
    },
    { /* 618 : INDEX_DX_M1A_NPU0_PRE0_I2C2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x13c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C2", 
      Read_Dx_m1a_npu0_Pre0_i2c2,
      Write_Dx_m1a_npu0_Pre0_i2c2,
    },
    { /* 619 : INDEX_DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x13c, DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_2_LEN, DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_2_MASK, DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_2_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_2", 
      Read_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_2,
      Write_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_2,
    },
    { /* 620 : INDEX_DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x13c, DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_1_LEN, DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_1_MASK, DX_M1A_NPU0_PRE0_I2C2_I2C0_WRITE_FEATURE_BASE_ADDR_1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C2.I2C0_WRITE_FEATURE_BASE_ADDR_1", 
      Read_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_1,
      Write_Dx_m1a_npu0_Pre0_i2c2_I2C0_WRITE_FEATURE_BASE_ADDR_1,
    },
    { /* 621 : INDEX_DX_M1A_NPU0_PRE0_I2C3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x140, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C3", 
      Read_Dx_m1a_npu0_Pre0_i2c3,
      Write_Dx_m1a_npu0_Pre0_i2c3,
    },
    { /* 622 : INDEX_DX_M1A_NPU0_PRE0_I2C3_I2C0_HEIGHT_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x140, DX_M1A_NPU0_PRE0_I2C3_I2C0_HEIGHT_MAX_LEN, DX_M1A_NPU0_PRE0_I2C3_I2C0_HEIGHT_MAX_MASK, DX_M1A_NPU0_PRE0_I2C3_I2C0_HEIGHT_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C3.I2C0_HEIGHT_MAX", 
      Read_Dx_m1a_npu0_Pre0_i2c3_I2C0_HEIGHT_MAX,
      Write_Dx_m1a_npu0_Pre0_i2c3_I2C0_HEIGHT_MAX,
    },
    { /* 623 : INDEX_DX_M1A_NPU0_PRE0_I2C3_I2C0_WIDTH_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x140, DX_M1A_NPU0_PRE0_I2C3_I2C0_WIDTH_MAX_LEN, DX_M1A_NPU0_PRE0_I2C3_I2C0_WIDTH_MAX_MASK, DX_M1A_NPU0_PRE0_I2C3_I2C0_WIDTH_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C3.I2C0_WIDTH_MAX", 
      Read_Dx_m1a_npu0_Pre0_i2c3_I2C0_WIDTH_MAX,
      Write_Dx_m1a_npu0_Pre0_i2c3_I2C0_WIDTH_MAX,
    },
    { /* 624 : INDEX_DX_M1A_NPU0_PRE0_FMT0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.PRE0_FMT0", 
      Read_Dx_m1a_npu0_Pre0_fmt0,
      Write_Dx_m1a_npu0_Pre0_fmt0,
    },
    { /* 625 : INDEX_DX_M1A_NPU0_PRE0_FMT0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, DX_M1A_NPU0_PRE0_FMT0_RESERVED0_LEN, DX_M1A_NPU0_PRE0_FMT0_RESERVED0_MASK, DX_M1A_NPU0_PRE0_FMT0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PRE0_FMT0.RESERVED0", 
      Read_Dx_m1a_npu0_Pre0_fmt0_RESERVED0,
      Write_Dx_m1a_npu0_Pre0_fmt0_RESERVED0,
    },
    { /* 626 : INDEX_DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_LINE_OPT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_LINE_OPT_LEN, DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_LINE_OPT_MASK, DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_LINE_OPT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_LINE_OPT", 
      Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_LINE_OPT,
      Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_LINE_OPT,
    },
    { /* 627 : INDEX_DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_VALID_NUM_LEN, DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_VALID_NUM_MASK, DX_M1A_NPU0_PRE0_FMT0_FMT0_FIRST_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT0.FMT0_FIRST_VALID_NUM", 
      Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_VALID_NUM,
      Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_FIRST_VALID_NUM,
    },
    { /* 628 : INDEX_DX_M1A_NPU0_PRE0_FMT0_FMT0_CH_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, DX_M1A_NPU0_PRE0_FMT0_FMT0_CH_MODE_LEN, DX_M1A_NPU0_PRE0_FMT0_FMT0_CH_MODE_MASK, DX_M1A_NPU0_PRE0_FMT0_FMT0_CH_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT0.FMT0_CH_MODE", 
      Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_CH_MODE,
      Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_CH_MODE,
    },
    { /* 629 : INDEX_DX_M1A_NPU0_PRE0_FMT0_FMT0_ENABLE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, DX_M1A_NPU0_PRE0_FMT0_FMT0_ENABLE_LEN, DX_M1A_NPU0_PRE0_FMT0_FMT0_ENABLE_MASK, DX_M1A_NPU0_PRE0_FMT0_FMT0_ENABLE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT0.FMT0_ENABLE", 
      Read_Dx_m1a_npu0_Pre0_fmt0_FMT0_ENABLE,
      Write_Dx_m1a_npu0_Pre0_fmt0_FMT0_ENABLE,
    },
    { /* 630 : INDEX_DX_M1A_NPU0_PRE0_FMT1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x148, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT1", 
      Read_Dx_m1a_npu0_Pre0_fmt1,
      Write_Dx_m1a_npu0_Pre0_fmt1,
    },
    { /* 631 : INDEX_DX_M1A_NPU0_PRE0_FMT1_FMT0_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x148, DX_M1A_NPU0_PRE0_FMT1_FMT0_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PRE0_FMT1_FMT0_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PRE0_FMT1_FMT0_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT1.FMT0_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pre0_fmt1_FMT0_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pre0_fmt1_FMT0_READ_BASE_ADDR,
    },
    { /* 632 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_ADDR_GEN0", 
      Read_Dx_m1a_npu0_Pe0_addr_gen0,
      Write_Dx_m1a_npu0_Pe0_addr_gen0,
    },
    { /* 633 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14c, DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_DEFAULT_F_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_DEFAULT_F_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe0_addr_gen0_PE0_DEFAULT_F_ADDR_GEN_MODE,
    },
    { /* 634 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14c, DX_M1A_NPU0_PE0_ADDR_GEN0_RESERVED0_LEN, DX_M1A_NPU0_PE0_ADDR_GEN0_RESERVED0_MASK, DX_M1A_NPU0_PE0_ADDR_GEN0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_addr_gen0_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_addr_gen0_RESERVED0,
    },
    { /* 635 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_RF_ADDR_GEN_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14c, DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_RF_ADDR_GEN_MAX_NUM_LEN, DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_RF_ADDR_GEN_MAX_NUM_MASK, DX_M1A_NPU0_PE0_ADDR_GEN0_PE0_RF_ADDR_GEN_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN0.PE0_RF_ADDR_GEN_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe0_addr_gen0_PE0_RF_ADDR_GEN_MAX_NUM,
      Write_Dx_m1a_npu0_Pe0_addr_gen0_PE0_RF_ADDR_GEN_MAX_NUM,
    },
    { /* 636 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x150, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN1", 
      Read_Dx_m1a_npu0_Pe0_addr_gen1,
      Write_Dx_m1a_npu0_Pe0_addr_gen1,
    },
    { /* 637 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x150, DX_M1A_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_ADDR_GEN1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN1.PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_addr_gen1_PE0_DEFAULT_F_ADDR_GEN_BASE_ADDR,
    },
    { /* 638 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x154, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN2", 
      Read_Dx_m1a_npu0_Pe0_addr_gen2,
      Write_Dx_m1a_npu0_Pe0_addr_gen2,
    },
    { /* 639 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x154, DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_SIZE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_SIZE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_SIZE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_SIZE,
      Write_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_SIZE,
    },
    { /* 640 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x154, DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_LEN, DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_MASK, DX_M1A_NPU0_PE0_ADDR_GEN2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN2.PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
      Write_Dx_m1a_npu0_Pe0_addr_gen2_PE0_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
    },
    { /* 641 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x158, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN3", 
      Read_Dx_m1a_npu0_Pe0_addr_gen3,
      Write_Dx_m1a_npu0_Pe0_addr_gen3,
    },
    { /* 642 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_SURFACE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x158, DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_SURFACE_SIZE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_SURFACE_SIZE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_SURFACE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_SURFACE_SIZE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_SURFACE_SIZE,
      Write_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_SURFACE_SIZE,
    },
    { /* 643 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x158, DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_STRIDE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_STRIDE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN3_PE0_DEFAULT_F_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN3.PE0_DEFAULT_F_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_STRIDE,
      Write_Dx_m1a_npu0_Pe0_addr_gen3_PE0_DEFAULT_F_STRIDE,
    },
    { /* 644 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x15c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_ADDR_GEN4", 
      Read_Dx_m1a_npu0_Pe0_addr_gen4,
      Write_Dx_m1a_npu0_Pe0_addr_gen4,
    },
    { /* 645 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_ELEM_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x15c, DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_ELEM_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_ELEM_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_ELEM_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_ELEM_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen4_PE0_ELEM_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe0_addr_gen4_PE0_ELEM_ADDR_GEN_MODE,
    },
    { /* 646 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN4_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x15c, DX_M1A_NPU0_PE0_ADDR_GEN4_RESERVED0_LEN, DX_M1A_NPU0_PE0_ADDR_GEN4_RESERVED0_MASK, DX_M1A_NPU0_PE0_ADDR_GEN4_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN4.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_addr_gen4_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_addr_gen4_RESERVED0,
    },
    { /* 647 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_DEFAULT_F_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x15c, DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_DEFAULT_F_SURFACE_STRIDE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_DEFAULT_F_SURFACE_STRIDE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN4_PE0_DEFAULT_F_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN4.PE0_DEFAULT_F_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen4_PE0_DEFAULT_F_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Pe0_addr_gen4_PE0_DEFAULT_F_SURFACE_STRIDE,
    },
    { /* 648 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x160, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN5", 
      Read_Dx_m1a_npu0_Pe0_addr_gen5,
      Write_Dx_m1a_npu0_Pe0_addr_gen5,
    },
    { /* 649 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x160, DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_STRIDE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_STRIDE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_STRIDE,
      Write_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_STRIDE,
    },
    { /* 650 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x160, DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_SIZE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_SIZE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN5_PE0_ELEM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN5.PE0_ELEM_SIZE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_SIZE,
      Write_Dx_m1a_npu0_Pe0_addr_gen5_PE0_ELEM_SIZE,
    },
    { /* 651 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x164, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN6", 
      Read_Dx_m1a_npu0_Pe0_addr_gen6,
      Write_Dx_m1a_npu0_Pe0_addr_gen6,
    },
    { /* 652 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x164, DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_STRIDE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_STRIDE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_STRIDE,
    },
    { /* 653 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x164, DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_SIZE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_SIZE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN6_PE0_ELEM_SURFACE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN6.PE0_ELEM_SURFACE_SIZE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_SIZE,
      Write_Dx_m1a_npu0_Pe0_addr_gen6_PE0_ELEM_SURFACE_SIZE,
    },
    { /* 654 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x168, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN7", 
      Read_Dx_m1a_npu0_Pe0_addr_gen7,
      Write_Dx_m1a_npu0_Pe0_addr_gen7,
    },
    { /* 655 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x168, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_OFFSET_LEN, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_OFFSET_MASK, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE_OFFSET", 
      Read_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE_OFFSET,
      Write_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE_OFFSET,
    },
    { /* 656 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x168, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE,
    },
    { /* 657 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x168, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM_LEN, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM_MASK, DX_M1A_NPU0_PE0_ADDR_GEN7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN7.PE0_MUL_ADDR_GEN_MODE2_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM,
      Write_Dx_m1a_npu0_Pe0_addr_gen7_PE0_MUL_ADDR_GEN_MODE2_MAX_NUM,
    },
    { /* 658 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x16c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN8", 
      Read_Dx_m1a_npu0_Pe0_addr_gen8,
      Write_Dx_m1a_npu0_Pe0_addr_gen8,
    },
    { /* 659 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x16c, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_OFFSET_LEN, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_OFFSET_MASK, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE_OFFSET", 
      Read_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE_OFFSET,
      Write_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE_OFFSET,
    },
    { /* 660 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x16c, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE,
    },
    { /* 661 : INDEX_DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x16c, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM_LEN, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM_MASK, DX_M1A_NPU0_PE0_ADDR_GEN8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN8.PE0_ADD_ADDR_GEN_MODE2_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM,
      Write_Dx_m1a_npu0_Pe0_addr_gen8_PE0_ADD_ADDR_GEN_MODE2_MAX_NUM,
    },
    { /* 662 : INDEX_DX_M1A_NPU0_PE0_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CTRL", 
      Read_Dx_m1a_npu0_Pe0_ctrl,
      Write_Dx_m1a_npu0_Pe0_ctrl,
    },
    { /* 663 : INDEX_DX_M1A_NPU0_PE0_CTRL_PE0_CONV_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, DX_M1A_NPU0_PE0_CTRL_PE0_CONV_TYPE_LEN, DX_M1A_NPU0_PE0_CTRL_PE0_CONV_TYPE_MASK, DX_M1A_NPU0_PE0_CTRL_PE0_CONV_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CTRL.PE0_CONV_TYPE", 
      Read_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_TYPE,
      Write_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_TYPE,
    },
    { /* 664 : INDEX_DX_M1A_NPU0_PE0_CTRL_PE0_CONV_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, DX_M1A_NPU0_PE0_CTRL_PE0_CONV_EN_LEN, DX_M1A_NPU0_PE0_CTRL_PE0_CONV_EN_MASK, DX_M1A_NPU0_PE0_CTRL_PE0_CONV_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CTRL.PE0_CONV_EN", 
      Read_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_EN,
      Write_Dx_m1a_npu0_Pe0_ctrl_PE0_CONV_EN,
    },
    { /* 665 : INDEX_DX_M1A_NPU0_PE0_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, DX_M1A_NPU0_PE0_CTRL_RESERVED0_LEN, DX_M1A_NPU0_PE0_CTRL_RESERVED0_MASK, DX_M1A_NPU0_PE0_CTRL_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CTRL.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_ctrl_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_ctrl_RESERVED0,
    },
    { /* 666 : INDEX_DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH_LEN, DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH_MASK, DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_DEPTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_DEPTH", 
      Read_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH,
      Write_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_DEPTH,
    },
    { /* 667 : INDEX_DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN_LEN, DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN_MASK, DX_M1A_NPU0_PE0_CTRL_PE0_SYSTOLIC_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CTRL.PE0_SYSTOLIC_EN", 
      Read_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN,
      Write_Dx_m1a_npu0_Pe0_ctrl_PE0_SYSTOLIC_EN,
    },
    { /* 668 : INDEX_DX_M1A_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, DX_M1A_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM_LEN, DX_M1A_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM_MASK, DX_M1A_NPU0_PE0_CTRL_PE0_SFUIN_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CTRL.PE0_SFUIN_VALID_NUM", 
      Read_Dx_m1a_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM,
      Write_Dx_m1a_npu0_Pe0_ctrl_PE0_SFUIN_VALID_NUM,
    },
    { /* 669 : INDEX_DX_M1A_NPU0_PE0_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x174, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG0", 
      Read_Dx_m1a_npu0_Pe0_cfg0,
      Write_Dx_m1a_npu0_Pe0_cfg0,
    },
    { /* 670 : INDEX_DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x174, DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM_LEN, DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM_MASK, DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_NUM", 
      Read_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM,
      Write_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_NUM,
    },
    { /* 671 : INDEX_DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x174, DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD_LEN, DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD_MASK, DX_M1A_NPU0_PE0_CFG0_PE0_LAST_CONV_MOD_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG0.PE0_LAST_CONV_MOD", 
      Read_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD,
      Write_Dx_m1a_npu0_Pe0_cfg0_PE0_LAST_CONV_MOD,
    },
    { /* 672 : INDEX_DX_M1A_NPU0_PE0_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x178, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG1", 
      Read_Dx_m1a_npu0_Pe0_cfg1,
      Write_Dx_m1a_npu0_Pe0_cfg1,
    },
    { /* 673 : INDEX_DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x178, DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL_LEN, DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL_MASK, DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_CHANNEL", 
      Read_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL,
      Write_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_CHANNEL,
    },
    { /* 674 : INDEX_DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x178, DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER_LEN, DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER_MASK, DX_M1A_NPU0_PE0_CFG1_PE0_OFEATURE_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG1.PE0_OFEATURE_NUMBER", 
      Read_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER,
      Write_Dx_m1a_npu0_Pe0_cfg1_PE0_OFEATURE_NUMBER,
    },
    { /* 675 : INDEX_DX_M1A_NPU0_PE0_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x17c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG2", 
      Read_Dx_m1a_npu0_Pe0_cfg2,
      Write_Dx_m1a_npu0_Pe0_cfg2,
    },
    { /* 676 : INDEX_DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x17c, DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH_LEN, DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH_MASK, DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_WIDTH", 
      Read_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH,
      Write_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_WIDTH,
    },
    { /* 677 : INDEX_DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x17c, DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT_LEN, DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT_MASK, DX_M1A_NPU0_PE0_CFG2_PE0_OFEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG2.PE0_OFEATURE_HEIGHT", 
      Read_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT,
      Write_Dx_m1a_npu0_Pe0_cfg2_PE0_OFEATURE_HEIGHT,
    },
    { /* 678 : INDEX_DX_M1A_NPU0_PE0_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x180, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG3", 
      Read_Dx_m1a_npu0_Pe0_cfg3,
      Write_Dx_m1a_npu0_Pe0_cfg3,
    },
    { /* 679 : INDEX_DX_M1A_NPU0_PE0_CFG3_PE0_OFEATURE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x180, DX_M1A_NPU0_PE0_CFG3_PE0_OFEATURE_SIZE_LEN, DX_M1A_NPU0_PE0_CFG3_PE0_OFEATURE_SIZE_MASK, DX_M1A_NPU0_PE0_CFG3_PE0_OFEATURE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG3.PE0_OFEATURE_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg3_PE0_OFEATURE_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg3_PE0_OFEATURE_SIZE,
    },
    { /* 680 : INDEX_DX_M1A_NPU0_PE0_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x184, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG4", 
      Read_Dx_m1a_npu0_Pe0_cfg4,
      Write_Dx_m1a_npu0_Pe0_cfg4,
    },
    { /* 681 : INDEX_DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x184, DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT_LEN, DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT_MASK, DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_HEIGHT", 
      Read_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT,
      Write_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_HEIGHT,
    },
    { /* 682 : INDEX_DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x184, DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_CHANNEL_LEN, DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_CHANNEL_MASK, DX_M1A_NPU0_PE0_CFG4_PE0_FEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG4.PE0_FEATURE_CHANNEL", 
      Read_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_CHANNEL,
      Write_Dx_m1a_npu0_Pe0_cfg4_PE0_FEATURE_CHANNEL,
    },
    { /* 683 : INDEX_DX_M1A_NPU0_PE0_CFG5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x188, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG5", 
      Read_Dx_m1a_npu0_Pe0_cfg5,
      Write_Dx_m1a_npu0_Pe0_cfg5,
    },
    { /* 684 : INDEX_DX_M1A_NPU0_PE0_CFG5_PE0_FILTER_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x188, DX_M1A_NPU0_PE0_CFG5_PE0_FILTER_NUMBER_LEN, DX_M1A_NPU0_PE0_CFG5_PE0_FILTER_NUMBER_MASK, DX_M1A_NPU0_PE0_CFG5_PE0_FILTER_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG5.PE0_FILTER_NUMBER", 
      Read_Dx_m1a_npu0_Pe0_cfg5_PE0_FILTER_NUMBER,
      Write_Dx_m1a_npu0_Pe0_cfg5_PE0_FILTER_NUMBER,
    },
    { /* 685 : INDEX_DX_M1A_NPU0_PE0_CFG5_PE0_FEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x188, DX_M1A_NPU0_PE0_CFG5_PE0_FEATURE_WIDTH_LEN, DX_M1A_NPU0_PE0_CFG5_PE0_FEATURE_WIDTH_MASK, DX_M1A_NPU0_PE0_CFG5_PE0_FEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG5.PE0_FEATURE_WIDTH", 
      Read_Dx_m1a_npu0_Pe0_cfg5_PE0_FEATURE_WIDTH,
      Write_Dx_m1a_npu0_Pe0_cfg5_PE0_FEATURE_WIDTH,
    },
    { /* 686 : INDEX_DX_M1A_NPU0_PE0_CFG6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG6", 
      Read_Dx_m1a_npu0_Pe0_cfg6,
      Write_Dx_m1a_npu0_Pe0_cfg6,
    },
    { /* 687 : INDEX_DX_M1A_NPU0_PE0_CFG6_PE0_PAD_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, DX_M1A_NPU0_PE0_CFG6_PE0_PAD_MODE_LEN, DX_M1A_NPU0_PE0_CFG6_PE0_PAD_MODE_MASK, DX_M1A_NPU0_PE0_CFG6_PE0_PAD_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG6.PE0_PAD_MODE", 
      Read_Dx_m1a_npu0_Pe0_cfg6_PE0_PAD_MODE,
      Write_Dx_m1a_npu0_Pe0_cfg6_PE0_PAD_MODE,
    },
    { /* 688 : INDEX_DX_M1A_NPU0_PE0_CFG6_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, DX_M1A_NPU0_PE0_CFG6_RESERVED0_LEN, DX_M1A_NPU0_PE0_CFG6_RESERVED0_MASK, DX_M1A_NPU0_PE0_CFG6_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG6.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_cfg6_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_cfg6_RESERVED0,
    },
    { /* 689 : INDEX_DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_WIDTH_LEN, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_WIDTH_MASK, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_WIDTH", 
      Read_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_WIDTH,
      Write_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_WIDTH,
    },
    { /* 690 : INDEX_DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT_LEN, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT_MASK, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_HEIGHT", 
      Read_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT,
      Write_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_HEIGHT,
    },
    { /* 691 : INDEX_DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_CHANNEL_LEN, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_CHANNEL_MASK, DX_M1A_NPU0_PE0_CFG6_PE0_FILTER_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG6.PE0_FILTER_CHANNEL", 
      Read_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_CHANNEL,
      Write_Dx_m1a_npu0_Pe0_cfg6_PE0_FILTER_CHANNEL,
    },
    { /* 692 : INDEX_DX_M1A_NPU0_PE0_CFG7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7", 
      Read_Dx_m1a_npu0_Pe0_cfg7,
      Write_Dx_m1a_npu0_Pe0_cfg7,
    },
    { /* 693 : INDEX_DX_M1A_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE_LEN, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE_MASK, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_TOP_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7.PE0_PAD_TOP_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_TOP_SIZE,
    },
    { /* 694 : INDEX_DX_M1A_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE_LEN, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE_MASK, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_BOTTOM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7.PE0_PAD_BOTTOM_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_BOTTOM_SIZE,
    },
    { /* 695 : INDEX_DX_M1A_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE_LEN, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE_MASK, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_LEFT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7.PE0_PAD_LEFT_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_LEFT_SIZE,
    },
    { /* 696 : INDEX_DX_M1A_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE_LEN, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE_MASK, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_RIGHT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7.PE0_PAD_RIGHT_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_RIGHT_SIZE,
    },
    { /* 697 : INDEX_DX_M1A_NPU0_PE0_CFG7_PE0_PAD_VALUE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_VALUE_LEN, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_VALUE_MASK, DX_M1A_NPU0_PE0_CFG7_PE0_PAD_VALUE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7.PE0_PAD_VALUE", 
      Read_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_VALUE,
      Write_Dx_m1a_npu0_Pe0_cfg7_PE0_PAD_VALUE,
    },
    { /* 698 : INDEX_DX_M1A_NPU0_PE0_CFG8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x194, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG8", 
      Read_Dx_m1a_npu0_Pe0_cfg8,
      Write_Dx_m1a_npu0_Pe0_cfg8,
    },
    { /* 699 : INDEX_DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_X */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x194, DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_X_LEN, DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_X_MASK, DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_X_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_X", 
      Read_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_X,
      Write_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_X,
    },
    { /* 700 : INDEX_DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_Y */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x194, DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_Y_LEN, DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_Y_MASK, DX_M1A_NPU0_PE0_CFG8_PE0_STRIDE_Y_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG8.PE0_STRIDE_Y", 
      Read_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_Y,
      Write_Dx_m1a_npu0_Pe0_cfg8_PE0_STRIDE_Y,
    },
    { /* 701 : INDEX_DX_M1A_NPU0_PE0_CFG8_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x194, DX_M1A_NPU0_PE0_CFG8_RESERVED0_LEN, DX_M1A_NPU0_PE0_CFG8_RESERVED0_MASK, DX_M1A_NPU0_PE0_CFG8_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG8.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_cfg8_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_cfg8_RESERVED0,
    },
    { /* 702 : INDEX_DX_M1A_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x194, DX_M1A_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET_LEN, DX_M1A_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET_MASK, DX_M1A_NPU0_PE0_CFG8_PE0_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG8.PE0_CHANNEL_OFFSET", 
      Read_Dx_m1a_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET,
      Write_Dx_m1a_npu0_Pe0_cfg8_PE0_CHANNEL_OFFSET,
    },
    { /* 703 : INDEX_DX_M1A_NPU0_PE0_CFG9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x198, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG9", 
      Read_Dx_m1a_npu0_Pe0_cfg9,
      Write_Dx_m1a_npu0_Pe0_cfg9,
    },
    { /* 704 : INDEX_DX_M1A_NPU0_PE0_CFG9_PE0_ELEM_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x198, DX_M1A_NPU0_PE0_CFG9_PE0_ELEM_CHANNEL_OFFSET_LEN, DX_M1A_NPU0_PE0_CFG9_PE0_ELEM_CHANNEL_OFFSET_MASK, DX_M1A_NPU0_PE0_CFG9_PE0_ELEM_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG9.PE0_ELEM_CHANNEL_OFFSET", 
      Read_Dx_m1a_npu0_Pe0_cfg9_PE0_ELEM_CHANNEL_OFFSET,
      Write_Dx_m1a_npu0_Pe0_cfg9_PE0_ELEM_CHANNEL_OFFSET,
    },
    { /* 705 : INDEX_DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_X */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x198, DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_X_LEN, DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_X_MASK, DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_X_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_X", 
      Read_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_X,
      Write_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_X,
    },
    { /* 706 : INDEX_DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_Y */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x198, DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_Y_LEN, DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_Y_MASK, DX_M1A_NPU0_PE0_CFG9_PE0_DILATION_Y_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG9.PE0_DILATION_Y", 
      Read_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_Y,
      Write_Dx_m1a_npu0_Pe0_cfg9_PE0_DILATION_Y,
    },
    { /* 707 : INDEX_DX_M1A_NPU0_PE0_CFG9_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x198, DX_M1A_NPU0_PE0_CFG9_RESERVED0_LEN, DX_M1A_NPU0_PE0_CFG9_RESERVED0_MASK, DX_M1A_NPU0_PE0_CFG9_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG9.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_cfg9_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_cfg9_RESERVED0,
    },
    { /* 708 : INDEX_DX_M1A_NPU0_PE0_CFG10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x19c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG10", 
      Read_Dx_m1a_npu0_Pe0_cfg10,
      Write_Dx_m1a_npu0_Pe0_cfg10,
    },
    { /* 709 : INDEX_DX_M1A_NPU0_PE0_CFG10_PE0_READ_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x19c, DX_M1A_NPU0_PE0_CFG10_PE0_READ_FEATURE_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG10_PE0_READ_FEATURE_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG10_PE0_READ_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG10.PE0_READ_FEATURE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg10_PE0_READ_FEATURE_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg10_PE0_READ_FEATURE_BASE_ADDR,
    },
    { /* 710 : INDEX_DX_M1A_NPU0_PE0_CFG11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG11", 
      Read_Dx_m1a_npu0_Pe0_cfg11,
      Write_Dx_m1a_npu0_Pe0_cfg11,
    },
    { /* 711 : INDEX_DX_M1A_NPU0_PE0_CFG11_PE0_WRITE_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a0, DX_M1A_NPU0_PE0_CFG11_PE0_WRITE_FEATURE_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG11_PE0_WRITE_FEATURE_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG11_PE0_WRITE_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG11.PE0_WRITE_FEATURE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg11_PE0_WRITE_FEATURE_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg11_PE0_WRITE_FEATURE_BASE_ADDR,
    },
    { /* 712 : INDEX_DX_M1A_NPU0_PE0_CFG12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG12", 
      Read_Dx_m1a_npu0_Pe0_cfg12,
      Write_Dx_m1a_npu0_Pe0_cfg12,
    },
    { /* 713 : INDEX_DX_M1A_NPU0_PE0_CFG12_PE0_READ_WEIGHT_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a4, DX_M1A_NPU0_PE0_CFG12_PE0_READ_WEIGHT_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG12_PE0_READ_WEIGHT_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG12_PE0_READ_WEIGHT_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG12.PE0_READ_WEIGHT_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg12_PE0_READ_WEIGHT_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg12_PE0_READ_WEIGHT_BASE_ADDR,
    },
    { /* 714 : INDEX_DX_M1A_NPU0_PE0_CFG13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG13", 
      Read_Dx_m1a_npu0_Pe0_cfg13,
      Write_Dx_m1a_npu0_Pe0_cfg13,
    },
    { /* 715 : INDEX_DX_M1A_NPU0_PE0_CFG13_PE0_ELEM_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a8, DX_M1A_NPU0_PE0_CFG13_PE0_ELEM_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG13_PE0_ELEM_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG13_PE0_ELEM_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG13.PE0_ELEM_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg13_PE0_ELEM_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg13_PE0_ELEM_READ_BASE_ADDR,
    },
    { /* 716 : INDEX_DX_M1A_NPU0_PE0_CFG14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1ac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG14", 
      Read_Dx_m1a_npu0_Pe0_cfg14,
      Write_Dx_m1a_npu0_Pe0_cfg14,
    },
    { /* 717 : INDEX_DX_M1A_NPU0_PE0_CFG14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1ac, DX_M1A_NPU0_PE0_CFG14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG14.PE0_MUL_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg14_PE0_MUL_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 718 : INDEX_DX_M1A_NPU0_PE0_CFG15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG15", 
      Read_Dx_m1a_npu0_Pe0_cfg15,
      Write_Dx_m1a_npu0_Pe0_cfg15,
    },
    { /* 719 : INDEX_DX_M1A_NPU0_PE0_CFG15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b0, DX_M1A_NPU0_PE0_CFG15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG15.PE0_ADD_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg15_PE0_ADD_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 720 : INDEX_DX_M1A_NPU0_PE0_CFG16 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG16", 
      Read_Dx_m1a_npu0_Pe0_cfg16,
      Write_Dx_m1a_npu0_Pe0_cfg16,
    },
    { /* 721 : INDEX_DX_M1A_NPU0_PE0_CFG16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b4, DX_M1A_NPU0_PE0_CFG16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG16.PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg16_PE0_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 722 : INDEX_DX_M1A_NPU0_PE0_CFG17 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG17", 
      Read_Dx_m1a_npu0_Pe0_cfg17,
      Write_Dx_m1a_npu0_Pe0_cfg17,
    },
    { /* 723 : INDEX_DX_M1A_NPU0_PE0_CFG17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b8, DX_M1A_NPU0_PE0_CFG17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG17.PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg17_PE0_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 724 : INDEX_DX_M1A_NPU0_PE0_CFG18 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1bc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG18", 
      Read_Dx_m1a_npu0_Pe0_cfg18,
      Write_Dx_m1a_npu0_Pe0_cfg18,
    },
    { /* 725 : INDEX_DX_M1A_NPU0_PE0_CFG18_PE0_SE_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1bc, DX_M1A_NPU0_PE0_CFG18_PE0_SE_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG18_PE0_SE_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG18_PE0_SE_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG18.PE0_SE_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg18_PE0_SE_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg18_PE0_SE_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 726 : INDEX_DX_M1A_NPU0_PE0_CFG19 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG19", 
      Read_Dx_m1a_npu0_Pe0_cfg19,
      Write_Dx_m1a_npu0_Pe0_cfg19,
    },
    { /* 727 : INDEX_DX_M1A_NPU0_PE0_CFG19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c0, DX_M1A_NPU0_PE0_CFG19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG19.PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg19_PE0_GENERAL_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 728 : INDEX_DX_M1A_NPU0_PE0_CFG20 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG20", 
      Read_Dx_m1a_npu0_Pe0_cfg20,
      Write_Dx_m1a_npu0_Pe0_cfg20,
    },
    { /* 729 : INDEX_DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_MODE1_LINE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c4, DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_MODE1_LINE_SIZE_LEN, DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_MODE1_LINE_SIZE_MASK, DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_MODE1_LINE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_MODE1_LINE_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_MODE1_LINE_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_MODE1_LINE_SIZE,
    },
    { /* 730 : INDEX_DX_M1A_NPU0_PE0_CFG20_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c4, DX_M1A_NPU0_PE0_CFG20_RESERVED0_LEN, DX_M1A_NPU0_PE0_CFG20_RESERVED0_MASK, DX_M1A_NPU0_PE0_CFG20_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG20.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_cfg20_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_cfg20_RESERVED0,
    },
    { /* 731 : INDEX_DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c4, DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE0_CFG20_PE0_WF_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG20.PE0_WF_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe0_cfg20_PE0_WF_ADDR_GEN_MODE,
    },
    { /* 732 : INDEX_DX_M1A_NPU0_PE0_CFG21 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG21", 
      Read_Dx_m1a_npu0_Pe0_cfg21,
      Write_Dx_m1a_npu0_Pe0_cfg21,
    },
    { /* 733 : INDEX_DX_M1A_NPU0_PE0_CFG21_PE0_WF_ADDR_MODE1_LINE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c8, DX_M1A_NPU0_PE0_CFG21_PE0_WF_ADDR_MODE1_LINE_STRIDE_LEN, DX_M1A_NPU0_PE0_CFG21_PE0_WF_ADDR_MODE1_LINE_STRIDE_MASK, DX_M1A_NPU0_PE0_CFG21_PE0_WF_ADDR_MODE1_LINE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG21.PE0_WF_ADDR_MODE1_LINE_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_cfg21_PE0_WF_ADDR_MODE1_LINE_STRIDE,
      Write_Dx_m1a_npu0_Pe0_cfg21_PE0_WF_ADDR_MODE1_LINE_STRIDE,
    },
    { /* 734 : INDEX_DX_M1A_NPU0_PE0_CFG22 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1cc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG22", 
      Read_Dx_m1a_npu0_Pe0_cfg22,
      Write_Dx_m1a_npu0_Pe0_cfg22,
    },
    { /* 735 : INDEX_DX_M1A_NPU0_PE0_CFG22_PE0_WF_ADDR_SURFACE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1cc, DX_M1A_NPU0_PE0_CFG22_PE0_WF_ADDR_SURFACE_SIZE_LEN, DX_M1A_NPU0_PE0_CFG22_PE0_WF_ADDR_SURFACE_SIZE_MASK, DX_M1A_NPU0_PE0_CFG22_PE0_WF_ADDR_SURFACE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG22.PE0_WF_ADDR_SURFACE_SIZE", 
      Read_Dx_m1a_npu0_Pe0_cfg22_PE0_WF_ADDR_SURFACE_SIZE,
      Write_Dx_m1a_npu0_Pe0_cfg22_PE0_WF_ADDR_SURFACE_SIZE,
    },
    { /* 736 : INDEX_DX_M1A_NPU0_PE0_CFG23 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG23", 
      Read_Dx_m1a_npu0_Pe0_cfg23,
      Write_Dx_m1a_npu0_Pe0_cfg23,
    },
    { /* 737 : INDEX_DX_M1A_NPU0_PE0_CFG23_PE0_WF_WRITE_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d0, DX_M1A_NPU0_PE0_CFG23_PE0_WF_WRITE_CNT_LEN, DX_M1A_NPU0_PE0_CFG23_PE0_WF_WRITE_CNT_MASK, DX_M1A_NPU0_PE0_CFG23_PE0_WF_WRITE_CNT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG23.PE0_WF_WRITE_CNT", 
      Read_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_WRITE_CNT,
      Write_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_WRITE_CNT,
    },
    { /* 738 : INDEX_DX_M1A_NPU0_PE0_CFG23_PE0_WF_ADDR_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d0, DX_M1A_NPU0_PE0_CFG23_PE0_WF_ADDR_SURFACE_STRIDE_LEN, DX_M1A_NPU0_PE0_CFG23_PE0_WF_ADDR_SURFACE_STRIDE_MASK, DX_M1A_NPU0_PE0_CFG23_PE0_WF_ADDR_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG23.PE0_WF_ADDR_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_ADDR_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Pe0_cfg23_PE0_WF_ADDR_SURFACE_STRIDE,
    },
    { /* 739 : INDEX_DX_M1A_NPU0_PE0_CFG24 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG24", 
      Read_Dx_m1a_npu0_Pe0_cfg24,
      Write_Dx_m1a_npu0_Pe0_cfg24,
    },
    { /* 740 : INDEX_DX_M1A_NPU0_PE0_CFG24_PE0_WF_SRC1_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d4, DX_M1A_NPU0_PE0_CFG24_PE0_WF_SRC1_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_CFG24_PE0_WF_SRC1_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_CFG24_PE0_WF_SRC1_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG24.PE0_WF_SRC1_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_cfg24_PE0_WF_SRC1_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_cfg24_PE0_WF_SRC1_BASE_ADDR,
    },
    { /* 741 : INDEX_DX_M1A_NPU0_PE0_CFG25 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG25", 
      Read_Dx_m1a_npu0_Pe0_cfg25,
      Write_Dx_m1a_npu0_Pe0_cfg25,
    },
    { /* 742 : INDEX_DX_M1A_NPU0_PE0_CFG25_PE0_SFU_OUT_DATA_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d8, DX_M1A_NPU0_PE0_CFG25_PE0_SFU_OUT_DATA_VALID_NUM_LEN, DX_M1A_NPU0_PE0_CFG25_PE0_SFU_OUT_DATA_VALID_NUM_MASK, DX_M1A_NPU0_PE0_CFG25_PE0_SFU_OUT_DATA_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG25.PE0_SFU_OUT_DATA_VALID_NUM", 
      Read_Dx_m1a_npu0_Pe0_cfg25_PE0_SFU_OUT_DATA_VALID_NUM,
      Write_Dx_m1a_npu0_Pe0_cfg25_PE0_SFU_OUT_DATA_VALID_NUM,
    },
    { /* 743 : INDEX_DX_M1A_NPU0_PE0_CFG25_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d8, DX_M1A_NPU0_PE0_CFG25_RESERVED1_LEN, DX_M1A_NPU0_PE0_CFG25_RESERVED1_MASK, DX_M1A_NPU0_PE0_CFG25_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG25.RESERVED1", 
      Read_Dx_m1a_npu0_Pe0_cfg25_RESERVED1,
      Write_Dx_m1a_npu0_Pe0_cfg25_RESERVED1,
    },
    { /* 744 : INDEX_DX_M1A_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_SHIFT_LEN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d8, DX_M1A_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_SHIFT_LEN_LEN, DX_M1A_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_SHIFT_LEN_MASK, DX_M1A_NPU0_PE0_CFG25_PE0_ST_ADDR_GEN_SHIFT_LEN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG25.PE0_ST_ADDR_GEN_SHIFT_LEN", 
      Read_Dx_m1a_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_SHIFT_LEN,
      Write_Dx_m1a_npu0_Pe0_cfg25_PE0_ST_ADDR_GEN_SHIFT_LEN,
    },
    { /* 745 : INDEX_DX_M1A_NPU0_PE0_CFG25_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d8, DX_M1A_NPU0_PE0_CFG25_RESERVED0_LEN, DX_M1A_NPU0_PE0_CFG25_RESERVED0_MASK, DX_M1A_NPU0_PE0_CFG25_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG25.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_cfg25_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_cfg25_RESERVED0,
    },
    { /* 746 : INDEX_DX_M1A_NPU0_PE0_CFG26 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1dc, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG26", 
      Read_Dx_m1a_npu0_Pe0_cfg26,
      Write_Dx_m1a_npu0_Pe0_cfg26,
    },
    { /* 747 : INDEX_DX_M1A_NPU0_PE0_CFG26_PE0_ST_ADDR_GEN_MUL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1dc, DX_M1A_NPU0_PE0_CFG26_PE0_ST_ADDR_GEN_MUL_LEN, DX_M1A_NPU0_PE0_CFG26_PE0_ST_ADDR_GEN_MUL_MASK, DX_M1A_NPU0_PE0_CFG26_PE0_ST_ADDR_GEN_MUL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG26.PE0_ST_ADDR_GEN_MUL", 
      Read_Dx_m1a_npu0_Pe0_cfg26_PE0_ST_ADDR_GEN_MUL,
      Write_Dx_m1a_npu0_Pe0_cfg26_PE0_ST_ADDR_GEN_MUL,
    },
    { /* 748 : INDEX_DX_M1A_NPU0_PE0_CFG26_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1dc, DX_M1A_NPU0_PE0_CFG26_RESERVED0_LEN, DX_M1A_NPU0_PE0_CFG26_RESERVED0_MASK, DX_M1A_NPU0_PE0_CFG26_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_CFG26.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_cfg26_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_cfg26_RESERVED0,
    },
    { /* 749 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_VMEM_CFG0", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0,
    },
    { /* 750 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_IN_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_IN_BUFF", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_IN_BUFF,
    },
    { /* 751 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED3_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED3_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED3_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED3", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED3,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED3,
    },
    { /* 752 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_WEIGHT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_WEIGHT_BUFF", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_WEIGHT_BUFF,
    },
    { /* 753 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED2_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED2_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED2_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED2", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED2,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED2,
    },
    { /* 754 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_OUT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_OUT_BUFF", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_OUT_BUFF,
    },
    { /* 755 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED1_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED1_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED1", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED1,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED1,
    },
    { /* 756 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_PE0_START_NO_ELEM_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.PE0_START_NO_ELEM_BUFF", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_PE0_START_NO_ELEM_BUFF,
    },
    { /* 757 : INDEX_DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE0_VMEM_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_VMEM_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0_RESERVED0,
    },
    { /* 758 : INDEX_DX_M1A_NPU0_REDUCE0_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.REDUCE0_CFG0", 
      Read_Dx_m1a_npu0_Reduce0_cfg0,
      Write_Dx_m1a_npu0_Reduce0_cfg0,
    },
    { /* 759 : INDEX_DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_SIZE_LEN, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_SIZE_MASK, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_SIZE", 
      Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_SIZE,
      Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_SIZE,
    },
    { /* 760 : INDEX_DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_NUM_LEN, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_NUM_MASK, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_CHANNEL_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_CHANNEL_NUM", 
      Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_NUM,
      Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_CHANNEL_NUM,
    },
    { /* 761 : INDEX_DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_MODE_LEN, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_MODE_MASK, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_MODE", 
      Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_MODE,
      Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_MODE,
    },
    { /* 762 : INDEX_DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_EN_LEN, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_EN_MASK, DX_M1A_NPU0_REDUCE0_CFG0_REDUCE0_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG0.REDUCE0_EN", 
      Read_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_EN,
      Write_Dx_m1a_npu0_Reduce0_cfg0_REDUCE0_EN,
    },
    { /* 763 : INDEX_DX_M1A_NPU0_REDUCE0_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, DX_M1A_NPU0_REDUCE0_CFG0_RESERVED0_LEN, DX_M1A_NPU0_REDUCE0_CFG0_RESERVED0_MASK, DX_M1A_NPU0_REDUCE0_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.REDUCE0_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Reduce0_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Reduce0_cfg0_RESERVED0,
    },
    { /* 764 : INDEX_DX_M1A_NPU0_REDUCE0_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG1", 
      Read_Dx_m1a_npu0_Reduce0_cfg1,
      Write_Dx_m1a_npu0_Reduce0_cfg1,
    },
    { /* 765 : INDEX_DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_WIN_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e8, DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_WIN_NUM_LEN, DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_WIN_NUM_MASK, DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_WIN_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_WIN_NUM", 
      Read_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_WIN_NUM,
      Write_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_WIN_NUM,
    },
    { /* 766 : INDEX_DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_CNT_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e8, DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_CNT_MAX_NUM_LEN, DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_CNT_MAX_NUM_MASK, DX_M1A_NPU0_REDUCE0_CFG1_REDUCE0_CNT_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG1.REDUCE0_CNT_MAX_NUM", 
      Read_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_CNT_MAX_NUM,
      Write_Dx_m1a_npu0_Reduce0_cfg1_REDUCE0_CNT_MAX_NUM,
    },
    { /* 767 : INDEX_DX_M1A_NPU0_REDUCE0_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1ec, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG2", 
      Read_Dx_m1a_npu0_Reduce0_cfg2,
      Write_Dx_m1a_npu0_Reduce0_cfg2,
    },
    { /* 768 : INDEX_DX_M1A_NPU0_REDUCE0_CFG2_REDUCE0_RD_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1ec, DX_M1A_NPU0_REDUCE0_CFG2_REDUCE0_RD_BASE_ADDR_LEN, DX_M1A_NPU0_REDUCE0_CFG2_REDUCE0_RD_BASE_ADDR_MASK, DX_M1A_NPU0_REDUCE0_CFG2_REDUCE0_RD_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG2.REDUCE0_RD_BASE_ADDR", 
      Read_Dx_m1a_npu0_Reduce0_cfg2_REDUCE0_RD_BASE_ADDR,
      Write_Dx_m1a_npu0_Reduce0_cfg2_REDUCE0_RD_BASE_ADDR,
    },
    { /* 769 : INDEX_DX_M1A_NPU0_REDUCE0_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG3", 
      Read_Dx_m1a_npu0_Reduce0_cfg3,
      Write_Dx_m1a_npu0_Reduce0_cfg3,
    },
    { /* 770 : INDEX_DX_M1A_NPU0_REDUCE0_CFG3_REDUCE0_WR_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f0, DX_M1A_NPU0_REDUCE0_CFG3_REDUCE0_WR_BASE_ADDR_LEN, DX_M1A_NPU0_REDUCE0_CFG3_REDUCE0_WR_BASE_ADDR_MASK, DX_M1A_NPU0_REDUCE0_CFG3_REDUCE0_WR_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG3.REDUCE0_WR_BASE_ADDR", 
      Read_Dx_m1a_npu0_Reduce0_cfg3_REDUCE0_WR_BASE_ADDR,
      Write_Dx_m1a_npu0_Reduce0_cfg3_REDUCE0_WR_BASE_ADDR,
    },
    { /* 771 : INDEX_DX_M1A_NPU0_PE0_DMA_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_CTRL", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl,
    },
    { /* 772 : INDEX_DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_START_OP_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_START_OP_EN_LEN, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_START_OP_EN_MASK, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_START_OP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_START_OP_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_START_OP_EN,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_START_OP_EN,
    },
    { /* 773 : INDEX_DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_DMA_CTRL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_DMA_CTRL_MODE_LEN, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_DMA_CTRL_MODE_MASK, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_DMA_CTRL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_DMA_CTRL_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_DMA_CTRL_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_DMA_CTRL_MODE,
    },
    { /* 774 : INDEX_DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_BIT_WIDTH_LEN, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_BIT_WIDTH_MASK, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_BIT_WIDTH", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_BIT_WIDTH,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_BIT_WIDTH,
    },
    { /* 775 : INDEX_DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_DUMMY_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_DUMMY_MODE_LEN, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_DUMMY_MODE_MASK, DX_M1A_NPU0_PE0_DMA_CTRL_VMEM0_WEIGHT_DUMMY_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_CTRL.VMEM0_WEIGHT_DUMMY_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_DUMMY_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl_VMEM0_WEIGHT_DUMMY_MODE,
    },
    { /* 776 : INDEX_DX_M1A_NPU0_PE0_DMA_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, DX_M1A_NPU0_PE0_DMA_CTRL_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_CTRL_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_CTRL_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_CTRL.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl_RESERVED0,
    },
    { /* 777 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0,
    },
    { /* 778 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SIZE,
    },
    { /* 779 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_TIME_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_TIME_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_TIME,
    },
    { /* 780 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_MODE_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_MODE_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_MODE,
    },
    { /* 781 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_EN_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_EN_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_EN,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_EN,
    },
    { /* 782 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SRC */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SRC_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SRC_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_VMEM0_RD_ELEM_SRC_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.VMEM0_RD_ELEM_SRC", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SRC,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_VMEM0_RD_ELEM_SRC,
    },
    { /* 783 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0_RESERVED0,
    },
    { /* 784 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1fc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg1,
    },
    { /* 785 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG1_VMEM0_RD_ELEM_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1fc, DX_M1A_NPU0_PE0_DMA_ELEM_CFG1_VMEM0_RD_ELEM_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG1_VMEM0_RD_ELEM_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG1_VMEM0_RD_ELEM_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG1.VMEM0_RD_ELEM_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg1_VMEM0_RD_ELEM_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg1_VMEM0_RD_ELEM_STRIDE,
    },
    { /* 786 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x200, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg2,
    },
    { /* 787 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG2_VMEM0_RD_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x200, DX_M1A_NPU0_PE0_DMA_ELEM_CFG2_VMEM0_RD_ELEM_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG2_VMEM0_RD_ELEM_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG2_VMEM0_RD_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG2.VMEM0_RD_ELEM_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg2_VMEM0_RD_ELEM_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg2_VMEM0_RD_ELEM_BASE_ADDR,
    },
    { /* 788 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x204, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg3,
    },
    { /* 789 : INDEX_DX_M1A_NPU0_PE0_DMA_ELEM_CFG3_VMEM0_WT_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x204, DX_M1A_NPU0_PE0_DMA_ELEM_CFG3_VMEM0_WT_ELEM_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_ELEM_CFG3_VMEM0_WT_ELEM_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_ELEM_CFG3_VMEM0_WT_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG3.VMEM0_WT_ELEM_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg3_VMEM0_WT_ELEM_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg3_VMEM0_WT_ELEM_BASE_ADDR,
    },
    { /* 790 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x208, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_W_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg0,
    },
    { /* 791 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x208, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_TIME_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_TIME_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_TIME,
    },
    { /* 792 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x208, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_MODE_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_MODE_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_MODE,
    },
    { /* 793 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x208, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_EN_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_EN_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG0_VMEM0_RD_W_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG0.VMEM0_RD_W_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_EN,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_VMEM0_RD_W_EN,
    },
    { /* 794 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x208, DX_M1A_NPU0_PE0_DMA_W_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg0_RESERVED0,
    },
    { /* 795 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg1,
    },
    { /* 796 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20c, DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_STRIDE,
    },
    { /* 797 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20c, DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG1_VMEM0_RD_W_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG1.VMEM0_RD_W_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg1_VMEM0_RD_W_SIZE,
    },
    { /* 798 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x210, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg2,
    },
    { /* 799 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG2_VMEM0_RD_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x210, DX_M1A_NPU0_PE0_DMA_W_CFG2_VMEM0_RD_W_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG2_VMEM0_RD_W_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG2_VMEM0_RD_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG2.VMEM0_RD_W_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg2_VMEM0_RD_W_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg2_VMEM0_RD_W_BASE_ADDR,
    },
    { /* 800 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x214, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg3,
    },
    { /* 801 : INDEX_DX_M1A_NPU0_PE0_DMA_W_CFG3_VMEM0_WT_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x214, DX_M1A_NPU0_PE0_DMA_W_CFG3_VMEM0_WT_W_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_W_CFG3_VMEM0_WT_W_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_W_CFG3_VMEM0_WT_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG3.VMEM0_WT_W_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg3_VMEM0_WT_W_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg3_VMEM0_WT_W_BASE_ADDR,
    },
    { /* 802 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0,
    },
    { /* 803 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SIZE,
    },
    { /* 804 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_TIME_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_TIME_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_TIME,
    },
    { /* 805 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_MODE_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_MODE_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_MODE,
    },
    { /* 806 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_EN_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_EN_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_EN,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_EN,
    },
    { /* 807 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SRC */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SRC_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SRC_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG0_VMEM0_RD_INF_SRC_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0.VMEM0_RD_INF_SRC", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SRC,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0_VMEM0_RD_INF_SRC,
    },
    { /* 808 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x21c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg1,
    },
    { /* 809 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG1_VMEM0_RD_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x21c, DX_M1A_NPU0_PE0_DMA_INF_CFG1_VMEM0_RD_INF_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG1_VMEM0_RD_INF_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG1_VMEM0_RD_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG1.VMEM0_RD_INF_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg1_VMEM0_RD_INF_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg1_VMEM0_RD_INF_STRIDE,
    },
    { /* 810 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x220, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg2,
    },
    { /* 811 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG2_VMEM0_RD_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x220, DX_M1A_NPU0_PE0_DMA_INF_CFG2_VMEM0_RD_INF_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG2_VMEM0_RD_INF_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG2_VMEM0_RD_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG2.VMEM0_RD_INF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg2_VMEM0_RD_INF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg2_VMEM0_RD_INF_BASE_ADDR,
    },
    { /* 812 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x224, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg3,
    },
    { /* 813 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG3_VMEM0_WT_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x224, DX_M1A_NPU0_PE0_DMA_INF_CFG3_VMEM0_WT_INF_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG3_VMEM0_WT_INF_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG3_VMEM0_WT_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG3.VMEM0_WT_INF_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg3_VMEM0_WT_INF_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg3_VMEM0_WT_INF_STRIDE,
    },
    { /* 814 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x228, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG4", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg4,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg4,
    },
    { /* 815 : INDEX_DX_M1A_NPU0_PE0_DMA_INF_CFG4_VMEM0_WT_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x228, DX_M1A_NPU0_PE0_DMA_INF_CFG4_VMEM0_WT_INF_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_INF_CFG4_VMEM0_WT_INF_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_INF_CFG4_VMEM0_WT_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG4.VMEM0_WT_INF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg4_VMEM0_WT_INF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg4_VMEM0_WT_INF_BASE_ADDR,
    },
    { /* 816 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0,
    },
    { /* 817 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_SIZE,
    },
    { /* 818 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_TIME_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_TIME_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_TIME,
    },
    { /* 819 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED1", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED1,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED1,
    },
    { /* 820 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_EN_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_EN_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_VMEM0_WT_OUTF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.VMEM0_WT_OUTF_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_EN,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_VMEM0_WT_OUTF_EN,
    },
    { /* 821 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0_RESERVED0,
    },
    { /* 822 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x230, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg1,
    },
    { /* 823 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG1_VMEM0_WT_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x230, DX_M1A_NPU0_PE0_DMA_OUTF_CFG1_VMEM0_WT_OUTF_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG1_VMEM0_WT_OUTF_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG1_VMEM0_WT_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG1.VMEM0_WT_OUTF_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg1_VMEM0_WT_OUTF_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg1_VMEM0_WT_OUTF_STRIDE,
    },
    { /* 824 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x234, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg2,
    },
    { /* 825 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG2_VMEM0_WT_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x234, DX_M1A_NPU0_PE0_DMA_OUTF_CFG2_VMEM0_WT_OUTF_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG2_VMEM0_WT_OUTF_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG2_VMEM0_WT_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG2.VMEM0_WT_OUTF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg2_VMEM0_WT_OUTF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg2_VMEM0_WT_OUTF_BASE_ADDR,
    },
    { /* 826 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x238, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg3,
    },
    { /* 827 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG3_VMEM0_RD_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x238, DX_M1A_NPU0_PE0_DMA_OUTF_CFG3_VMEM0_RD_OUTF_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG3_VMEM0_RD_OUTF_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG3_VMEM0_RD_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG3.VMEM0_RD_OUTF_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg3_VMEM0_RD_OUTF_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg3_VMEM0_RD_OUTF_STRIDE,
    },
    { /* 828 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x23c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG4", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg4,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg4,
    },
    { /* 829 : INDEX_DX_M1A_NPU0_PE0_DMA_OUTF_CFG4_VMEM0_RD_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x23c, DX_M1A_NPU0_PE0_DMA_OUTF_CFG4_VMEM0_RD_OUTF_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_OUTF_CFG4_VMEM0_RD_OUTF_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_OUTF_CFG4_VMEM0_RD_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG4.VMEM0_RD_OUTF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg4_VMEM0_RD_OUTF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg4_VMEM0_RD_OUTF_BASE_ADDR,
    },
    { /* 830 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0,
    },
    { /* 831 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_SIZE,
    },
    { /* 832 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_MODE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_MODE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_MODE,
    },
    { /* 833 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_EN_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_EN_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_ADD_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_ADD_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_EN,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_ADD_EN,
    },
    { /* 834 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_SIZE,
    },
    { /* 835 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_MODE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_MODE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_MODE,
    },
    { /* 836 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_EN_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_EN_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RF_RD_MUL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RF_RD_MUL_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_EN,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RF_RD_MUL_EN,
    },
    { /* 837 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0_RESERVED0,
    },
    { /* 838 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x244, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1,
    },
    { /* 839 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x244, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_STRIDE,
    },
    { /* 840 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x244, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_STRIDE,
    },
    { /* 841 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x244, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_TIME_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_TIME_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_ADD_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_ADD_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_ADD_TIME,
    },
    { /* 842 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x244, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_TIME_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_TIME_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG1_RF_RD_MUL_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG1.RF_RD_MUL_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1_RF_RD_MUL_TIME,
    },
    { /* 843 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x248, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg2,
    },
    { /* 844 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG2_RF_RD_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x248, DX_M1A_NPU0_PE0_DMA_RF_CFG2_RF_RD_MUL_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG2_RF_RD_MUL_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG2_RF_RD_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG2.RF_RD_MUL_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg2_RF_RD_MUL_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg2_RF_RD_MUL_BASE_ADDR,
    },
    { /* 845 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg3,
    },
    { /* 846 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG3_RF_WT_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24c, DX_M1A_NPU0_PE0_DMA_RF_CFG3_RF_WT_MUL_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG3_RF_WT_MUL_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG3_RF_WT_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG3.RF_WT_MUL_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg3_RF_WT_MUL_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg3_RF_WT_MUL_BASE_ADDR,
    },
    { /* 847 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x250, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG4", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg4,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg4,
    },
    { /* 848 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG4_RF_RD_ADD_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x250, DX_M1A_NPU0_PE0_DMA_RF_CFG4_RF_RD_ADD_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG4_RF_RD_ADD_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG4_RF_RD_ADD_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG4.RF_RD_ADD_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg4_RF_RD_ADD_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg4_RF_RD_ADD_BASE_ADDR,
    },
    { /* 849 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x254, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG5", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg5,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg5,
    },
    { /* 850 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG5_RF_WT_ADD_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x254, DX_M1A_NPU0_PE0_DMA_RF_CFG5_RF_WT_ADD_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG5_RF_WT_ADD_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG5_RF_WT_ADD_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG5.RF_WT_ADD_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg5_RF_WT_ADD_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg5_RF_WT_ADD_BASE_ADDR,
    },
    { /* 851 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6,
    },
    { /* 852 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_SIZE,
    },
    { /* 853 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_MODE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_MODE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_MODE,
    },
    { /* 854 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_EN_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_EN_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_ADD_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_ADD_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_EN,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_ADD_EN,
    },
    { /* 855 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_SIZE,
    },
    { /* 856 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_MODE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_MODE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_MODE,
    },
    { /* 857 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_EN_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_EN_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RF_RD_SKIP_MUL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RF_RD_SKIP_MUL_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_EN,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RF_RD_SKIP_MUL_EN,
    },
    { /* 858 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG6_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG6_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6_RESERVED0,
    },
    { /* 859 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x25c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG7", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7,
    },
    { /* 860 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x25c, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_STRIDE,
    },
    { /* 861 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x25c, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_STRIDE,
    },
    { /* 862 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x25c, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_TIME_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_TIME_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_ADD_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_ADD_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_ADD_TIME,
    },
    { /* 863 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x25c, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_TIME_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_TIME_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG7_RF_RD_SKIP_MUL_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG7.RF_RD_SKIP_MUL_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7_RF_RD_SKIP_MUL_TIME,
    },
    { /* 864 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x260, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG8", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg8,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg8,
    },
    { /* 865 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG8_RF_RD_SKIP_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x260, DX_M1A_NPU0_PE0_DMA_RF_CFG8_RF_RD_SKIP_MUL_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG8_RF_RD_SKIP_MUL_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG8_RF_RD_SKIP_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG8.RF_RD_SKIP_MUL_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg8_RF_RD_SKIP_MUL_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg8_RF_RD_SKIP_MUL_BASE_ADDR,
    },
    { /* 866 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x264, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG9", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg9,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg9,
    },
    { /* 867 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG9_RF_WT_SKIP_MUL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x264, DX_M1A_NPU0_PE0_DMA_RF_CFG9_RF_WT_SKIP_MUL_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG9_RF_WT_SKIP_MUL_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG9_RF_WT_SKIP_MUL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG9.RF_WT_SKIP_MUL_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg9_RF_WT_SKIP_MUL_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg9_RF_WT_SKIP_MUL_BASE_ADDR,
    },
    { /* 868 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x268, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG10", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg10,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg10,
    },
    { /* 869 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG10_RF_RD_SKIP_ADD_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x268, DX_M1A_NPU0_PE0_DMA_RF_CFG10_RF_RD_SKIP_ADD_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG10_RF_RD_SKIP_ADD_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG10_RF_RD_SKIP_ADD_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG10.RF_RD_SKIP_ADD_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg10_RF_RD_SKIP_ADD_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg10_RF_RD_SKIP_ADD_BASE_ADDR,
    },
    { /* 870 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x26c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG11", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg11,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg11,
    },
    { /* 871 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG11_RF_WT_SKIP_ADD_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x26c, DX_M1A_NPU0_PE0_DMA_RF_CFG11_RF_WT_SKIP_ADD_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG11_RF_WT_SKIP_ADD_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG11_RF_WT_SKIP_ADD_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG11.RF_WT_SKIP_ADD_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg11_RF_WT_SKIP_ADD_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg11_RF_WT_SKIP_ADD_BASE_ADDR,
    },
    { /* 872 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12,
    },
    { /* 873 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_SIZE,
    },
    { /* 874 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_MODE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_MODE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_MODE,
    },
    { /* 875 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_EN_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_EN_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_GENERAL_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_GENERAL_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_EN,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_GENERAL_EN,
    },
    { /* 876 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_SIZE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_SIZE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_SIZE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_SIZE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_SIZE,
    },
    { /* 877 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_MODE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_MODE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_MODE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_MODE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_MODE,
    },
    { /* 878 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_EN_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_EN_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RF_RD_SE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RF_RD_SE_EN", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_EN,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RF_RD_SE_EN,
    },
    { /* 879 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG12_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RESERVED0_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RESERVED0_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG12_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12.RESERVED0", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RESERVED0,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12_RESERVED0,
    },
    { /* 880 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x274, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG13", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13,
    },
    { /* 881 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x274, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_STRIDE,
    },
    { /* 882 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x274, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_STRIDE_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_STRIDE_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_STRIDE", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_STRIDE,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_STRIDE,
    },
    { /* 883 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x274, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_TIME_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_TIME_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_GENERAL_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_GENERAL_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_GENERAL_TIME,
    },
    { /* 884 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x274, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_TIME_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_TIME_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG13_RF_RD_SE_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG13.RF_RD_SE_TIME", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_TIME,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13_RF_RD_SE_TIME,
    },
    { /* 885 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x278, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG14", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg14,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg14,
    },
    { /* 886 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG14_RF_RD_SE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x278, DX_M1A_NPU0_PE0_DMA_RF_CFG14_RF_RD_SE_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG14_RF_RD_SE_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG14_RF_RD_SE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG14.RF_RD_SE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg14_RF_RD_SE_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg14_RF_RD_SE_BASE_ADDR,
    },
    { /* 887 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x27c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG15", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg15,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg15,
    },
    { /* 888 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG15_RF_WT_SE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x27c, DX_M1A_NPU0_PE0_DMA_RF_CFG15_RF_WT_SE_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG15_RF_WT_SE_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG15_RF_WT_SE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG15.RF_WT_SE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg15_RF_WT_SE_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg15_RF_WT_SE_BASE_ADDR,
    },
    { /* 889 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG16 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x280, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG16", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg16,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg16,
    },
    { /* 890 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG16_RF_RD_GENERAL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x280, DX_M1A_NPU0_PE0_DMA_RF_CFG16_RF_RD_GENERAL_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG16_RF_RD_GENERAL_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG16_RF_RD_GENERAL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG16.RF_RD_GENERAL_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg16_RF_RD_GENERAL_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg16_RF_RD_GENERAL_BASE_ADDR,
    },
    { /* 891 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG17 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x284, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG17", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg17,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg17,
    },
    { /* 892 : INDEX_DX_M1A_NPU0_PE0_DMA_RF_CFG17_RF_WT_GENERAL_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x284, DX_M1A_NPU0_PE0_DMA_RF_CFG17_RF_WT_GENERAL_BASE_ADDR_LEN, DX_M1A_NPU0_PE0_DMA_RF_CFG17_RF_WT_GENERAL_BASE_ADDR_MASK, DX_M1A_NPU0_PE0_DMA_RF_CFG17_RF_WT_GENERAL_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG17.RF_WT_GENERAL_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg17_RF_WT_GENERAL_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg17_RF_WT_GENERAL_BASE_ADDR,
    },
    { /* 893 : INDEX_DX_M1A_NPU0_PRE1_I2C0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.PRE1_I2C0", 
      Read_Dx_m1a_npu0_Pre1_i2c0,
      Write_Dx_m1a_npu0_Pre1_i2c0,
    },
    { /* 894 : INDEX_DX_M1A_NPU0_PRE1_I2C0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, DX_M1A_NPU0_PRE1_I2C0_RESERVED0_LEN, DX_M1A_NPU0_PRE1_I2C0_RESERVED0_MASK, DX_M1A_NPU0_PRE1_I2C0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PRE1_I2C0.RESERVED0", 
      Read_Dx_m1a_npu0_Pre1_i2c0_RESERVED0,
      Write_Dx_m1a_npu0_Pre1_i2c0_RESERVED0,
    },
    { /* 895 : INDEX_DX_M1A_NPU0_PRE1_I2C0_I2C1_LINE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, DX_M1A_NPU0_PRE1_I2C0_I2C1_LINE_OFFSET_LEN, DX_M1A_NPU0_PRE1_I2C0_I2C1_LINE_OFFSET_MASK, DX_M1A_NPU0_PRE1_I2C0_I2C1_LINE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C0.I2C1_LINE_OFFSET", 
      Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_LINE_OFFSET,
      Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_LINE_OFFSET,
    },
    { /* 896 : INDEX_DX_M1A_NPU0_PRE1_I2C0_I2C1_LAST_VALID_BYTE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, DX_M1A_NPU0_PRE1_I2C0_I2C1_LAST_VALID_BYTE_LEN, DX_M1A_NPU0_PRE1_I2C0_I2C1_LAST_VALID_BYTE_MASK, DX_M1A_NPU0_PRE1_I2C0_I2C1_LAST_VALID_BYTE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C0.I2C1_LAST_VALID_BYTE", 
      Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_LAST_VALID_BYTE,
      Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_LAST_VALID_BYTE,
    },
    { /* 897 : INDEX_DX_M1A_NPU0_PRE1_I2C0_I2C1_RQST_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, DX_M1A_NPU0_PRE1_I2C0_I2C1_RQST_NUM_LEN, DX_M1A_NPU0_PRE1_I2C0_I2C1_RQST_NUM_MASK, DX_M1A_NPU0_PRE1_I2C0_I2C1_RQST_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C0.I2C1_RQST_NUM", 
      Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_RQST_NUM,
      Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_RQST_NUM,
    },
    { /* 898 : INDEX_DX_M1A_NPU0_PRE1_I2C0_I2C1_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, DX_M1A_NPU0_PRE1_I2C0_I2C1_EN_LEN, DX_M1A_NPU0_PRE1_I2C0_I2C1_EN_MASK, DX_M1A_NPU0_PRE1_I2C0_I2C1_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C0.I2C1_EN", 
      Read_Dx_m1a_npu0_Pre1_i2c0_I2C1_EN,
      Write_Dx_m1a_npu0_Pre1_i2c0_I2C1_EN,
    },
    { /* 899 : INDEX_DX_M1A_NPU0_PRE1_I2C1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PRE1_I2C1", 
      Read_Dx_m1a_npu0_Pre1_i2c1,
      Write_Dx_m1a_npu0_Pre1_i2c1,
    },
    { /* 900 : INDEX_DX_M1A_NPU0_PRE1_I2C1_I2C1_WRITE_FEATURE_BASE_ADDR_0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28c, DX_M1A_NPU0_PRE1_I2C1_I2C1_WRITE_FEATURE_BASE_ADDR_0_LEN, DX_M1A_NPU0_PRE1_I2C1_I2C1_WRITE_FEATURE_BASE_ADDR_0_MASK, DX_M1A_NPU0_PRE1_I2C1_I2C1_WRITE_FEATURE_BASE_ADDR_0_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C1.I2C1_WRITE_FEATURE_BASE_ADDR_0", 
      Read_Dx_m1a_npu0_Pre1_i2c1_I2C1_WRITE_FEATURE_BASE_ADDR_0,
      Write_Dx_m1a_npu0_Pre1_i2c1_I2C1_WRITE_FEATURE_BASE_ADDR_0,
    },
    { /* 901 : INDEX_DX_M1A_NPU0_PRE1_I2C1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28c, DX_M1A_NPU0_PRE1_I2C1_RESERVED0_LEN, DX_M1A_NPU0_PRE1_I2C1_RESERVED0_MASK, DX_M1A_NPU0_PRE1_I2C1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PRE1_I2C1.RESERVED0", 
      Read_Dx_m1a_npu0_Pre1_i2c1_RESERVED0,
      Write_Dx_m1a_npu0_Pre1_i2c1_RESERVED0,
    },
    { /* 902 : INDEX_DX_M1A_NPU0_PRE1_I2C2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x290, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C2", 
      Read_Dx_m1a_npu0_Pre1_i2c2,
      Write_Dx_m1a_npu0_Pre1_i2c2,
    },
    { /* 903 : INDEX_DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x290, DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_2_LEN, DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_2_MASK, DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_2_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_2", 
      Read_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_2,
      Write_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_2,
    },
    { /* 904 : INDEX_DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x290, DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_1_LEN, DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_1_MASK, DX_M1A_NPU0_PRE1_I2C2_I2C1_WRITE_FEATURE_BASE_ADDR_1_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C2.I2C1_WRITE_FEATURE_BASE_ADDR_1", 
      Read_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_1,
      Write_Dx_m1a_npu0_Pre1_i2c2_I2C1_WRITE_FEATURE_BASE_ADDR_1,
    },
    { /* 905 : INDEX_DX_M1A_NPU0_PRE1_I2C3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x294, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C3", 
      Read_Dx_m1a_npu0_Pre1_i2c3,
      Write_Dx_m1a_npu0_Pre1_i2c3,
    },
    { /* 906 : INDEX_DX_M1A_NPU0_PRE1_I2C3_I2C1_HEIGHT_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x294, DX_M1A_NPU0_PRE1_I2C3_I2C1_HEIGHT_MAX_LEN, DX_M1A_NPU0_PRE1_I2C3_I2C1_HEIGHT_MAX_MASK, DX_M1A_NPU0_PRE1_I2C3_I2C1_HEIGHT_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C3.I2C1_HEIGHT_MAX", 
      Read_Dx_m1a_npu0_Pre1_i2c3_I2C1_HEIGHT_MAX,
      Write_Dx_m1a_npu0_Pre1_i2c3_I2C1_HEIGHT_MAX,
    },
    { /* 907 : INDEX_DX_M1A_NPU0_PRE1_I2C3_I2C1_WIDTH_MAX */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x294, DX_M1A_NPU0_PRE1_I2C3_I2C1_WIDTH_MAX_LEN, DX_M1A_NPU0_PRE1_I2C3_I2C1_WIDTH_MAX_MASK, DX_M1A_NPU0_PRE1_I2C3_I2C1_WIDTH_MAX_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C3.I2C1_WIDTH_MAX", 
      Read_Dx_m1a_npu0_Pre1_i2c3_I2C1_WIDTH_MAX,
      Write_Dx_m1a_npu0_Pre1_i2c3_I2C1_WIDTH_MAX,
    },
    { /* 908 : INDEX_DX_M1A_NPU0_PRE1_FMT0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.PRE1_FMT0", 
      Read_Dx_m1a_npu0_Pre1_fmt0,
      Write_Dx_m1a_npu0_Pre1_fmt0,
    },
    { /* 909 : INDEX_DX_M1A_NPU0_PRE1_FMT0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, DX_M1A_NPU0_PRE1_FMT0_RESERVED0_LEN, DX_M1A_NPU0_PRE1_FMT0_RESERVED0_MASK, DX_M1A_NPU0_PRE1_FMT0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PRE1_FMT0.RESERVED0", 
      Read_Dx_m1a_npu0_Pre1_fmt0_RESERVED0,
      Write_Dx_m1a_npu0_Pre1_fmt0_RESERVED0,
    },
    { /* 910 : INDEX_DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_LINE_OPT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_LINE_OPT_LEN, DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_LINE_OPT_MASK, DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_LINE_OPT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_LINE_OPT", 
      Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_LINE_OPT,
      Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_LINE_OPT,
    },
    { /* 911 : INDEX_DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_VALID_NUM_LEN, DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_VALID_NUM_MASK, DX_M1A_NPU0_PRE1_FMT0_FMT1_FIRST_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT0.FMT1_FIRST_VALID_NUM", 
      Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_VALID_NUM,
      Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_FIRST_VALID_NUM,
    },
    { /* 912 : INDEX_DX_M1A_NPU0_PRE1_FMT0_FMT1_CH_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, DX_M1A_NPU0_PRE1_FMT0_FMT1_CH_MODE_LEN, DX_M1A_NPU0_PRE1_FMT0_FMT1_CH_MODE_MASK, DX_M1A_NPU0_PRE1_FMT0_FMT1_CH_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT0.FMT1_CH_MODE", 
      Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_CH_MODE,
      Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_CH_MODE,
    },
    { /* 913 : INDEX_DX_M1A_NPU0_PRE1_FMT0_FMT1_ENABLE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, DX_M1A_NPU0_PRE1_FMT0_FMT1_ENABLE_LEN, DX_M1A_NPU0_PRE1_FMT0_FMT1_ENABLE_MASK, DX_M1A_NPU0_PRE1_FMT0_FMT1_ENABLE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT0.FMT1_ENABLE", 
      Read_Dx_m1a_npu0_Pre1_fmt0_FMT1_ENABLE,
      Write_Dx_m1a_npu0_Pre1_fmt0_FMT1_ENABLE,
    },
    { /* 914 : INDEX_DX_M1A_NPU0_PRE1_FMT1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x29c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT1", 
      Read_Dx_m1a_npu0_Pre1_fmt1,
      Write_Dx_m1a_npu0_Pre1_fmt1,
    },
    { /* 915 : INDEX_DX_M1A_NPU0_PRE1_FMT1_FMT1_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x29c, DX_M1A_NPU0_PRE1_FMT1_FMT1_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PRE1_FMT1_FMT1_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PRE1_FMT1_FMT1_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT1.FMT1_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pre1_fmt1_FMT1_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pre1_fmt1_FMT1_READ_BASE_ADDR,
    },
    { /* 916 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_ADDR_GEN0", 
      Read_Dx_m1a_npu0_Pe1_addr_gen0,
      Write_Dx_m1a_npu0_Pe1_addr_gen0,
    },
    { /* 917 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a0, DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_DEFAULT_F_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_DEFAULT_F_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe1_addr_gen0_PE1_DEFAULT_F_ADDR_GEN_MODE,
    },
    { /* 918 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a0, DX_M1A_NPU0_PE1_ADDR_GEN0_RESERVED0_LEN, DX_M1A_NPU0_PE1_ADDR_GEN0_RESERVED0_MASK, DX_M1A_NPU0_PE1_ADDR_GEN0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_addr_gen0_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_addr_gen0_RESERVED0,
    },
    { /* 919 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_RF_ADDR_GEN_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a0, DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_RF_ADDR_GEN_MAX_NUM_LEN, DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_RF_ADDR_GEN_MAX_NUM_MASK, DX_M1A_NPU0_PE1_ADDR_GEN0_PE1_RF_ADDR_GEN_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN0.PE1_RF_ADDR_GEN_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe1_addr_gen0_PE1_RF_ADDR_GEN_MAX_NUM,
      Write_Dx_m1a_npu0_Pe1_addr_gen0_PE1_RF_ADDR_GEN_MAX_NUM,
    },
    { /* 920 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN1", 
      Read_Dx_m1a_npu0_Pe1_addr_gen1,
      Write_Dx_m1a_npu0_Pe1_addr_gen1,
    },
    { /* 921 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a4, DX_M1A_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_ADDR_GEN1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN1.PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_addr_gen1_PE1_DEFAULT_F_ADDR_GEN_BASE_ADDR,
    },
    { /* 922 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN2", 
      Read_Dx_m1a_npu0_Pe1_addr_gen2,
      Write_Dx_m1a_npu0_Pe1_addr_gen2,
    },
    { /* 923 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a8, DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_SIZE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_SIZE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_SIZE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_SIZE,
      Write_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_SIZE,
    },
    { /* 924 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a8, DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_LEN, DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_MASK, DX_M1A_NPU0_PE1_ADDR_GEN2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN2.PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
      Write_Dx_m1a_npu0_Pe1_addr_gen2_PE1_DEFAULT_F_ADDR_GEN_CNT_MAX_NUM,
    },
    { /* 925 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN3", 
      Read_Dx_m1a_npu0_Pe1_addr_gen3,
      Write_Dx_m1a_npu0_Pe1_addr_gen3,
    },
    { /* 926 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_SURFACE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ac, DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_SURFACE_SIZE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_SURFACE_SIZE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_SURFACE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_SURFACE_SIZE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_SURFACE_SIZE,
      Write_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_SURFACE_SIZE,
    },
    { /* 927 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ac, DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_STRIDE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_STRIDE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN3_PE1_DEFAULT_F_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN3.PE1_DEFAULT_F_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_STRIDE,
      Write_Dx_m1a_npu0_Pe1_addr_gen3_PE1_DEFAULT_F_STRIDE,
    },
    { /* 928 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_ADDR_GEN4", 
      Read_Dx_m1a_npu0_Pe1_addr_gen4,
      Write_Dx_m1a_npu0_Pe1_addr_gen4,
    },
    { /* 929 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_ELEM_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b0, DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_ELEM_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_ELEM_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_ELEM_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_ELEM_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen4_PE1_ELEM_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe1_addr_gen4_PE1_ELEM_ADDR_GEN_MODE,
    },
    { /* 930 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN4_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b0, DX_M1A_NPU0_PE1_ADDR_GEN4_RESERVED0_LEN, DX_M1A_NPU0_PE1_ADDR_GEN4_RESERVED0_MASK, DX_M1A_NPU0_PE1_ADDR_GEN4_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN4.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_addr_gen4_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_addr_gen4_RESERVED0,
    },
    { /* 931 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_DEFAULT_F_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b0, DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_DEFAULT_F_SURFACE_STRIDE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_DEFAULT_F_SURFACE_STRIDE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN4_PE1_DEFAULT_F_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN4.PE1_DEFAULT_F_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen4_PE1_DEFAULT_F_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Pe1_addr_gen4_PE1_DEFAULT_F_SURFACE_STRIDE,
    },
    { /* 932 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN5", 
      Read_Dx_m1a_npu0_Pe1_addr_gen5,
      Write_Dx_m1a_npu0_Pe1_addr_gen5,
    },
    { /* 933 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b4, DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_STRIDE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_STRIDE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_STRIDE,
      Write_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_STRIDE,
    },
    { /* 934 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b4, DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_SIZE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_SIZE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN5_PE1_ELEM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN5.PE1_ELEM_SIZE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_SIZE,
      Write_Dx_m1a_npu0_Pe1_addr_gen5_PE1_ELEM_SIZE,
    },
    { /* 935 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN6", 
      Read_Dx_m1a_npu0_Pe1_addr_gen6,
      Write_Dx_m1a_npu0_Pe1_addr_gen6,
    },
    { /* 936 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b8, DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_STRIDE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_STRIDE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_STRIDE,
    },
    { /* 937 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b8, DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_SIZE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_SIZE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN6_PE1_ELEM_SURFACE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN6.PE1_ELEM_SURFACE_SIZE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_SIZE,
      Write_Dx_m1a_npu0_Pe1_addr_gen6_PE1_ELEM_SURFACE_SIZE,
    },
    { /* 938 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2bc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN7", 
      Read_Dx_m1a_npu0_Pe1_addr_gen7,
      Write_Dx_m1a_npu0_Pe1_addr_gen7,
    },
    { /* 939 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2bc, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_OFFSET_LEN, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_OFFSET_MASK, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE_OFFSET", 
      Read_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE_OFFSET,
      Write_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE_OFFSET,
    },
    { /* 940 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2bc, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE,
    },
    { /* 941 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2bc, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM_LEN, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM_MASK, DX_M1A_NPU0_PE1_ADDR_GEN7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN7.PE1_MUL_ADDR_GEN_MODE2_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM,
      Write_Dx_m1a_npu0_Pe1_addr_gen7_PE1_MUL_ADDR_GEN_MODE2_MAX_NUM,
    },
    { /* 942 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN8", 
      Read_Dx_m1a_npu0_Pe1_addr_gen8,
      Write_Dx_m1a_npu0_Pe1_addr_gen8,
    },
    { /* 943 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c0, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_OFFSET_LEN, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_OFFSET_MASK, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE_OFFSET", 
      Read_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE_OFFSET,
      Write_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE_OFFSET,
    },
    { /* 944 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c0, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE,
    },
    { /* 945 : INDEX_DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c0, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM_LEN, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM_MASK, DX_M1A_NPU0_PE1_ADDR_GEN8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN8.PE1_ADD_ADDR_GEN_MODE2_MAX_NUM", 
      Read_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM,
      Write_Dx_m1a_npu0_Pe1_addr_gen8_PE1_ADD_ADDR_GEN_MODE2_MAX_NUM,
    },
    { /* 946 : INDEX_DX_M1A_NPU0_PE1_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CTRL", 
      Read_Dx_m1a_npu0_Pe1_ctrl,
      Write_Dx_m1a_npu0_Pe1_ctrl,
    },
    { /* 947 : INDEX_DX_M1A_NPU0_PE1_CTRL_PE1_CONV_TYPE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, DX_M1A_NPU0_PE1_CTRL_PE1_CONV_TYPE_LEN, DX_M1A_NPU0_PE1_CTRL_PE1_CONV_TYPE_MASK, DX_M1A_NPU0_PE1_CTRL_PE1_CONV_TYPE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CTRL.PE1_CONV_TYPE", 
      Read_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_TYPE,
      Write_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_TYPE,
    },
    { /* 948 : INDEX_DX_M1A_NPU0_PE1_CTRL_PE1_CONV_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, DX_M1A_NPU0_PE1_CTRL_PE1_CONV_EN_LEN, DX_M1A_NPU0_PE1_CTRL_PE1_CONV_EN_MASK, DX_M1A_NPU0_PE1_CTRL_PE1_CONV_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CTRL.PE1_CONV_EN", 
      Read_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_EN,
      Write_Dx_m1a_npu0_Pe1_ctrl_PE1_CONV_EN,
    },
    { /* 949 : INDEX_DX_M1A_NPU0_PE1_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, DX_M1A_NPU0_PE1_CTRL_RESERVED0_LEN, DX_M1A_NPU0_PE1_CTRL_RESERVED0_MASK, DX_M1A_NPU0_PE1_CTRL_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CTRL.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_ctrl_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_ctrl_RESERVED0,
    },
    { /* 950 : INDEX_DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH_LEN, DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH_MASK, DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_DEPTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_DEPTH", 
      Read_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH,
      Write_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_DEPTH,
    },
    { /* 951 : INDEX_DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN_LEN, DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN_MASK, DX_M1A_NPU0_PE1_CTRL_PE1_SYSTOLIC_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CTRL.PE1_SYSTOLIC_EN", 
      Read_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN,
      Write_Dx_m1a_npu0_Pe1_ctrl_PE1_SYSTOLIC_EN,
    },
    { /* 952 : INDEX_DX_M1A_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, DX_M1A_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM_LEN, DX_M1A_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM_MASK, DX_M1A_NPU0_PE1_CTRL_PE1_SFUIN_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CTRL.PE1_SFUIN_VALID_NUM", 
      Read_Dx_m1a_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM,
      Write_Dx_m1a_npu0_Pe1_ctrl_PE1_SFUIN_VALID_NUM,
    },
    { /* 953 : INDEX_DX_M1A_NPU0_PE1_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG0", 
      Read_Dx_m1a_npu0_Pe1_cfg0,
      Write_Dx_m1a_npu0_Pe1_cfg0,
    },
    { /* 954 : INDEX_DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c8, DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM_LEN, DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM_MASK, DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_NUM", 
      Read_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM,
      Write_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_NUM,
    },
    { /* 955 : INDEX_DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c8, DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD_LEN, DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD_MASK, DX_M1A_NPU0_PE1_CFG0_PE1_LAST_CONV_MOD_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG0.PE1_LAST_CONV_MOD", 
      Read_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD,
      Write_Dx_m1a_npu0_Pe1_cfg0_PE1_LAST_CONV_MOD,
    },
    { /* 956 : INDEX_DX_M1A_NPU0_PE1_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2cc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG1", 
      Read_Dx_m1a_npu0_Pe1_cfg1,
      Write_Dx_m1a_npu0_Pe1_cfg1,
    },
    { /* 957 : INDEX_DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2cc, DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL_LEN, DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL_MASK, DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_CHANNEL", 
      Read_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL,
      Write_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_CHANNEL,
    },
    { /* 958 : INDEX_DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2cc, DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER_LEN, DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER_MASK, DX_M1A_NPU0_PE1_CFG1_PE1_OFEATURE_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG1.PE1_OFEATURE_NUMBER", 
      Read_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER,
      Write_Dx_m1a_npu0_Pe1_cfg1_PE1_OFEATURE_NUMBER,
    },
    { /* 959 : INDEX_DX_M1A_NPU0_PE1_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG2", 
      Read_Dx_m1a_npu0_Pe1_cfg2,
      Write_Dx_m1a_npu0_Pe1_cfg2,
    },
    { /* 960 : INDEX_DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d0, DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH_LEN, DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH_MASK, DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_WIDTH", 
      Read_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH,
      Write_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_WIDTH,
    },
    { /* 961 : INDEX_DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d0, DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT_LEN, DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT_MASK, DX_M1A_NPU0_PE1_CFG2_PE1_OFEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG2.PE1_OFEATURE_HEIGHT", 
      Read_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT,
      Write_Dx_m1a_npu0_Pe1_cfg2_PE1_OFEATURE_HEIGHT,
    },
    { /* 962 : INDEX_DX_M1A_NPU0_PE1_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG3", 
      Read_Dx_m1a_npu0_Pe1_cfg3,
      Write_Dx_m1a_npu0_Pe1_cfg3,
    },
    { /* 963 : INDEX_DX_M1A_NPU0_PE1_CFG3_PE1_OFEATURE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d4, DX_M1A_NPU0_PE1_CFG3_PE1_OFEATURE_SIZE_LEN, DX_M1A_NPU0_PE1_CFG3_PE1_OFEATURE_SIZE_MASK, DX_M1A_NPU0_PE1_CFG3_PE1_OFEATURE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG3.PE1_OFEATURE_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg3_PE1_OFEATURE_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg3_PE1_OFEATURE_SIZE,
    },
    { /* 964 : INDEX_DX_M1A_NPU0_PE1_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG4", 
      Read_Dx_m1a_npu0_Pe1_cfg4,
      Write_Dx_m1a_npu0_Pe1_cfg4,
    },
    { /* 965 : INDEX_DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d8, DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT_LEN, DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT_MASK, DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_HEIGHT", 
      Read_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT,
      Write_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_HEIGHT,
    },
    { /* 966 : INDEX_DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d8, DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_CHANNEL_LEN, DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_CHANNEL_MASK, DX_M1A_NPU0_PE1_CFG4_PE1_FEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG4.PE1_FEATURE_CHANNEL", 
      Read_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_CHANNEL,
      Write_Dx_m1a_npu0_Pe1_cfg4_PE1_FEATURE_CHANNEL,
    },
    { /* 967 : INDEX_DX_M1A_NPU0_PE1_CFG5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2dc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG5", 
      Read_Dx_m1a_npu0_Pe1_cfg5,
      Write_Dx_m1a_npu0_Pe1_cfg5,
    },
    { /* 968 : INDEX_DX_M1A_NPU0_PE1_CFG5_PE1_FILTER_NUMBER */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2dc, DX_M1A_NPU0_PE1_CFG5_PE1_FILTER_NUMBER_LEN, DX_M1A_NPU0_PE1_CFG5_PE1_FILTER_NUMBER_MASK, DX_M1A_NPU0_PE1_CFG5_PE1_FILTER_NUMBER_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG5.PE1_FILTER_NUMBER", 
      Read_Dx_m1a_npu0_Pe1_cfg5_PE1_FILTER_NUMBER,
      Write_Dx_m1a_npu0_Pe1_cfg5_PE1_FILTER_NUMBER,
    },
    { /* 969 : INDEX_DX_M1A_NPU0_PE1_CFG5_PE1_FEATURE_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2dc, DX_M1A_NPU0_PE1_CFG5_PE1_FEATURE_WIDTH_LEN, DX_M1A_NPU0_PE1_CFG5_PE1_FEATURE_WIDTH_MASK, DX_M1A_NPU0_PE1_CFG5_PE1_FEATURE_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG5.PE1_FEATURE_WIDTH", 
      Read_Dx_m1a_npu0_Pe1_cfg5_PE1_FEATURE_WIDTH,
      Write_Dx_m1a_npu0_Pe1_cfg5_PE1_FEATURE_WIDTH,
    },
    { /* 970 : INDEX_DX_M1A_NPU0_PE1_CFG6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG6", 
      Read_Dx_m1a_npu0_Pe1_cfg6,
      Write_Dx_m1a_npu0_Pe1_cfg6,
    },
    { /* 971 : INDEX_DX_M1A_NPU0_PE1_CFG6_PE1_PAD_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, DX_M1A_NPU0_PE1_CFG6_PE1_PAD_MODE_LEN, DX_M1A_NPU0_PE1_CFG6_PE1_PAD_MODE_MASK, DX_M1A_NPU0_PE1_CFG6_PE1_PAD_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG6.PE1_PAD_MODE", 
      Read_Dx_m1a_npu0_Pe1_cfg6_PE1_PAD_MODE,
      Write_Dx_m1a_npu0_Pe1_cfg6_PE1_PAD_MODE,
    },
    { /* 972 : INDEX_DX_M1A_NPU0_PE1_CFG6_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, DX_M1A_NPU0_PE1_CFG6_RESERVED0_LEN, DX_M1A_NPU0_PE1_CFG6_RESERVED0_MASK, DX_M1A_NPU0_PE1_CFG6_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG6.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_cfg6_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_cfg6_RESERVED0,
    },
    { /* 973 : INDEX_DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_WIDTH_LEN, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_WIDTH_MASK, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_WIDTH", 
      Read_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_WIDTH,
      Write_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_WIDTH,
    },
    { /* 974 : INDEX_DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT_LEN, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT_MASK, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_HEIGHT", 
      Read_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT,
      Write_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_HEIGHT,
    },
    { /* 975 : INDEX_DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_CHANNEL_LEN, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_CHANNEL_MASK, DX_M1A_NPU0_PE1_CFG6_PE1_FILTER_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG6.PE1_FILTER_CHANNEL", 
      Read_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_CHANNEL,
      Write_Dx_m1a_npu0_Pe1_cfg6_PE1_FILTER_CHANNEL,
    },
    { /* 976 : INDEX_DX_M1A_NPU0_PE1_CFG7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7", 
      Read_Dx_m1a_npu0_Pe1_cfg7,
      Write_Dx_m1a_npu0_Pe1_cfg7,
    },
    { /* 977 : INDEX_DX_M1A_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE_LEN, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE_MASK, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_TOP_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7.PE1_PAD_TOP_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_TOP_SIZE,
    },
    { /* 978 : INDEX_DX_M1A_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE_LEN, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE_MASK, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_BOTTOM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7.PE1_PAD_BOTTOM_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_BOTTOM_SIZE,
    },
    { /* 979 : INDEX_DX_M1A_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE_LEN, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE_MASK, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_LEFT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7.PE1_PAD_LEFT_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_LEFT_SIZE,
    },
    { /* 980 : INDEX_DX_M1A_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE_LEN, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE_MASK, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_RIGHT_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7.PE1_PAD_RIGHT_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_RIGHT_SIZE,
    },
    { /* 981 : INDEX_DX_M1A_NPU0_PE1_CFG7_PE1_PAD_VALUE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_VALUE_LEN, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_VALUE_MASK, DX_M1A_NPU0_PE1_CFG7_PE1_PAD_VALUE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7.PE1_PAD_VALUE", 
      Read_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_VALUE,
      Write_Dx_m1a_npu0_Pe1_cfg7_PE1_PAD_VALUE,
    },
    { /* 982 : INDEX_DX_M1A_NPU0_PE1_CFG8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e8, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG8", 
      Read_Dx_m1a_npu0_Pe1_cfg8,
      Write_Dx_m1a_npu0_Pe1_cfg8,
    },
    { /* 983 : INDEX_DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_X */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e8, DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_X_LEN, DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_X_MASK, DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_X_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_X", 
      Read_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_X,
      Write_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_X,
    },
    { /* 984 : INDEX_DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_Y */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e8, DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_Y_LEN, DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_Y_MASK, DX_M1A_NPU0_PE1_CFG8_PE1_STRIDE_Y_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG8.PE1_STRIDE_Y", 
      Read_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_Y,
      Write_Dx_m1a_npu0_Pe1_cfg8_PE1_STRIDE_Y,
    },
    { /* 985 : INDEX_DX_M1A_NPU0_PE1_CFG8_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e8, DX_M1A_NPU0_PE1_CFG8_RESERVED0_LEN, DX_M1A_NPU0_PE1_CFG8_RESERVED0_MASK, DX_M1A_NPU0_PE1_CFG8_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG8.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_cfg8_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_cfg8_RESERVED0,
    },
    { /* 986 : INDEX_DX_M1A_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e8, DX_M1A_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET_LEN, DX_M1A_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET_MASK, DX_M1A_NPU0_PE1_CFG8_PE1_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG8.PE1_CHANNEL_OFFSET", 
      Read_Dx_m1a_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET,
      Write_Dx_m1a_npu0_Pe1_cfg8_PE1_CHANNEL_OFFSET,
    },
    { /* 987 : INDEX_DX_M1A_NPU0_PE1_CFG9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ec, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG9", 
      Read_Dx_m1a_npu0_Pe1_cfg9,
      Write_Dx_m1a_npu0_Pe1_cfg9,
    },
    { /* 988 : INDEX_DX_M1A_NPU0_PE1_CFG9_PE1_ELEM_CHANNEL_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ec, DX_M1A_NPU0_PE1_CFG9_PE1_ELEM_CHANNEL_OFFSET_LEN, DX_M1A_NPU0_PE1_CFG9_PE1_ELEM_CHANNEL_OFFSET_MASK, DX_M1A_NPU0_PE1_CFG9_PE1_ELEM_CHANNEL_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG9.PE1_ELEM_CHANNEL_OFFSET", 
      Read_Dx_m1a_npu0_Pe1_cfg9_PE1_ELEM_CHANNEL_OFFSET,
      Write_Dx_m1a_npu0_Pe1_cfg9_PE1_ELEM_CHANNEL_OFFSET,
    },
    { /* 989 : INDEX_DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_X */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ec, DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_X_LEN, DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_X_MASK, DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_X_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_X", 
      Read_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_X,
      Write_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_X,
    },
    { /* 990 : INDEX_DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_Y */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ec, DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_Y_LEN, DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_Y_MASK, DX_M1A_NPU0_PE1_CFG9_PE1_DILATION_Y_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG9.PE1_DILATION_Y", 
      Read_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_Y,
      Write_Dx_m1a_npu0_Pe1_cfg9_PE1_DILATION_Y,
    },
    { /* 991 : INDEX_DX_M1A_NPU0_PE1_CFG9_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ec, DX_M1A_NPU0_PE1_CFG9_RESERVED0_LEN, DX_M1A_NPU0_PE1_CFG9_RESERVED0_MASK, DX_M1A_NPU0_PE1_CFG9_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG9.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_cfg9_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_cfg9_RESERVED0,
    },
    { /* 992 : INDEX_DX_M1A_NPU0_PE1_CFG10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG10", 
      Read_Dx_m1a_npu0_Pe1_cfg10,
      Write_Dx_m1a_npu0_Pe1_cfg10,
    },
    { /* 993 : INDEX_DX_M1A_NPU0_PE1_CFG10_PE1_READ_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f0, DX_M1A_NPU0_PE1_CFG10_PE1_READ_FEATURE_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG10_PE1_READ_FEATURE_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG10_PE1_READ_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG10.PE1_READ_FEATURE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg10_PE1_READ_FEATURE_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg10_PE1_READ_FEATURE_BASE_ADDR,
    },
    { /* 994 : INDEX_DX_M1A_NPU0_PE1_CFG11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG11", 
      Read_Dx_m1a_npu0_Pe1_cfg11,
      Write_Dx_m1a_npu0_Pe1_cfg11,
    },
    { /* 995 : INDEX_DX_M1A_NPU0_PE1_CFG11_PE1_WRITE_FEATURE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f4, DX_M1A_NPU0_PE1_CFG11_PE1_WRITE_FEATURE_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG11_PE1_WRITE_FEATURE_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG11_PE1_WRITE_FEATURE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG11.PE1_WRITE_FEATURE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg11_PE1_WRITE_FEATURE_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg11_PE1_WRITE_FEATURE_BASE_ADDR,
    },
    { /* 996 : INDEX_DX_M1A_NPU0_PE1_CFG12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG12", 
      Read_Dx_m1a_npu0_Pe1_cfg12,
      Write_Dx_m1a_npu0_Pe1_cfg12,
    },
    { /* 997 : INDEX_DX_M1A_NPU0_PE1_CFG12_PE1_READ_WEIGHT_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f8, DX_M1A_NPU0_PE1_CFG12_PE1_READ_WEIGHT_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG12_PE1_READ_WEIGHT_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG12_PE1_READ_WEIGHT_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG12.PE1_READ_WEIGHT_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg12_PE1_READ_WEIGHT_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg12_PE1_READ_WEIGHT_BASE_ADDR,
    },
    { /* 998 : INDEX_DX_M1A_NPU0_PE1_CFG13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2fc, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG13", 
      Read_Dx_m1a_npu0_Pe1_cfg13,
      Write_Dx_m1a_npu0_Pe1_cfg13,
    },
    { /* 999 : INDEX_DX_M1A_NPU0_PE1_CFG13_PE1_ELEM_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2fc, DX_M1A_NPU0_PE1_CFG13_PE1_ELEM_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG13_PE1_ELEM_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG13_PE1_ELEM_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG13.PE1_ELEM_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg13_PE1_ELEM_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg13_PE1_ELEM_READ_BASE_ADDR,
    },
    { /* 1000 : INDEX_DX_M1A_NPU0_PE1_CFG14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x300, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG14", 
      Read_Dx_m1a_npu0_Pe1_cfg14,
      Write_Dx_m1a_npu0_Pe1_cfg14,
    },
    { /* 1001 : INDEX_DX_M1A_NPU0_PE1_CFG14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x300, DX_M1A_NPU0_PE1_CFG14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG14.PE1_MUL_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg14_PE1_MUL_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 1002 : INDEX_DX_M1A_NPU0_PE1_CFG15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x304, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG15", 
      Read_Dx_m1a_npu0_Pe1_cfg15,
      Write_Dx_m1a_npu0_Pe1_cfg15,
    },
    { /* 1003 : INDEX_DX_M1A_NPU0_PE1_CFG15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x304, DX_M1A_NPU0_PE1_CFG15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG15.PE1_ADD_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg15_PE1_ADD_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 1004 : INDEX_DX_M1A_NPU0_PE1_CFG16 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x308, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG16", 
      Read_Dx_m1a_npu0_Pe1_cfg16,
      Write_Dx_m1a_npu0_Pe1_cfg16,
    },
    { /* 1005 : INDEX_DX_M1A_NPU0_PE1_CFG16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x308, DX_M1A_NPU0_PE1_CFG16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG16.PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg16_PE1_SKIP_MUL_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 1006 : INDEX_DX_M1A_NPU0_PE1_CFG17 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x30c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG17", 
      Read_Dx_m1a_npu0_Pe1_cfg17,
      Write_Dx_m1a_npu0_Pe1_cfg17,
    },
    { /* 1007 : INDEX_DX_M1A_NPU0_PE1_CFG17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x30c, DX_M1A_NPU0_PE1_CFG17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG17.PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg17_PE1_SKIP_ADD_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 1008 : INDEX_DX_M1A_NPU0_PE1_CFG18 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x310, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG18", 
      Read_Dx_m1a_npu0_Pe1_cfg18,
      Write_Dx_m1a_npu0_Pe1_cfg18,
    },
    { /* 1009 : INDEX_DX_M1A_NPU0_PE1_CFG18_PE1_SE_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x310, DX_M1A_NPU0_PE1_CFG18_PE1_SE_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG18_PE1_SE_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG18_PE1_SE_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG18.PE1_SE_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg18_PE1_SE_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg18_PE1_SE_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 1010 : INDEX_DX_M1A_NPU0_PE1_CFG19 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x314, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG19", 
      Read_Dx_m1a_npu0_Pe1_cfg19,
      Write_Dx_m1a_npu0_Pe1_cfg19,
    },
    { /* 1011 : INDEX_DX_M1A_NPU0_PE1_CFG19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x314, DX_M1A_NPU0_PE1_CFG19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG19.PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg19_PE1_GENERAL_ADDR_GEN_READ_BASE_ADDR,
    },
    { /* 1012 : INDEX_DX_M1A_NPU0_PE1_CFG20 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x318, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG20", 
      Read_Dx_m1a_npu0_Pe1_cfg20,
      Write_Dx_m1a_npu0_Pe1_cfg20,
    },
    { /* 1013 : INDEX_DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_MODE1_LINE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x318, DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_MODE1_LINE_SIZE_LEN, DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_MODE1_LINE_SIZE_MASK, DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_MODE1_LINE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_MODE1_LINE_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_MODE1_LINE_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_MODE1_LINE_SIZE,
    },
    { /* 1014 : INDEX_DX_M1A_NPU0_PE1_CFG20_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x318, DX_M1A_NPU0_PE1_CFG20_RESERVED0_LEN, DX_M1A_NPU0_PE1_CFG20_RESERVED0_MASK, DX_M1A_NPU0_PE1_CFG20_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG20.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_cfg20_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_cfg20_RESERVED0,
    },
    { /* 1015 : INDEX_DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_GEN_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x318, DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_GEN_MODE_LEN, DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_GEN_MODE_MASK, DX_M1A_NPU0_PE1_CFG20_PE1_WF_ADDR_GEN_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG20.PE1_WF_ADDR_GEN_MODE", 
      Read_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_GEN_MODE,
      Write_Dx_m1a_npu0_Pe1_cfg20_PE1_WF_ADDR_GEN_MODE,
    },
    { /* 1016 : INDEX_DX_M1A_NPU0_PE1_CFG21 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x31c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG21", 
      Read_Dx_m1a_npu0_Pe1_cfg21,
      Write_Dx_m1a_npu0_Pe1_cfg21,
    },
    { /* 1017 : INDEX_DX_M1A_NPU0_PE1_CFG21_PE1_WF_ADDR_MODE1_LINE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x31c, DX_M1A_NPU0_PE1_CFG21_PE1_WF_ADDR_MODE1_LINE_STRIDE_LEN, DX_M1A_NPU0_PE1_CFG21_PE1_WF_ADDR_MODE1_LINE_STRIDE_MASK, DX_M1A_NPU0_PE1_CFG21_PE1_WF_ADDR_MODE1_LINE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG21.PE1_WF_ADDR_MODE1_LINE_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_cfg21_PE1_WF_ADDR_MODE1_LINE_STRIDE,
      Write_Dx_m1a_npu0_Pe1_cfg21_PE1_WF_ADDR_MODE1_LINE_STRIDE,
    },
    { /* 1018 : INDEX_DX_M1A_NPU0_PE1_CFG22 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x320, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG22", 
      Read_Dx_m1a_npu0_Pe1_cfg22,
      Write_Dx_m1a_npu0_Pe1_cfg22,
    },
    { /* 1019 : INDEX_DX_M1A_NPU0_PE1_CFG22_PE1_WF_ADDR_SURFACE_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x320, DX_M1A_NPU0_PE1_CFG22_PE1_WF_ADDR_SURFACE_SIZE_LEN, DX_M1A_NPU0_PE1_CFG22_PE1_WF_ADDR_SURFACE_SIZE_MASK, DX_M1A_NPU0_PE1_CFG22_PE1_WF_ADDR_SURFACE_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG22.PE1_WF_ADDR_SURFACE_SIZE", 
      Read_Dx_m1a_npu0_Pe1_cfg22_PE1_WF_ADDR_SURFACE_SIZE,
      Write_Dx_m1a_npu0_Pe1_cfg22_PE1_WF_ADDR_SURFACE_SIZE,
    },
    { /* 1020 : INDEX_DX_M1A_NPU0_PE1_CFG23 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x324, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG23", 
      Read_Dx_m1a_npu0_Pe1_cfg23,
      Write_Dx_m1a_npu0_Pe1_cfg23,
    },
    { /* 1021 : INDEX_DX_M1A_NPU0_PE1_CFG23_PE1_WF_WRITE_CNT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x324, DX_M1A_NPU0_PE1_CFG23_PE1_WF_WRITE_CNT_LEN, DX_M1A_NPU0_PE1_CFG23_PE1_WF_WRITE_CNT_MASK, DX_M1A_NPU0_PE1_CFG23_PE1_WF_WRITE_CNT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG23.PE1_WF_WRITE_CNT", 
      Read_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_WRITE_CNT,
      Write_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_WRITE_CNT,
    },
    { /* 1022 : INDEX_DX_M1A_NPU0_PE1_CFG23_PE1_WF_ADDR_SURFACE_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x324, DX_M1A_NPU0_PE1_CFG23_PE1_WF_ADDR_SURFACE_STRIDE_LEN, DX_M1A_NPU0_PE1_CFG23_PE1_WF_ADDR_SURFACE_STRIDE_MASK, DX_M1A_NPU0_PE1_CFG23_PE1_WF_ADDR_SURFACE_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG23.PE1_WF_ADDR_SURFACE_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_ADDR_SURFACE_STRIDE,
      Write_Dx_m1a_npu0_Pe1_cfg23_PE1_WF_ADDR_SURFACE_STRIDE,
    },
    { /* 1023 : INDEX_DX_M1A_NPU0_PE1_CFG24 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x328, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG24", 
      Read_Dx_m1a_npu0_Pe1_cfg24,
      Write_Dx_m1a_npu0_Pe1_cfg24,
    },
    { /* 1024 : INDEX_DX_M1A_NPU0_PE1_CFG24_PE1_WF_SRC1_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x328, DX_M1A_NPU0_PE1_CFG24_PE1_WF_SRC1_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_CFG24_PE1_WF_SRC1_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_CFG24_PE1_WF_SRC1_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG24.PE1_WF_SRC1_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_cfg24_PE1_WF_SRC1_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_cfg24_PE1_WF_SRC1_BASE_ADDR,
    },
    { /* 1025 : INDEX_DX_M1A_NPU0_PE1_CFG25 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x32c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG25", 
      Read_Dx_m1a_npu0_Pe1_cfg25,
      Write_Dx_m1a_npu0_Pe1_cfg25,
    },
    { /* 1026 : INDEX_DX_M1A_NPU0_PE1_CFG25_PE1_SFU_OUT_DATA_VALID_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x32c, DX_M1A_NPU0_PE1_CFG25_PE1_SFU_OUT_DATA_VALID_NUM_LEN, DX_M1A_NPU0_PE1_CFG25_PE1_SFU_OUT_DATA_VALID_NUM_MASK, DX_M1A_NPU0_PE1_CFG25_PE1_SFU_OUT_DATA_VALID_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG25.PE1_SFU_OUT_DATA_VALID_NUM", 
      Read_Dx_m1a_npu0_Pe1_cfg25_PE1_SFU_OUT_DATA_VALID_NUM,
      Write_Dx_m1a_npu0_Pe1_cfg25_PE1_SFU_OUT_DATA_VALID_NUM,
    },
    { /* 1027 : INDEX_DX_M1A_NPU0_PE1_CFG25_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x32c, DX_M1A_NPU0_PE1_CFG25_RESERVED1_LEN, DX_M1A_NPU0_PE1_CFG25_RESERVED1_MASK, DX_M1A_NPU0_PE1_CFG25_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG25.RESERVED1", 
      Read_Dx_m1a_npu0_Pe1_cfg25_RESERVED1,
      Write_Dx_m1a_npu0_Pe1_cfg25_RESERVED1,
    },
    { /* 1028 : INDEX_DX_M1A_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_SHIFT_LEN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x32c, DX_M1A_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_SHIFT_LEN_LEN, DX_M1A_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_SHIFT_LEN_MASK, DX_M1A_NPU0_PE1_CFG25_PE1_ST_ADDR_GEN_SHIFT_LEN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG25.PE1_ST_ADDR_GEN_SHIFT_LEN", 
      Read_Dx_m1a_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_SHIFT_LEN,
      Write_Dx_m1a_npu0_Pe1_cfg25_PE1_ST_ADDR_GEN_SHIFT_LEN,
    },
    { /* 1029 : INDEX_DX_M1A_NPU0_PE1_CFG25_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x32c, DX_M1A_NPU0_PE1_CFG25_RESERVED0_LEN, DX_M1A_NPU0_PE1_CFG25_RESERVED0_MASK, DX_M1A_NPU0_PE1_CFG25_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG25.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_cfg25_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_cfg25_RESERVED0,
    },
    { /* 1030 : INDEX_DX_M1A_NPU0_PE1_CFG26 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x330, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG26", 
      Read_Dx_m1a_npu0_Pe1_cfg26,
      Write_Dx_m1a_npu0_Pe1_cfg26,
    },
    { /* 1031 : INDEX_DX_M1A_NPU0_PE1_CFG26_PE1_ST_ADDR_GEN_MUL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x330, DX_M1A_NPU0_PE1_CFG26_PE1_ST_ADDR_GEN_MUL_LEN, DX_M1A_NPU0_PE1_CFG26_PE1_ST_ADDR_GEN_MUL_MASK, DX_M1A_NPU0_PE1_CFG26_PE1_ST_ADDR_GEN_MUL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG26.PE1_ST_ADDR_GEN_MUL", 
      Read_Dx_m1a_npu0_Pe1_cfg26_PE1_ST_ADDR_GEN_MUL,
      Write_Dx_m1a_npu0_Pe1_cfg26_PE1_ST_ADDR_GEN_MUL,
    },
    { /* 1032 : INDEX_DX_M1A_NPU0_PE1_CFG26_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x330, DX_M1A_NPU0_PE1_CFG26_RESERVED0_LEN, DX_M1A_NPU0_PE1_CFG26_RESERVED0_MASK, DX_M1A_NPU0_PE1_CFG26_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_CFG26.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_cfg26_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_cfg26_RESERVED0,
    },
    { /* 1033 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_VMEM_CFG0", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0,
    },
    { /* 1034 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_IN_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_IN_BUFF", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_IN_BUFF,
    },
    { /* 1035 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED3_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED3_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED3_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED3", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED3,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED3,
    },
    { /* 1036 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_WEIGHT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_WEIGHT_BUFF", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_WEIGHT_BUFF,
    },
    { /* 1037 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED2_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED2_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED2_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED2", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED2,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED2,
    },
    { /* 1038 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_OUT_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_OUT_BUFF", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_OUT_BUFF,
    },
    { /* 1039 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED1_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED1_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED1", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED1,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED1,
    },
    { /* 1040 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_PE1_START_NO_ELEM_BUFF_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.PE1_START_NO_ELEM_BUFF", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_PE1_START_NO_ELEM_BUFF,
    },
    { /* 1041 : INDEX_DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE1_VMEM_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_VMEM_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0_RESERVED0,
    },
    { /* 1042 : INDEX_DX_M1A_NPU0_REDUCE1_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.REDUCE1_CFG0", 
      Read_Dx_m1a_npu0_Reduce1_cfg0,
      Write_Dx_m1a_npu0_Reduce1_cfg0,
    },
    { /* 1043 : INDEX_DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_SIZE_LEN, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_SIZE_MASK, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_SIZE", 
      Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_SIZE,
      Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_SIZE,
    },
    { /* 1044 : INDEX_DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_NUM_LEN, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_NUM_MASK, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_CHANNEL_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_CHANNEL_NUM", 
      Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_NUM,
      Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_CHANNEL_NUM,
    },
    { /* 1045 : INDEX_DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_MODE_LEN, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_MODE_MASK, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_MODE", 
      Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_MODE,
      Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_MODE,
    },
    { /* 1046 : INDEX_DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_EN_LEN, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_EN_MASK, DX_M1A_NPU0_REDUCE1_CFG0_REDUCE1_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG0.REDUCE1_EN", 
      Read_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_EN,
      Write_Dx_m1a_npu0_Reduce1_cfg0_REDUCE1_EN,
    },
    { /* 1047 : INDEX_DX_M1A_NPU0_REDUCE1_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, DX_M1A_NPU0_REDUCE1_CFG0_RESERVED0_LEN, DX_M1A_NPU0_REDUCE1_CFG0_RESERVED0_MASK, DX_M1A_NPU0_REDUCE1_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.REDUCE1_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Reduce1_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Reduce1_cfg0_RESERVED0,
    },
    { /* 1048 : INDEX_DX_M1A_NPU0_REDUCE1_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x33c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG1", 
      Read_Dx_m1a_npu0_Reduce1_cfg1,
      Write_Dx_m1a_npu0_Reduce1_cfg1,
    },
    { /* 1049 : INDEX_DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_WIN_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x33c, DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_WIN_NUM_LEN, DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_WIN_NUM_MASK, DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_WIN_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_WIN_NUM", 
      Read_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_WIN_NUM,
      Write_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_WIN_NUM,
    },
    { /* 1050 : INDEX_DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_CNT_MAX_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x33c, DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_CNT_MAX_NUM_LEN, DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_CNT_MAX_NUM_MASK, DX_M1A_NPU0_REDUCE1_CFG1_REDUCE1_CNT_MAX_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG1.REDUCE1_CNT_MAX_NUM", 
      Read_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_CNT_MAX_NUM,
      Write_Dx_m1a_npu0_Reduce1_cfg1_REDUCE1_CNT_MAX_NUM,
    },
    { /* 1051 : INDEX_DX_M1A_NPU0_REDUCE1_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x340, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG2", 
      Read_Dx_m1a_npu0_Reduce1_cfg2,
      Write_Dx_m1a_npu0_Reduce1_cfg2,
    },
    { /* 1052 : INDEX_DX_M1A_NPU0_REDUCE1_CFG2_REDUCE1_RD_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x340, DX_M1A_NPU0_REDUCE1_CFG2_REDUCE1_RD_BASE_ADDR_LEN, DX_M1A_NPU0_REDUCE1_CFG2_REDUCE1_RD_BASE_ADDR_MASK, DX_M1A_NPU0_REDUCE1_CFG2_REDUCE1_RD_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG2.REDUCE1_RD_BASE_ADDR", 
      Read_Dx_m1a_npu0_Reduce1_cfg2_REDUCE1_RD_BASE_ADDR,
      Write_Dx_m1a_npu0_Reduce1_cfg2_REDUCE1_RD_BASE_ADDR,
    },
    { /* 1053 : INDEX_DX_M1A_NPU0_REDUCE1_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x344, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG3", 
      Read_Dx_m1a_npu0_Reduce1_cfg3,
      Write_Dx_m1a_npu0_Reduce1_cfg3,
    },
    { /* 1054 : INDEX_DX_M1A_NPU0_REDUCE1_CFG3_REDUCE1_WR_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x344, DX_M1A_NPU0_REDUCE1_CFG3_REDUCE1_WR_BASE_ADDR_LEN, DX_M1A_NPU0_REDUCE1_CFG3_REDUCE1_WR_BASE_ADDR_MASK, DX_M1A_NPU0_REDUCE1_CFG3_REDUCE1_WR_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG3.REDUCE1_WR_BASE_ADDR", 
      Read_Dx_m1a_npu0_Reduce1_cfg3_REDUCE1_WR_BASE_ADDR,
      Write_Dx_m1a_npu0_Reduce1_cfg3_REDUCE1_WR_BASE_ADDR,
    },
    { /* 1055 : INDEX_DX_M1A_NPU0_PE1_DMA_CTRL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_CTRL", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl,
    },
    { /* 1056 : INDEX_DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_START_OP_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_START_OP_EN_LEN, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_START_OP_EN_MASK, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_START_OP_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_START_OP_EN", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_START_OP_EN,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_START_OP_EN,
    },
    { /* 1057 : INDEX_DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_DMA_CTRL_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_DMA_CTRL_MODE_LEN, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_DMA_CTRL_MODE_MASK, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_DMA_CTRL_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_DMA_CTRL_MODE", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_DMA_CTRL_MODE,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_DMA_CTRL_MODE,
    },
    { /* 1058 : INDEX_DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_BIT_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_BIT_WIDTH_LEN, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_BIT_WIDTH_MASK, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_BIT_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_BIT_WIDTH", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_BIT_WIDTH,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_BIT_WIDTH,
    },
    { /* 1059 : INDEX_DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_DUMMY_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_DUMMY_MODE_LEN, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_DUMMY_MODE_MASK, DX_M1A_NPU0_PE1_DMA_CTRL_VMEM1_WEIGHT_DUMMY_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_CTRL.VMEM1_WEIGHT_DUMMY_MODE", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_DUMMY_MODE,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl_VMEM1_WEIGHT_DUMMY_MODE,
    },
    { /* 1060 : INDEX_DX_M1A_NPU0_PE1_DMA_CTRL_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, DX_M1A_NPU0_PE1_DMA_CTRL_RESERVED0_LEN, DX_M1A_NPU0_PE1_DMA_CTRL_RESERVED0_MASK, DX_M1A_NPU0_PE1_DMA_CTRL_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_DMA_CTRL.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl_RESERVED0,
    },
    { /* 1061 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0,
    },
    { /* 1062 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SIZE_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SIZE_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SIZE", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SIZE,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SIZE,
    },
    { /* 1063 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_TIME_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_TIME_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_TIME", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_TIME,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_TIME,
    },
    { /* 1064 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_MODE_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_MODE_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_MODE", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_MODE,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_MODE,
    },
    { /* 1065 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_EN_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_EN_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_EN", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_EN,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_EN,
    },
    { /* 1066 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SRC */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SRC_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SRC_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_VMEM1_RD_ELEM_SRC_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.VMEM1_RD_ELEM_SRC", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SRC,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_VMEM1_RD_ELEM_SRC,
    },
    { /* 1067 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0_RESERVED0,
    },
    { /* 1068 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x350, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg1,
    },
    { /* 1069 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG1_VMEM1_RD_ELEM_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x350, DX_M1A_NPU0_PE1_DMA_ELEM_CFG1_VMEM1_RD_ELEM_STRIDE_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG1_VMEM1_RD_ELEM_STRIDE_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG1_VMEM1_RD_ELEM_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG1.VMEM1_RD_ELEM_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg1_VMEM1_RD_ELEM_STRIDE,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg1_VMEM1_RD_ELEM_STRIDE,
    },
    { /* 1070 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x354, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg2,
    },
    { /* 1071 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG2_VMEM1_RD_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x354, DX_M1A_NPU0_PE1_DMA_ELEM_CFG2_VMEM1_RD_ELEM_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG2_VMEM1_RD_ELEM_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG2_VMEM1_RD_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG2.VMEM1_RD_ELEM_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg2_VMEM1_RD_ELEM_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg2_VMEM1_RD_ELEM_BASE_ADDR,
    },
    { /* 1072 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x358, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg3,
    },
    { /* 1073 : INDEX_DX_M1A_NPU0_PE1_DMA_ELEM_CFG3_VMEM1_WT_ELEM_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x358, DX_M1A_NPU0_PE1_DMA_ELEM_CFG3_VMEM1_WT_ELEM_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_ELEM_CFG3_VMEM1_WT_ELEM_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_ELEM_CFG3_VMEM1_WT_ELEM_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG3.VMEM1_WT_ELEM_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg3_VMEM1_WT_ELEM_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg3_VMEM1_WT_ELEM_BASE_ADDR,
    },
    { /* 1074 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x35c, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_W_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg0,
    },
    { /* 1075 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x35c, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_TIME_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_TIME_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_TIME", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_TIME,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_TIME,
    },
    { /* 1076 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x35c, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_MODE_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_MODE_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_MODE", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_MODE,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_MODE,
    },
    { /* 1077 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x35c, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_EN_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_EN_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG0_VMEM1_RD_W_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG0.VMEM1_RD_W_EN", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_EN,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_VMEM1_RD_W_EN,
    },
    { /* 1078 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x35c, DX_M1A_NPU0_PE1_DMA_W_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg0_RESERVED0,
    },
    { /* 1079 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x360, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg1,
    },
    { /* 1080 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x360, DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_STRIDE_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_STRIDE_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_STRIDE,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_STRIDE,
    },
    { /* 1081 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x360, DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_SIZE_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_SIZE_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG1_VMEM1_RD_W_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG1.VMEM1_RD_W_SIZE", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_SIZE,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg1_VMEM1_RD_W_SIZE,
    },
    { /* 1082 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x364, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg2,
    },
    { /* 1083 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG2_VMEM1_RD_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x364, DX_M1A_NPU0_PE1_DMA_W_CFG2_VMEM1_RD_W_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG2_VMEM1_RD_W_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG2_VMEM1_RD_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG2.VMEM1_RD_W_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg2_VMEM1_RD_W_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg2_VMEM1_RD_W_BASE_ADDR,
    },
    { /* 1084 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x368, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg3,
    },
    { /* 1085 : INDEX_DX_M1A_NPU0_PE1_DMA_W_CFG3_VMEM1_WT_W_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x368, DX_M1A_NPU0_PE1_DMA_W_CFG3_VMEM1_WT_W_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_W_CFG3_VMEM1_WT_W_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_W_CFG3_VMEM1_WT_W_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG3.VMEM1_WT_W_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg3_VMEM1_WT_W_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg3_VMEM1_WT_W_BASE_ADDR,
    },
    { /* 1086 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0,
    },
    { /* 1087 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SIZE_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SIZE_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SIZE", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SIZE,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SIZE,
    },
    { /* 1088 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_TIME_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_TIME_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_TIME", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_TIME,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_TIME,
    },
    { /* 1089 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_MODE_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_MODE_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_MODE", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_MODE,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_MODE,
    },
    { /* 1090 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_EN_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_EN_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_EN", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_EN,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_EN,
    },
    { /* 1091 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SRC */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SRC_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SRC_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG0_VMEM1_RD_INF_SRC_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0.VMEM1_RD_INF_SRC", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SRC,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0_VMEM1_RD_INF_SRC,
    },
    { /* 1092 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x370, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg1,
    },
    { /* 1093 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG1_VMEM1_RD_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x370, DX_M1A_NPU0_PE1_DMA_INF_CFG1_VMEM1_RD_INF_STRIDE_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG1_VMEM1_RD_INF_STRIDE_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG1_VMEM1_RD_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG1.VMEM1_RD_INF_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg1_VMEM1_RD_INF_STRIDE,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg1_VMEM1_RD_INF_STRIDE,
    },
    { /* 1094 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x374, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg2,
    },
    { /* 1095 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG2_VMEM1_RD_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x374, DX_M1A_NPU0_PE1_DMA_INF_CFG2_VMEM1_RD_INF_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG2_VMEM1_RD_INF_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG2_VMEM1_RD_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG2.VMEM1_RD_INF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg2_VMEM1_RD_INF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg2_VMEM1_RD_INF_BASE_ADDR,
    },
    { /* 1096 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x378, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg3,
    },
    { /* 1097 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG3_VMEM1_WT_INF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x378, DX_M1A_NPU0_PE1_DMA_INF_CFG3_VMEM1_WT_INF_STRIDE_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG3_VMEM1_WT_INF_STRIDE_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG3_VMEM1_WT_INF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG3.VMEM1_WT_INF_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg3_VMEM1_WT_INF_STRIDE,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg3_VMEM1_WT_INF_STRIDE,
    },
    { /* 1098 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x37c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG4", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg4,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg4,
    },
    { /* 1099 : INDEX_DX_M1A_NPU0_PE1_DMA_INF_CFG4_VMEM1_WT_INF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x37c, DX_M1A_NPU0_PE1_DMA_INF_CFG4_VMEM1_WT_INF_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_INF_CFG4_VMEM1_WT_INF_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_INF_CFG4_VMEM1_WT_INF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG4.VMEM1_WT_INF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg4_VMEM1_WT_INF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg4_VMEM1_WT_INF_BASE_ADDR,
    },
    { /* 1100 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0,
    },
    { /* 1101 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_SIZE_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_SIZE_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_SIZE", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_SIZE,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_SIZE,
    },
    { /* 1102 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_TIME */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_TIME_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_TIME_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_TIME_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_TIME", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_TIME,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_TIME,
    },
    { /* 1103 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED1_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED1", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED1,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED1,
    },
    { /* 1104 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_EN_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_EN_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_VMEM1_WT_OUTF_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.VMEM1_WT_OUTF_EN", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_EN,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_VMEM1_WT_OUTF_EN,
    },
    { /* 1105 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0.RESERVED0", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED0,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0_RESERVED0,
    },
    { /* 1106 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x384, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg1,
    },
    { /* 1107 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG1_VMEM1_WT_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x384, DX_M1A_NPU0_PE1_DMA_OUTF_CFG1_VMEM1_WT_OUTF_STRIDE_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG1_VMEM1_WT_OUTF_STRIDE_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG1_VMEM1_WT_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG1.VMEM1_WT_OUTF_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg1_VMEM1_WT_OUTF_STRIDE,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg1_VMEM1_WT_OUTF_STRIDE,
    },
    { /* 1108 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x388, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg2,
    },
    { /* 1109 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG2_VMEM1_WT_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x388, DX_M1A_NPU0_PE1_DMA_OUTF_CFG2_VMEM1_WT_OUTF_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG2_VMEM1_WT_OUTF_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG2_VMEM1_WT_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG2.VMEM1_WT_OUTF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg2_VMEM1_WT_OUTF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg2_VMEM1_WT_OUTF_BASE_ADDR,
    },
    { /* 1110 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x38c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg3,
    },
    { /* 1111 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG3_VMEM1_RD_OUTF_STRIDE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x38c, DX_M1A_NPU0_PE1_DMA_OUTF_CFG3_VMEM1_RD_OUTF_STRIDE_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG3_VMEM1_RD_OUTF_STRIDE_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG3_VMEM1_RD_OUTF_STRIDE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG3.VMEM1_RD_OUTF_STRIDE", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg3_VMEM1_RD_OUTF_STRIDE,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg3_VMEM1_RD_OUTF_STRIDE,
    },
    { /* 1112 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x390, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG4", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg4,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg4,
    },
    { /* 1113 : INDEX_DX_M1A_NPU0_PE1_DMA_OUTF_CFG4_VMEM1_RD_OUTF_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x390, DX_M1A_NPU0_PE1_DMA_OUTF_CFG4_VMEM1_RD_OUTF_BASE_ADDR_LEN, DX_M1A_NPU0_PE1_DMA_OUTF_CFG4_VMEM1_RD_OUTF_BASE_ADDR_MASK, DX_M1A_NPU0_PE1_DMA_OUTF_CFG4_VMEM1_RD_OUTF_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG4.VMEM1_RD_OUTF_BASE_ADDR", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg4_VMEM1_RD_OUTF_BASE_ADDR,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg4_VMEM1_RD_OUTF_BASE_ADDR,
    },
    { /* 1114 : INDEX_DX_M1A_NPU0_PPU_CFG_0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PPU_CFG_0", 
      Read_Dx_m1a_npu0_Ppu_cfg_0,
      Write_Dx_m1a_npu0_Ppu_cfg_0,
    },
    { /* 1115 : INDEX_DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_OFFSET */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_OFFSET_LEN, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_OFFSET_MASK, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_OFFSET_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT_OFFSET", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT_OFFSET,
      Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT_OFFSET,
    },
    { /* 1116 : INDEX_DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_LEN, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_MASK, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_HEIGHT_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_HEIGHT", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT,
      Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_HEIGHT,
    },
    { /* 1117 : INDEX_DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_WIDTH */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_WIDTH_LEN, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_WIDTH_MASK, DX_M1A_NPU0_PPU_CFG_0_PPU_GRID_WIDTH_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_0.PPU_GRID_WIDTH", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_WIDTH,
      Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_GRID_WIDTH,
    },
    { /* 1118 : INDEX_DX_M1A_NPU0_PPU_CFG_0_PPU_VMEM_WRITE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_PPU_VMEM_WRITE_EN_LEN, DX_M1A_NPU0_PPU_CFG_0_PPU_VMEM_WRITE_EN_MASK, DX_M1A_NPU0_PPU_CFG_0_PPU_VMEM_WRITE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_0.PPU_VMEM_WRITE_EN", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_VMEM_WRITE_EN,
      Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_VMEM_WRITE_EN,
    },
    { /* 1119 : INDEX_DX_M1A_NPU0_PPU_CFG_0_PPU_1ST_TILE_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_PPU_1ST_TILE_EN_LEN, DX_M1A_NPU0_PPU_CFG_0_PPU_1ST_TILE_EN_MASK, DX_M1A_NPU0_PPU_CFG_0_PPU_1ST_TILE_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_0.PPU_1ST_TILE_EN", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_1ST_TILE_EN,
      Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_1ST_TILE_EN,
    },
    { /* 1120 : INDEX_DX_M1A_NPU0_PPU_CFG_0_PPU_EN */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_PPU_EN_LEN, DX_M1A_NPU0_PPU_CFG_0_PPU_EN_MASK, DX_M1A_NPU0_PPU_CFG_0_PPU_EN_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_0.PPU_EN", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_PPU_EN,
      Write_Dx_m1a_npu0_Ppu_cfg_0_PPU_EN,
    },
    { /* 1121 : INDEX_DX_M1A_NPU0_PPU_CFG_0_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, DX_M1A_NPU0_PPU_CFG_0_RESERVED0_LEN, DX_M1A_NPU0_PPU_CFG_0_RESERVED0_MASK, DX_M1A_NPU0_PPU_CFG_0_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PPU_CFG_0.RESERVED0", 
      Read_Dx_m1a_npu0_Ppu_cfg_0_RESERVED0,
      Write_Dx_m1a_npu0_Ppu_cfg_0_RESERVED0,
    },
    { /* 1122 : INDEX_DX_M1A_NPU0_PPU_CFG_1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x398, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PPU_CFG_1", 
      Read_Dx_m1a_npu0_Ppu_cfg_1,
      Write_Dx_m1a_npu0_Ppu_cfg_1,
    },
    { /* 1123 : INDEX_DX_M1A_NPU0_PPU_CFG_1_PPU_OUT_FEATURE_CHANNEL */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x398, DX_M1A_NPU0_PPU_CFG_1_PPU_OUT_FEATURE_CHANNEL_LEN, DX_M1A_NPU0_PPU_CFG_1_PPU_OUT_FEATURE_CHANNEL_MASK, DX_M1A_NPU0_PPU_CFG_1_PPU_OUT_FEATURE_CHANNEL_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_1.PPU_OUT_FEATURE_CHANNEL", 
      Read_Dx_m1a_npu0_Ppu_cfg_1_PPU_OUT_FEATURE_CHANNEL,
      Write_Dx_m1a_npu0_Ppu_cfg_1_PPU_OUT_FEATURE_CHANNEL,
    },
    { /* 1124 : INDEX_DX_M1A_NPU0_PPU_CFG_1_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x398, DX_M1A_NPU0_PPU_CFG_1_RESERVED0_LEN, DX_M1A_NPU0_PPU_CFG_1_RESERVED0_MASK, DX_M1A_NPU0_PPU_CFG_1_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PPU_CFG_1.RESERVED0", 
      Read_Dx_m1a_npu0_Ppu_cfg_1_RESERVED0,
      Write_Dx_m1a_npu0_Ppu_cfg_1_RESERVED0,
    },
    { /* 1125 : INDEX_DX_M1A_NPU0_PPU_CFG_1_PPU_ARG_CLASS_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x398, DX_M1A_NPU0_PPU_CFG_1_PPU_ARG_CLASS_NUM_LEN, DX_M1A_NPU0_PPU_CFG_1_PPU_ARG_CLASS_NUM_MASK, DX_M1A_NPU0_PPU_CFG_1_PPU_ARG_CLASS_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_1.PPU_ARG_CLASS_NUM", 
      Read_Dx_m1a_npu0_Ppu_cfg_1_PPU_ARG_CLASS_NUM,
      Write_Dx_m1a_npu0_Ppu_cfg_1_PPU_ARG_CLASS_NUM,
    },
    { /* 1126 : INDEX_DX_M1A_NPU0_PPU_CFG_2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x39c, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_2", 
      Read_Dx_m1a_npu0_Ppu_cfg_2,
      Write_Dx_m1a_npu0_Ppu_cfg_2,
    },
    { /* 1127 : INDEX_DX_M1A_NPU0_PPU_CFG_2_PPU_FILTER_IN_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x39c, DX_M1A_NPU0_PPU_CFG_2_PPU_FILTER_IN_SIZE_LEN, DX_M1A_NPU0_PPU_CFG_2_PPU_FILTER_IN_SIZE_MASK, DX_M1A_NPU0_PPU_CFG_2_PPU_FILTER_IN_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_2.PPU_FILTER_IN_SIZE", 
      Read_Dx_m1a_npu0_Ppu_cfg_2_PPU_FILTER_IN_SIZE,
      Write_Dx_m1a_npu0_Ppu_cfg_2_PPU_FILTER_IN_SIZE,
    },
    { /* 1128 : INDEX_DX_M1A_NPU0_PPU_CFG_2_PPU_ARG_IN_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x39c, DX_M1A_NPU0_PPU_CFG_2_PPU_ARG_IN_SIZE_LEN, DX_M1A_NPU0_PPU_CFG_2_PPU_ARG_IN_SIZE_MASK, DX_M1A_NPU0_PPU_CFG_2_PPU_ARG_IN_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_2.PPU_ARG_IN_SIZE", 
      Read_Dx_m1a_npu0_Ppu_cfg_2_PPU_ARG_IN_SIZE,
      Write_Dx_m1a_npu0_Ppu_cfg_2_PPU_ARG_IN_SIZE,
    },
    { /* 1129 : INDEX_DX_M1A_NPU0_PPU_CFG_3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a0, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_3", 
      Read_Dx_m1a_npu0_Ppu_cfg_3,
      Write_Dx_m1a_npu0_Ppu_cfg_3,
    },
    { /* 1130 : INDEX_DX_M1A_NPU0_PPU_CFG_3_PPU_FILTER_THR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a0, DX_M1A_NPU0_PPU_CFG_3_PPU_FILTER_THR_LEN, DX_M1A_NPU0_PPU_CFG_3_PPU_FILTER_THR_MASK, DX_M1A_NPU0_PPU_CFG_3_PPU_FILTER_THR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_3.PPU_FILTER_THR", 
      Read_Dx_m1a_npu0_Ppu_cfg_3_PPU_FILTER_THR,
      Write_Dx_m1a_npu0_Ppu_cfg_3_PPU_FILTER_THR,
    },
    { /* 1131 : INDEX_DX_M1A_NPU0_PPU_CFG_4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, 32, 0xffffffff, 0x0, -1, true, true, true, true,
      "DX_M1A_NPU0.PPU_CFG_4", 
      Read_Dx_m1a_npu0_Ppu_cfg_4,
      Write_Dx_m1a_npu0_Ppu_cfg_4,
    },
    { /* 1132 : INDEX_DX_M1A_NPU0_PPU_CFG_4_PPU_ANCHOR_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_PPU_ANCHOR_NUM_LEN, DX_M1A_NPU0_PPU_CFG_4_PPU_ANCHOR_NUM_MASK, DX_M1A_NPU0_PPU_CFG_4_PPU_ANCHOR_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_4.PPU_ANCHOR_NUM", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_ANCHOR_NUM,
      Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_ANCHOR_NUM,
    },
    { /* 1133 : INDEX_DX_M1A_NPU0_PPU_CFG_4_PPU_CONV_NUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_PPU_CONV_NUM_LEN, DX_M1A_NPU0_PPU_CFG_4_PPU_CONV_NUM_MASK, DX_M1A_NPU0_PPU_CFG_4_PPU_CONV_NUM_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_4.PPU_CONV_NUM", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_CONV_NUM,
      Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_CONV_NUM,
    },
    { /* 1134 : INDEX_DX_M1A_NPU0_PPU_CFG_4_PPU_WRITE_ADDR_RST */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_PPU_WRITE_ADDR_RST_LEN, DX_M1A_NPU0_PPU_CFG_4_PPU_WRITE_ADDR_RST_MASK, DX_M1A_NPU0_PPU_CFG_4_PPU_WRITE_ADDR_RST_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_4.PPU_WRITE_ADDR_RST", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_WRITE_ADDR_RST,
      Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_WRITE_ADDR_RST,
    },
    { /* 1135 : INDEX_DX_M1A_NPU0_PPU_CFG_4_PPU_DATA_SIZE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_PPU_DATA_SIZE_LEN, DX_M1A_NPU0_PPU_CFG_4_PPU_DATA_SIZE_MASK, DX_M1A_NPU0_PPU_CFG_4_PPU_DATA_SIZE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_4.PPU_DATA_SIZE", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_DATA_SIZE,
      Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_DATA_SIZE,
    },
    { /* 1136 : INDEX_DX_M1A_NPU0_PPU_CFG_4_PPU_LABEL_ON */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_PPU_LABEL_ON_LEN, DX_M1A_NPU0_PPU_CFG_4_PPU_LABEL_ON_MASK, DX_M1A_NPU0_PPU_CFG_4_PPU_LABEL_ON_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_4.PPU_LABEL_ON", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_LABEL_ON,
      Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_LABEL_ON,
    },
    { /* 1137 : INDEX_DX_M1A_NPU0_PPU_CFG_4_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_RESERVED0_LEN, DX_M1A_NPU0_PPU_CFG_4_RESERVED0_MASK, DX_M1A_NPU0_PPU_CFG_4_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PPU_CFG_4.RESERVED0", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_RESERVED0,
      Write_Dx_m1a_npu0_Ppu_cfg_4_RESERVED0,
    },
    { /* 1138 : INDEX_DX_M1A_NPU0_PPU_CFG_4_PPU_FILTER_MODE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, DX_M1A_NPU0_PPU_CFG_4_PPU_FILTER_MODE_LEN, DX_M1A_NPU0_PPU_CFG_4_PPU_FILTER_MODE_MASK, DX_M1A_NPU0_PPU_CFG_4_PPU_FILTER_MODE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_4.PPU_FILTER_MODE", 
      Read_Dx_m1a_npu0_Ppu_cfg_4_PPU_FILTER_MODE,
      Write_Dx_m1a_npu0_Ppu_cfg_4_PPU_FILTER_MODE,
    },
    { /* 1139 : INDEX_DX_M1A_NPU0_PPU_CFG_6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a8, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_6", 
      Read_Dx_m1a_npu0_Ppu_cfg_6,
      Write_Dx_m1a_npu0_Ppu_cfg_6,
    },
    { /* 1140 : INDEX_DX_M1A_NPU0_PPU_CFG_6_PPU_READ_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a8, DX_M1A_NPU0_PPU_CFG_6_PPU_READ_BASE_ADDR_LEN, DX_M1A_NPU0_PPU_CFG_6_PPU_READ_BASE_ADDR_MASK, DX_M1A_NPU0_PPU_CFG_6_PPU_READ_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_6.PPU_READ_BASE_ADDR", 
      Read_Dx_m1a_npu0_Ppu_cfg_6_PPU_READ_BASE_ADDR,
      Write_Dx_m1a_npu0_Ppu_cfg_6_PPU_READ_BASE_ADDR,
    },
    { /* 1141 : INDEX_DX_M1A_NPU0_PPU_CFG_7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3ac, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_7", 
      Read_Dx_m1a_npu0_Ppu_cfg_7,
      Write_Dx_m1a_npu0_Ppu_cfg_7,
    },
    { /* 1142 : INDEX_DX_M1A_NPU0_PPU_CFG_7_PPU_WRITE_BASE_ADDR */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3ac, DX_M1A_NPU0_PPU_CFG_7_PPU_WRITE_BASE_ADDR_LEN, DX_M1A_NPU0_PPU_CFG_7_PPU_WRITE_BASE_ADDR_MASK, DX_M1A_NPU0_PPU_CFG_7_PPU_WRITE_BASE_ADDR_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_7.PPU_WRITE_BASE_ADDR", 
      Read_Dx_m1a_npu0_Ppu_cfg_7_PPU_WRITE_BASE_ADDR,
      Write_Dx_m1a_npu0_Ppu_cfg_7_PPU_WRITE_BASE_ADDR,
    },
    { /* 1143 : INDEX_DX_M1A_NPU0_PPU_CFG_9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3b0, 32, 0xffffffff, 0x0, -1, true, false, false, true,
      "DX_M1A_NPU0.PPU_CFG_9", 
      Read_Dx_m1a_npu0_Ppu_cfg_9,
      Write_Dx_m1a_npu0_Ppu_cfg_9,
    },
    { /* 1144 : INDEX_DX_M1A_NPU0_PPU_CFG_9_RESERVED0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3b0, DX_M1A_NPU0_PPU_CFG_9_RESERVED0_LEN, DX_M1A_NPU0_PPU_CFG_9_RESERVED0_MASK, DX_M1A_NPU0_PPU_CFG_9_RESERVED0_OFFSET, 0x0, true, false, false, false,
      "DX_M1A_NPU0.PPU_CFG_9.RESERVED0", 
      Read_Dx_m1a_npu0_Ppu_cfg_9_RESERVED0,
      Write_Dx_m1a_npu0_Ppu_cfg_9_RESERVED0,
    },
    { /* 1145 : INDEX_DX_M1A_NPU0_CHECKSUM */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3b4, 32, 0xffffffff, 0x0, -1, true, true, true, false,
      "DX_M1A_NPU0.CHECKSUM", 
      Read_Dx_m1a_npu0_Checksum,
      Write_Dx_m1a_npu0_Checksum,
    },
    { /* 1146 : INDEX_DX_M1A_NPU0_CHECKSUM_CHECKSUM_TILE */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3b4, DX_M1A_NPU0_CHECKSUM_CHECKSUM_TILE_LEN, DX_M1A_NPU0_CHECKSUM_CHECKSUM_TILE_MASK, DX_M1A_NPU0_CHECKSUM_CHECKSUM_TILE_OFFSET, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CHECKSUM.CHECKSUM_TILE", 
      Read_Dx_m1a_npu0_Checksum_CHECKSUM_TILE,
      Write_Dx_m1a_npu0_Checksum_CHECKSUM_TILE,
    },
  },
};

vector<NpuReg> gNpuRmapRegs_DX_M1A[1] = {

  [0] = {
    /* type, baseaddr, addr, len, mask, offset, reset_val, read, write, enable, name */
    { /* 0 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.DATA_CFG0", 
      Read_Dx_m1a_npu0_Data_cfg0,
      Write_Dx_m1a_npu0_Data_cfg0,
    },
    { /* 1 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.CTRL", 
      Read_Dx_m1a_npu0_Ctrl,
      Write_Dx_m1a_npu0_Ctrl,
    },
    { /* 2 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.MISC", 
      Read_Dx_m1a_npu0_Misc,
      Write_Dx_m1a_npu0_Misc,
    },
    { /* 3 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc, 32, 0xffffffff, 0x0, 0x0, true, true, false, true,
      "DX_M1A_NPU0.PSEUDO", 
      Read_Dx_m1a_npu0_Pseudo,
      Write_Dx_m1a_npu0_Pseudo,
    },
    { /* 4 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.TRP0", 
      Read_Dx_m1a_npu0_Trp0,
      Write_Dx_m1a_npu0_Trp0,
    },
    { /* 5 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP1", 
      Read_Dx_m1a_npu0_Trp1,
      Write_Dx_m1a_npu0_Trp1,
    },
    { /* 6 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP2", 
      Read_Dx_m1a_npu0_Trp2,
      Write_Dx_m1a_npu0_Trp2,
    },
    { /* 7 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP3", 
      Read_Dx_m1a_npu0_Trp3,
      Write_Dx_m1a_npu0_Trp3,
    },
    { /* 8 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.TRP4", 
      Read_Dx_m1a_npu0_Trp4,
      Write_Dx_m1a_npu0_Trp4,
    },
    { /* 9 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.ARG0", 
      Read_Dx_m1a_npu0_Arg0,
      Write_Dx_m1a_npu0_Arg0,
    },
    { /* 10 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.POOL0", 
      Read_Dx_m1a_npu0_Pool0,
      Write_Dx_m1a_npu0_Pool0,
    },
    { /* 11 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.POOL1", 
      Read_Dx_m1a_npu0_Pool1,
      Write_Dx_m1a_npu0_Pool1,
    },
    { /* 12 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x30, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.POOL2", 
      Read_Dx_m1a_npu0_Pool2,
      Write_Dx_m1a_npu0_Pool2,
    },
    { /* 13 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.SFU_CTRL0", 
      Read_Dx_m1a_npu0_Sfu_ctrl0,
      Write_Dx_m1a_npu0_Sfu_ctrl0,
    },
    { /* 14 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x38, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF0", 
      Read_Dx_m1a_npu0_Sfu_coeff0,
      Write_Dx_m1a_npu0_Sfu_coeff0,
    },
    { /* 15 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF1", 
      Read_Dx_m1a_npu0_Sfu_coeff1,
      Write_Dx_m1a_npu0_Sfu_coeff1,
    },
    { /* 16 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x40, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF2", 
      Read_Dx_m1a_npu0_Sfu_coeff2,
      Write_Dx_m1a_npu0_Sfu_coeff2,
    },
    { /* 17 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x44, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF3", 
      Read_Dx_m1a_npu0_Sfu_coeff3,
      Write_Dx_m1a_npu0_Sfu_coeff3,
    },
    { /* 18 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x48, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF4", 
      Read_Dx_m1a_npu0_Sfu_coeff4,
      Write_Dx_m1a_npu0_Sfu_coeff4,
    },
    { /* 19 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x4c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF5", 
      Read_Dx_m1a_npu0_Sfu_coeff5,
      Write_Dx_m1a_npu0_Sfu_coeff5,
    },
    { /* 20 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x50, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF6", 
      Read_Dx_m1a_npu0_Sfu_coeff6,
      Write_Dx_m1a_npu0_Sfu_coeff6,
    },
    { /* 21 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x54, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF7", 
      Read_Dx_m1a_npu0_Sfu_coeff7,
      Write_Dx_m1a_npu0_Sfu_coeff7,
    },
    { /* 22 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x58, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF8", 
      Read_Dx_m1a_npu0_Sfu_coeff8,
      Write_Dx_m1a_npu0_Sfu_coeff8,
    },
    { /* 23 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x5c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_COEFF9", 
      Read_Dx_m1a_npu0_Sfu_coeff9,
      Write_Dx_m1a_npu0_Sfu_coeff9,
    },
    { /* 24 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x60, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF0", 
      Read_Dx_m1a_npu0_Sfu_paf0,
      Write_Dx_m1a_npu0_Sfu_paf0,
    },
    { /* 25 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x64, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF1", 
      Read_Dx_m1a_npu0_Sfu_paf1,
      Write_Dx_m1a_npu0_Sfu_paf1,
    },
    { /* 26 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x68, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF2", 
      Read_Dx_m1a_npu0_Sfu_paf2,
      Write_Dx_m1a_npu0_Sfu_paf2,
    },
    { /* 27 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x6c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF3", 
      Read_Dx_m1a_npu0_Sfu_paf3,
      Write_Dx_m1a_npu0_Sfu_paf3,
    },
    { /* 28 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x70, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF4", 
      Read_Dx_m1a_npu0_Sfu_paf4,
      Write_Dx_m1a_npu0_Sfu_paf4,
    },
    { /* 29 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x74, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF5", 
      Read_Dx_m1a_npu0_Sfu_paf5,
      Write_Dx_m1a_npu0_Sfu_paf5,
    },
    { /* 30 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x78, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF6", 
      Read_Dx_m1a_npu0_Sfu_paf6,
      Write_Dx_m1a_npu0_Sfu_paf6,
    },
    { /* 31 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x7c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF7", 
      Read_Dx_m1a_npu0_Sfu_paf7,
      Write_Dx_m1a_npu0_Sfu_paf7,
    },
    { /* 32 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x80, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF8", 
      Read_Dx_m1a_npu0_Sfu_paf8,
      Write_Dx_m1a_npu0_Sfu_paf8,
    },
    { /* 33 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x84, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF9", 
      Read_Dx_m1a_npu0_Sfu_paf9,
      Write_Dx_m1a_npu0_Sfu_paf9,
    },
    { /* 34 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x88, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF10", 
      Read_Dx_m1a_npu0_Sfu_paf10,
      Write_Dx_m1a_npu0_Sfu_paf10,
    },
    { /* 35 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x8c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF11", 
      Read_Dx_m1a_npu0_Sfu_paf11,
      Write_Dx_m1a_npu0_Sfu_paf11,
    },
    { /* 36 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x90, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF12", 
      Read_Dx_m1a_npu0_Sfu_paf12,
      Write_Dx_m1a_npu0_Sfu_paf12,
    },
    { /* 37 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x94, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF13", 
      Read_Dx_m1a_npu0_Sfu_paf13,
      Write_Dx_m1a_npu0_Sfu_paf13,
    },
    { /* 38 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x98, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF14", 
      Read_Dx_m1a_npu0_Sfu_paf14,
      Write_Dx_m1a_npu0_Sfu_paf14,
    },
    { /* 39 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x9c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF15", 
      Read_Dx_m1a_npu0_Sfu_paf15,
      Write_Dx_m1a_npu0_Sfu_paf15,
    },
    { /* 40 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF16", 
      Read_Dx_m1a_npu0_Sfu_paf16,
      Write_Dx_m1a_npu0_Sfu_paf16,
    },
    { /* 41 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF17", 
      Read_Dx_m1a_npu0_Sfu_paf17,
      Write_Dx_m1a_npu0_Sfu_paf17,
    },
    { /* 42 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xa8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF18", 
      Read_Dx_m1a_npu0_Sfu_paf18,
      Write_Dx_m1a_npu0_Sfu_paf18,
    },
    { /* 43 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF19", 
      Read_Dx_m1a_npu0_Sfu_paf19,
      Write_Dx_m1a_npu0_Sfu_paf19,
    },
    { /* 44 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF20", 
      Read_Dx_m1a_npu0_Sfu_paf20,
      Write_Dx_m1a_npu0_Sfu_paf20,
    },
    { /* 45 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF21", 
      Read_Dx_m1a_npu0_Sfu_paf21,
      Write_Dx_m1a_npu0_Sfu_paf21,
    },
    { /* 46 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xb8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF22", 
      Read_Dx_m1a_npu0_Sfu_paf22,
      Write_Dx_m1a_npu0_Sfu_paf22,
    },
    { /* 47 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xbc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF23", 
      Read_Dx_m1a_npu0_Sfu_paf23,
      Write_Dx_m1a_npu0_Sfu_paf23,
    },
    { /* 48 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF24", 
      Read_Dx_m1a_npu0_Sfu_paf24,
      Write_Dx_m1a_npu0_Sfu_paf24,
    },
    { /* 49 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF25", 
      Read_Dx_m1a_npu0_Sfu_paf25,
      Write_Dx_m1a_npu0_Sfu_paf25,
    },
    { /* 50 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xc8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF26", 
      Read_Dx_m1a_npu0_Sfu_paf26,
      Write_Dx_m1a_npu0_Sfu_paf26,
    },
    { /* 51 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xcc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF27", 
      Read_Dx_m1a_npu0_Sfu_paf27,
      Write_Dx_m1a_npu0_Sfu_paf27,
    },
    { /* 52 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF28", 
      Read_Dx_m1a_npu0_Sfu_paf28,
      Write_Dx_m1a_npu0_Sfu_paf28,
    },
    { /* 53 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF29", 
      Read_Dx_m1a_npu0_Sfu_paf29,
      Write_Dx_m1a_npu0_Sfu_paf29,
    },
    { /* 54 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xd8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF30", 
      Read_Dx_m1a_npu0_Sfu_paf30,
      Write_Dx_m1a_npu0_Sfu_paf30,
    },
    { /* 55 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xdc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF31", 
      Read_Dx_m1a_npu0_Sfu_paf31,
      Write_Dx_m1a_npu0_Sfu_paf31,
    },
    { /* 56 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF32", 
      Read_Dx_m1a_npu0_Sfu_paf32,
      Write_Dx_m1a_npu0_Sfu_paf32,
    },
    { /* 57 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF33", 
      Read_Dx_m1a_npu0_Sfu_paf33,
      Write_Dx_m1a_npu0_Sfu_paf33,
    },
    { /* 58 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xe8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF34", 
      Read_Dx_m1a_npu0_Sfu_paf34,
      Write_Dx_m1a_npu0_Sfu_paf34,
    },
    { /* 59 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xec, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF35", 
      Read_Dx_m1a_npu0_Sfu_paf35,
      Write_Dx_m1a_npu0_Sfu_paf35,
    },
    { /* 60 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF36", 
      Read_Dx_m1a_npu0_Sfu_paf36,
      Write_Dx_m1a_npu0_Sfu_paf36,
    },
    { /* 61 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF37", 
      Read_Dx_m1a_npu0_Sfu_paf37,
      Write_Dx_m1a_npu0_Sfu_paf37,
    },
    { /* 62 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xf8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF38", 
      Read_Dx_m1a_npu0_Sfu_paf38,
      Write_Dx_m1a_npu0_Sfu_paf38,
    },
    { /* 63 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0xfc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF39", 
      Read_Dx_m1a_npu0_Sfu_paf39,
      Write_Dx_m1a_npu0_Sfu_paf39,
    },
    { /* 64 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x100, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF40", 
      Read_Dx_m1a_npu0_Sfu_paf40,
      Write_Dx_m1a_npu0_Sfu_paf40,
    },
    { /* 65 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x104, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF41", 
      Read_Dx_m1a_npu0_Sfu_paf41,
      Write_Dx_m1a_npu0_Sfu_paf41,
    },
    { /* 66 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x108, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF42", 
      Read_Dx_m1a_npu0_Sfu_paf42,
      Write_Dx_m1a_npu0_Sfu_paf42,
    },
    { /* 67 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x10c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF43", 
      Read_Dx_m1a_npu0_Sfu_paf43,
      Write_Dx_m1a_npu0_Sfu_paf43,
    },
    { /* 68 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x110, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF44", 
      Read_Dx_m1a_npu0_Sfu_paf44,
      Write_Dx_m1a_npu0_Sfu_paf44,
    },
    { /* 69 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x114, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF45", 
      Read_Dx_m1a_npu0_Sfu_paf45,
      Write_Dx_m1a_npu0_Sfu_paf45,
    },
    { /* 70 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x118, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF46", 
      Read_Dx_m1a_npu0_Sfu_paf46,
      Write_Dx_m1a_npu0_Sfu_paf46,
    },
    { /* 71 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x11c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.SFU_SCALE_CFG0", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg0,
      Write_Dx_m1a_npu0_Sfu_scale_cfg0,
    },
    { /* 72 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x120, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.SFU_SCALE_CFG1", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg1,
      Write_Dx_m1a_npu0_Sfu_scale_cfg1,
    },
    { /* 73 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x124, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.SFU_SCALE_CFG2", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg2,
      Write_Dx_m1a_npu0_Sfu_scale_cfg2,
    },
    { /* 74 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x128, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_SCALE_CFG3", 
      Read_Dx_m1a_npu0_Sfu_scale_cfg3,
      Write_Dx_m1a_npu0_Sfu_scale_cfg3,
    },
    { /* 75 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x12c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.SFU_ELEM_BRD0", 
      Read_Dx_m1a_npu0_Sfu_elem_brd0,
      Write_Dx_m1a_npu0_Sfu_elem_brd0,
    },
    { /* 76 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x130, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.SFU_PAF_DISABLE", 
      Read_Dx_m1a_npu0_Sfu_paf_disable,
      Write_Dx_m1a_npu0_Sfu_paf_disable,
    },
    { /* 77 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x134, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.PRE0_I2C0", 
      Read_Dx_m1a_npu0_Pre0_i2c0,
      Write_Dx_m1a_npu0_Pre0_i2c0,
    },
    { /* 78 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x138, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PRE0_I2C1", 
      Read_Dx_m1a_npu0_Pre0_i2c1,
      Write_Dx_m1a_npu0_Pre0_i2c1,
    },
    { /* 79 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x13c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C2", 
      Read_Dx_m1a_npu0_Pre0_i2c2,
      Write_Dx_m1a_npu0_Pre0_i2c2,
    },
    { /* 80 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x140, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_I2C3", 
      Read_Dx_m1a_npu0_Pre0_i2c3,
      Write_Dx_m1a_npu0_Pre0_i2c3,
    },
    { /* 81 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x144, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.PRE0_FMT0", 
      Read_Dx_m1a_npu0_Pre0_fmt0,
      Write_Dx_m1a_npu0_Pre0_fmt0,
    },
    { /* 82 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x148, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE0_FMT1", 
      Read_Dx_m1a_npu0_Pre0_fmt1,
      Write_Dx_m1a_npu0_Pre0_fmt1,
    },
    { /* 83 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x14c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_ADDR_GEN0", 
      Read_Dx_m1a_npu0_Pe0_addr_gen0,
      Write_Dx_m1a_npu0_Pe0_addr_gen0,
    },
    { /* 84 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x150, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN1", 
      Read_Dx_m1a_npu0_Pe0_addr_gen1,
      Write_Dx_m1a_npu0_Pe0_addr_gen1,
    },
    { /* 85 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x154, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN2", 
      Read_Dx_m1a_npu0_Pe0_addr_gen2,
      Write_Dx_m1a_npu0_Pe0_addr_gen2,
    },
    { /* 86 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x158, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN3", 
      Read_Dx_m1a_npu0_Pe0_addr_gen3,
      Write_Dx_m1a_npu0_Pe0_addr_gen3,
    },
    { /* 87 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x15c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_ADDR_GEN4", 
      Read_Dx_m1a_npu0_Pe0_addr_gen4,
      Write_Dx_m1a_npu0_Pe0_addr_gen4,
    },
    { /* 88 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x160, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN5", 
      Read_Dx_m1a_npu0_Pe0_addr_gen5,
      Write_Dx_m1a_npu0_Pe0_addr_gen5,
    },
    { /* 89 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x164, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN6", 
      Read_Dx_m1a_npu0_Pe0_addr_gen6,
      Write_Dx_m1a_npu0_Pe0_addr_gen6,
    },
    { /* 90 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x168, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN7", 
      Read_Dx_m1a_npu0_Pe0_addr_gen7,
      Write_Dx_m1a_npu0_Pe0_addr_gen7,
    },
    { /* 91 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x16c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_ADDR_GEN8", 
      Read_Dx_m1a_npu0_Pe0_addr_gen8,
      Write_Dx_m1a_npu0_Pe0_addr_gen8,
    },
    { /* 92 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x170, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CTRL", 
      Read_Dx_m1a_npu0_Pe0_ctrl,
      Write_Dx_m1a_npu0_Pe0_ctrl,
    },
    { /* 93 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x174, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG0", 
      Read_Dx_m1a_npu0_Pe0_cfg0,
      Write_Dx_m1a_npu0_Pe0_cfg0,
    },
    { /* 94 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x178, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG1", 
      Read_Dx_m1a_npu0_Pe0_cfg1,
      Write_Dx_m1a_npu0_Pe0_cfg1,
    },
    { /* 95 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x17c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG2", 
      Read_Dx_m1a_npu0_Pe0_cfg2,
      Write_Dx_m1a_npu0_Pe0_cfg2,
    },
    { /* 96 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x180, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG3", 
      Read_Dx_m1a_npu0_Pe0_cfg3,
      Write_Dx_m1a_npu0_Pe0_cfg3,
    },
    { /* 97 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x184, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG4", 
      Read_Dx_m1a_npu0_Pe0_cfg4,
      Write_Dx_m1a_npu0_Pe0_cfg4,
    },
    { /* 98 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x188, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG5", 
      Read_Dx_m1a_npu0_Pe0_cfg5,
      Write_Dx_m1a_npu0_Pe0_cfg5,
    },
    { /* 99 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x18c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG6", 
      Read_Dx_m1a_npu0_Pe0_cfg6,
      Write_Dx_m1a_npu0_Pe0_cfg6,
    },
    { /* 100 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x190, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG7", 
      Read_Dx_m1a_npu0_Pe0_cfg7,
      Write_Dx_m1a_npu0_Pe0_cfg7,
    },
    { /* 101 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x194, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG8", 
      Read_Dx_m1a_npu0_Pe0_cfg8,
      Write_Dx_m1a_npu0_Pe0_cfg8,
    },
    { /* 102 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x198, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG9", 
      Read_Dx_m1a_npu0_Pe0_cfg9,
      Write_Dx_m1a_npu0_Pe0_cfg9,
    },
    { /* 103 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x19c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG10", 
      Read_Dx_m1a_npu0_Pe0_cfg10,
      Write_Dx_m1a_npu0_Pe0_cfg10,
    },
    { /* 104 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG11", 
      Read_Dx_m1a_npu0_Pe0_cfg11,
      Write_Dx_m1a_npu0_Pe0_cfg11,
    },
    { /* 105 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG12", 
      Read_Dx_m1a_npu0_Pe0_cfg12,
      Write_Dx_m1a_npu0_Pe0_cfg12,
    },
    { /* 106 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1a8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG13", 
      Read_Dx_m1a_npu0_Pe0_cfg13,
      Write_Dx_m1a_npu0_Pe0_cfg13,
    },
    { /* 107 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1ac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG14", 
      Read_Dx_m1a_npu0_Pe0_cfg14,
      Write_Dx_m1a_npu0_Pe0_cfg14,
    },
    { /* 108 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG15", 
      Read_Dx_m1a_npu0_Pe0_cfg15,
      Write_Dx_m1a_npu0_Pe0_cfg15,
    },
    { /* 109 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG16", 
      Read_Dx_m1a_npu0_Pe0_cfg16,
      Write_Dx_m1a_npu0_Pe0_cfg16,
    },
    { /* 110 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1b8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG17", 
      Read_Dx_m1a_npu0_Pe0_cfg17,
      Write_Dx_m1a_npu0_Pe0_cfg17,
    },
    { /* 111 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1bc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG18", 
      Read_Dx_m1a_npu0_Pe0_cfg18,
      Write_Dx_m1a_npu0_Pe0_cfg18,
    },
    { /* 112 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG19", 
      Read_Dx_m1a_npu0_Pe0_cfg19,
      Write_Dx_m1a_npu0_Pe0_cfg19,
    },
    { /* 113 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG20", 
      Read_Dx_m1a_npu0_Pe0_cfg20,
      Write_Dx_m1a_npu0_Pe0_cfg20,
    },
    { /* 114 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1c8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG21", 
      Read_Dx_m1a_npu0_Pe0_cfg21,
      Write_Dx_m1a_npu0_Pe0_cfg21,
    },
    { /* 115 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1cc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG22", 
      Read_Dx_m1a_npu0_Pe0_cfg22,
      Write_Dx_m1a_npu0_Pe0_cfg22,
    },
    { /* 116 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG23", 
      Read_Dx_m1a_npu0_Pe0_cfg23,
      Write_Dx_m1a_npu0_Pe0_cfg23,
    },
    { /* 117 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_CFG24", 
      Read_Dx_m1a_npu0_Pe0_cfg24,
      Write_Dx_m1a_npu0_Pe0_cfg24,
    },
    { /* 118 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1d8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG25", 
      Read_Dx_m1a_npu0_Pe0_cfg25,
      Write_Dx_m1a_npu0_Pe0_cfg25,
    },
    { /* 119 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1dc, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_CFG26", 
      Read_Dx_m1a_npu0_Pe0_cfg26,
      Write_Dx_m1a_npu0_Pe0_cfg26,
    },
    { /* 120 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_VMEM_CFG0", 
      Read_Dx_m1a_npu0_Pe0_vmem_cfg0,
      Write_Dx_m1a_npu0_Pe0_vmem_cfg0,
    },
    { /* 121 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.REDUCE0_CFG0", 
      Read_Dx_m1a_npu0_Reduce0_cfg0,
      Write_Dx_m1a_npu0_Reduce0_cfg0,
    },
    { /* 122 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1e8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG1", 
      Read_Dx_m1a_npu0_Reduce0_cfg1,
      Write_Dx_m1a_npu0_Reduce0_cfg1,
    },
    { /* 123 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1ec, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG2", 
      Read_Dx_m1a_npu0_Reduce0_cfg2,
      Write_Dx_m1a_npu0_Reduce0_cfg2,
    },
    { /* 124 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE0_CFG3", 
      Read_Dx_m1a_npu0_Reduce0_cfg3,
      Write_Dx_m1a_npu0_Reduce0_cfg3,
    },
    { /* 125 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_CTRL", 
      Read_Dx_m1a_npu0_Pe0_dma_ctrl,
      Write_Dx_m1a_npu0_Pe0_dma_ctrl,
    },
    { /* 126 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1f8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg0,
    },
    { /* 127 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x1fc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg1,
    },
    { /* 128 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x200, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg2,
    },
    { /* 129 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x204, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_ELEM_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_elem_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_elem_cfg3,
    },
    { /* 130 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x208, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_W_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg0,
    },
    { /* 131 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x20c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg1,
    },
    { /* 132 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x210, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg2,
    },
    { /* 133 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x214, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_W_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_w_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_w_cfg3,
    },
    { /* 134 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x218, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg0,
    },
    { /* 135 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x21c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg1,
    },
    { /* 136 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x220, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg2,
    },
    { /* 137 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x224, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg3,
    },
    { /* 138 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x228, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_INF_CFG4", 
      Read_Dx_m1a_npu0_Pe0_dma_inf_cfg4,
      Write_Dx_m1a_npu0_Pe0_dma_inf_cfg4,
    },
    { /* 139 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x22c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg0,
    },
    { /* 140 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x230, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg1,
    },
    { /* 141 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x234, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg2,
    },
    { /* 142 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x238, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg3,
    },
    { /* 143 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x23c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_OUTF_CFG4", 
      Read_Dx_m1a_npu0_Pe0_dma_outf_cfg4,
      Write_Dx_m1a_npu0_Pe0_dma_outf_cfg4,
    },
    { /* 144 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x240, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG0", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg0,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg0,
    },
    { /* 145 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x244, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG1", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg1,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg1,
    },
    { /* 146 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x248, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG2", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg2,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg2,
    },
    { /* 147 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x24c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG3", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg3,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg3,
    },
    { /* 148 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x250, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG4", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg4,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg4,
    },
    { /* 149 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x254, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG5", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg5,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg5,
    },
    { /* 150 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x258, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG6", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg6,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg6,
    },
    { /* 151 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x25c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG7", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg7,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg7,
    },
    { /* 152 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x260, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG8", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg8,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg8,
    },
    { /* 153 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x264, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG9", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg9,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg9,
    },
    { /* 154 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x268, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG10", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg10,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg10,
    },
    { /* 155 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x26c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG11", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg11,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg11,
    },
    { /* 156 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x270, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG12", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg12,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg12,
    },
    { /* 157 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x274, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG13", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg13,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg13,
    },
    { /* 158 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x278, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG14", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg14,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg14,
    },
    { /* 159 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x27c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG15", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg15,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg15,
    },
    { /* 160 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x280, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG16", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg16,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg16,
    },
    { /* 161 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x284, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE0_DMA_RF_CFG17", 
      Read_Dx_m1a_npu0_Pe0_dma_rf_cfg17,
      Write_Dx_m1a_npu0_Pe0_dma_rf_cfg17,
    },
    { /* 162 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x288, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.PRE1_I2C0", 
      Read_Dx_m1a_npu0_Pre1_i2c0,
      Write_Dx_m1a_npu0_Pre1_i2c0,
    },
    { /* 163 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x28c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PRE1_I2C1", 
      Read_Dx_m1a_npu0_Pre1_i2c1,
      Write_Dx_m1a_npu0_Pre1_i2c1,
    },
    { /* 164 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x290, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C2", 
      Read_Dx_m1a_npu0_Pre1_i2c2,
      Write_Dx_m1a_npu0_Pre1_i2c2,
    },
    { /* 165 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x294, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_I2C3", 
      Read_Dx_m1a_npu0_Pre1_i2c3,
      Write_Dx_m1a_npu0_Pre1_i2c3,
    },
    { /* 166 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x298, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.PRE1_FMT0", 
      Read_Dx_m1a_npu0_Pre1_fmt0,
      Write_Dx_m1a_npu0_Pre1_fmt0,
    },
    { /* 167 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x29c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PRE1_FMT1", 
      Read_Dx_m1a_npu0_Pre1_fmt1,
      Write_Dx_m1a_npu0_Pre1_fmt1,
    },
    { /* 168 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_ADDR_GEN0", 
      Read_Dx_m1a_npu0_Pe1_addr_gen0,
      Write_Dx_m1a_npu0_Pe1_addr_gen0,
    },
    { /* 169 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN1", 
      Read_Dx_m1a_npu0_Pe1_addr_gen1,
      Write_Dx_m1a_npu0_Pe1_addr_gen1,
    },
    { /* 170 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2a8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN2", 
      Read_Dx_m1a_npu0_Pe1_addr_gen2,
      Write_Dx_m1a_npu0_Pe1_addr_gen2,
    },
    { /* 171 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN3", 
      Read_Dx_m1a_npu0_Pe1_addr_gen3,
      Write_Dx_m1a_npu0_Pe1_addr_gen3,
    },
    { /* 172 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_ADDR_GEN4", 
      Read_Dx_m1a_npu0_Pe1_addr_gen4,
      Write_Dx_m1a_npu0_Pe1_addr_gen4,
    },
    { /* 173 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN5", 
      Read_Dx_m1a_npu0_Pe1_addr_gen5,
      Write_Dx_m1a_npu0_Pe1_addr_gen5,
    },
    { /* 174 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2b8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN6", 
      Read_Dx_m1a_npu0_Pe1_addr_gen6,
      Write_Dx_m1a_npu0_Pe1_addr_gen6,
    },
    { /* 175 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2bc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN7", 
      Read_Dx_m1a_npu0_Pe1_addr_gen7,
      Write_Dx_m1a_npu0_Pe1_addr_gen7,
    },
    { /* 176 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_ADDR_GEN8", 
      Read_Dx_m1a_npu0_Pe1_addr_gen8,
      Write_Dx_m1a_npu0_Pe1_addr_gen8,
    },
    { /* 177 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CTRL", 
      Read_Dx_m1a_npu0_Pe1_ctrl,
      Write_Dx_m1a_npu0_Pe1_ctrl,
    },
    { /* 178 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2c8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG0", 
      Read_Dx_m1a_npu0_Pe1_cfg0,
      Write_Dx_m1a_npu0_Pe1_cfg0,
    },
    { /* 179 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2cc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG1", 
      Read_Dx_m1a_npu0_Pe1_cfg1,
      Write_Dx_m1a_npu0_Pe1_cfg1,
    },
    { /* 180 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG2", 
      Read_Dx_m1a_npu0_Pe1_cfg2,
      Write_Dx_m1a_npu0_Pe1_cfg2,
    },
    { /* 181 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG3", 
      Read_Dx_m1a_npu0_Pe1_cfg3,
      Write_Dx_m1a_npu0_Pe1_cfg3,
    },
    { /* 182 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2d8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG4", 
      Read_Dx_m1a_npu0_Pe1_cfg4,
      Write_Dx_m1a_npu0_Pe1_cfg4,
    },
    { /* 183 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2dc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG5", 
      Read_Dx_m1a_npu0_Pe1_cfg5,
      Write_Dx_m1a_npu0_Pe1_cfg5,
    },
    { /* 184 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e0, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG6", 
      Read_Dx_m1a_npu0_Pe1_cfg6,
      Write_Dx_m1a_npu0_Pe1_cfg6,
    },
    { /* 185 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG7", 
      Read_Dx_m1a_npu0_Pe1_cfg7,
      Write_Dx_m1a_npu0_Pe1_cfg7,
    },
    { /* 186 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2e8, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG8", 
      Read_Dx_m1a_npu0_Pe1_cfg8,
      Write_Dx_m1a_npu0_Pe1_cfg8,
    },
    { /* 187 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2ec, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG9", 
      Read_Dx_m1a_npu0_Pe1_cfg9,
      Write_Dx_m1a_npu0_Pe1_cfg9,
    },
    { /* 188 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG10", 
      Read_Dx_m1a_npu0_Pe1_cfg10,
      Write_Dx_m1a_npu0_Pe1_cfg10,
    },
    { /* 189 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG11", 
      Read_Dx_m1a_npu0_Pe1_cfg11,
      Write_Dx_m1a_npu0_Pe1_cfg11,
    },
    { /* 190 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2f8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG12", 
      Read_Dx_m1a_npu0_Pe1_cfg12,
      Write_Dx_m1a_npu0_Pe1_cfg12,
    },
    { /* 191 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x2fc, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG13", 
      Read_Dx_m1a_npu0_Pe1_cfg13,
      Write_Dx_m1a_npu0_Pe1_cfg13,
    },
    { /* 192 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x300, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG14", 
      Read_Dx_m1a_npu0_Pe1_cfg14,
      Write_Dx_m1a_npu0_Pe1_cfg14,
    },
    { /* 193 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x304, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG15", 
      Read_Dx_m1a_npu0_Pe1_cfg15,
      Write_Dx_m1a_npu0_Pe1_cfg15,
    },
    { /* 194 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x308, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG16", 
      Read_Dx_m1a_npu0_Pe1_cfg16,
      Write_Dx_m1a_npu0_Pe1_cfg16,
    },
    { /* 195 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x30c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG17", 
      Read_Dx_m1a_npu0_Pe1_cfg17,
      Write_Dx_m1a_npu0_Pe1_cfg17,
    },
    { /* 196 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x310, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG18", 
      Read_Dx_m1a_npu0_Pe1_cfg18,
      Write_Dx_m1a_npu0_Pe1_cfg18,
    },
    { /* 197 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x314, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG19", 
      Read_Dx_m1a_npu0_Pe1_cfg19,
      Write_Dx_m1a_npu0_Pe1_cfg19,
    },
    { /* 198 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x318, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG20", 
      Read_Dx_m1a_npu0_Pe1_cfg20,
      Write_Dx_m1a_npu0_Pe1_cfg20,
    },
    { /* 199 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x31c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG21", 
      Read_Dx_m1a_npu0_Pe1_cfg21,
      Write_Dx_m1a_npu0_Pe1_cfg21,
    },
    { /* 200 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x320, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG22", 
      Read_Dx_m1a_npu0_Pe1_cfg22,
      Write_Dx_m1a_npu0_Pe1_cfg22,
    },
    { /* 201 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x324, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG23", 
      Read_Dx_m1a_npu0_Pe1_cfg23,
      Write_Dx_m1a_npu0_Pe1_cfg23,
    },
    { /* 202 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x328, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_CFG24", 
      Read_Dx_m1a_npu0_Pe1_cfg24,
      Write_Dx_m1a_npu0_Pe1_cfg24,
    },
    { /* 203 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x32c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG25", 
      Read_Dx_m1a_npu0_Pe1_cfg25,
      Write_Dx_m1a_npu0_Pe1_cfg25,
    },
    { /* 204 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x330, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_CFG26", 
      Read_Dx_m1a_npu0_Pe1_cfg26,
      Write_Dx_m1a_npu0_Pe1_cfg26,
    },
    { /* 205 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x334, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_VMEM_CFG0", 
      Read_Dx_m1a_npu0_Pe1_vmem_cfg0,
      Write_Dx_m1a_npu0_Pe1_vmem_cfg0,
    },
    { /* 206 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x338, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.REDUCE1_CFG0", 
      Read_Dx_m1a_npu0_Reduce1_cfg0,
      Write_Dx_m1a_npu0_Reduce1_cfg0,
    },
    { /* 207 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x33c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG1", 
      Read_Dx_m1a_npu0_Reduce1_cfg1,
      Write_Dx_m1a_npu0_Reduce1_cfg1,
    },
    { /* 208 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x340, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG2", 
      Read_Dx_m1a_npu0_Reduce1_cfg2,
      Write_Dx_m1a_npu0_Reduce1_cfg2,
    },
    { /* 209 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x344, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.REDUCE1_CFG3", 
      Read_Dx_m1a_npu0_Reduce1_cfg3,
      Write_Dx_m1a_npu0_Reduce1_cfg3,
    },
    { /* 210 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x348, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_CTRL", 
      Read_Dx_m1a_npu0_Pe1_dma_ctrl,
      Write_Dx_m1a_npu0_Pe1_dma_ctrl,
    },
    { /* 211 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x34c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg0,
    },
    { /* 212 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x350, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg1,
    },
    { /* 213 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x354, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg2,
    },
    { /* 214 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x358, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_ELEM_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_elem_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_elem_cfg3,
    },
    { /* 215 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x35c, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_W_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg0,
    },
    { /* 216 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x360, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg1,
    },
    { /* 217 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x364, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg2,
    },
    { /* 218 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x368, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_W_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_w_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_w_cfg3,
    },
    { /* 219 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x36c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg0,
    },
    { /* 220 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x370, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg1,
    },
    { /* 221 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x374, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg2,
    },
    { /* 222 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x378, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg3,
    },
    { /* 223 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x37c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_INF_CFG4", 
      Read_Dx_m1a_npu0_Pe1_dma_inf_cfg4,
      Write_Dx_m1a_npu0_Pe1_dma_inf_cfg4,
    },
    { /* 224 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x380, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG0", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg0,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg0,
    },
    { /* 225 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x384, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG1", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg1,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg1,
    },
    { /* 226 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x388, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG2", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg2,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg2,
    },
    { /* 227 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x38c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG3", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg3,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg3,
    },
    { /* 228 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x390, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PE1_DMA_OUTF_CFG4", 
      Read_Dx_m1a_npu0_Pe1_dma_outf_cfg4,
      Write_Dx_m1a_npu0_Pe1_dma_outf_cfg4,
    },
    { /* 229 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x394, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PPU_CFG_0", 
      Read_Dx_m1a_npu0_Ppu_cfg_0,
      Write_Dx_m1a_npu0_Ppu_cfg_0,
    },
    { /* 230 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x398, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PPU_CFG_1", 
      Read_Dx_m1a_npu0_Ppu_cfg_1,
      Write_Dx_m1a_npu0_Ppu_cfg_1,
    },
    { /* 231 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x39c, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_2", 
      Read_Dx_m1a_npu0_Ppu_cfg_2,
      Write_Dx_m1a_npu0_Ppu_cfg_2,
    },
    { /* 232 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a0, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_3", 
      Read_Dx_m1a_npu0_Ppu_cfg_3,
      Write_Dx_m1a_npu0_Ppu_cfg_3,
    },
    { /* 233 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a4, 32, 0xffffffff, 0x0, 0x0, true, true, true, true,
      "DX_M1A_NPU0.PPU_CFG_4", 
      Read_Dx_m1a_npu0_Ppu_cfg_4,
      Write_Dx_m1a_npu0_Ppu_cfg_4,
    },
    { /* 234 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3a8, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_6", 
      Read_Dx_m1a_npu0_Ppu_cfg_6,
      Write_Dx_m1a_npu0_Ppu_cfg_6,
    },
    { /* 235 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3ac, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.PPU_CFG_7", 
      Read_Dx_m1a_npu0_Ppu_cfg_7,
      Write_Dx_m1a_npu0_Ppu_cfg_7,
    },
    { /* 236 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3b0, 32, 0xffffffff, 0x0, 0x0, true, false, false, true,
      "DX_M1A_NPU0.PPU_CFG_9", 
      Read_Dx_m1a_npu0_Ppu_cfg_9,
      Write_Dx_m1a_npu0_Ppu_cfg_9,
    },
    { /* 237 */
      DXRT_NPU_REG_NPU0, REG_DX_M1A_NPU0_OFFSET, REG_DX_M1A_NPU0_OFFSET + 0x3b4, 32, 0xffffffff, 0x0, 0x0, true, true, true, false,
      "DX_M1A_NPU0.CHECKSUM", 
      Read_Dx_m1a_npu0_Checksum,
      Write_Dx_m1a_npu0_Checksum,
    },
  },
};

} /* namespace dxrt */