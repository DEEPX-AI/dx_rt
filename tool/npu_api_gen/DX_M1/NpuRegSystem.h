/* Automatically generated from DX_M1.xlsx
 * by Deepx Neural Network Generator v1.0
 */
#pragma once

#include <stdint.h>
#include "dxrt/npuif/npuif.h"

namespace dxrt{
extern bool logNpuRegAccess;

/* Address */
#define REG_DX_M1_SYSTEM_OFFSET 0x0
#define REG_DX_M1_SYSTEM_ID    0x00000000 /* 0 */
#define REG_DX_M1_SYSTEM_STATUS    0x00000004 /* 4 */
#define REG_DX_M1_SYSTEM_MODE    0x00000008 /* 8 */
#define REG_DX_M1_SYSTEM_CMD    0x0000000c /* 12 */
#define REG_DX_M1_SYSTEM_CMD_STATUS    0x00000010 /* 16 */
#define REG_DX_M1_SYSTEM_FEATURE_BASE    0x00000014 /* 20 */
#define REG_DX_M1_SYSTEM_WEIGHT_BASE    0x00000018 /* 24 */
#define REG_DX_M1_SYSTEM_SWREG0    0x0000001c /* 28 */
#define REG_DX_M1_SYSTEM_SWREG1    0x00000020 /* 32 */
#define REG_DX_M1_SYSTEM_SWREG2    0x00000024 /* 36 */
#define REG_DX_M1_SYSTEM_SWREG3    0x00000028 /* 40 */

/* Register Definition */
typedef volatile union _DX_M1_SYSTEM_ID_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.ID*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SYSTEM_ID:16;  /* DX_M1_SYSTEM.ID.SYSTEM_ID [15:0] (R, 0x705)  */
        volatile uint32_t REVISION_ID:8;  /* DX_M1_SYSTEM.ID.REVISION_ID [23:16] (R, 0x0)  */
        volatile uint32_t DEVICE_ID:8;  /* DX_M1_SYSTEM.ID.DEVICE_ID [31:24] (R, 0xb1)  */
    };
} DX_M1_SYSTEM_ID_t;
typedef volatile union _DX_M1_SYSTEM_STATUS_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.STATUS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t IRQ_STEP:1;  /* DX_M1_SYSTEM.STATUS.IRQ_STEP [0:0] (R, 0x0)  */
        volatile uint32_t IRQ_INF:1;  /* DX_M1_SYSTEM.STATUS.IRQ_INF [1:1] (R, 0x0)  */
        volatile uint32_t IRQ_INPUT_DONE:1;  /* DX_M1_SYSTEM.STATUS.IRQ_INPUT_DONE [2:2] (R, 0x0)  */
        volatile uint32_t BUSY:1;  /* DX_M1_SYSTEM.STATUS.BUSY [3:3] (R, 0x0)  */
        volatile uint32_t USER_DMA:1;  /* DX_M1_SYSTEM.STATUS.USER_DMA [4:4] (R, 0x1)  */
        volatile uint32_t RESERVED0:11;  /* DX_M1_SYSTEM.STATUS.RESERVED0 [15:5] (R, 0x0)  */
        volatile uint32_t ARGMAX_ID:16;  /* DX_M1_SYSTEM.STATUS.ARGMAX_ID [31:16] (R, 0x0)  */
    };
} DX_M1_SYSTEM_STATUS_t;
typedef volatile union _DX_M1_SYSTEM_MODE_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.MODE*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t LAST_CMD_NUM:16;  /* DX_M1_SYSTEM.MODE.LAST_CMD_NUM [15:0] (RW, 0x0)  */
        volatile uint32_t RESERVED0:12;  /* DX_M1_SYSTEM.MODE.RESERVED0 [27:16] (RW, 0x0)  */
        volatile uint32_t IRQ_INPUT_DONE_EN:1;  /* DX_M1_SYSTEM.MODE.IRQ_INPUT_DONE_EN [28:28] (RW, 0x0)  */
        volatile uint32_t AUTORUN_EN:1;  /* DX_M1_SYSTEM.MODE.AUTORUN_EN [29:29] (RW, 0x0)  */
        volatile uint32_t IRQ_STEP_EN:1;  /* DX_M1_SYSTEM.MODE.IRQ_STEP_EN [30:30] (RW, 0x0)  */
        volatile uint32_t IRQ_INF_EN:1;  /* DX_M1_SYSTEM.MODE.IRQ_INF_EN [31:31] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_MODE_t;
typedef volatile union _DX_M1_SYSTEM_CMD_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.CMD*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t START:1;  /* DX_M1_SYSTEM.CMD.START [0:0] (W, 0x0)  */
        volatile uint32_t RESERVED0:31;  /* DX_M1_SYSTEM.CMD.RESERVED0 [31:1] (W, 0x0)  */
    };
} DX_M1_SYSTEM_CMD_t;
typedef volatile union _DX_M1_SYSTEM_CMD_STATUS_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.CMD_STATUS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t CMD_STATUS:16;  /* DX_M1_SYSTEM.CMD_STATUS.CMD_STATUS [15:0] (R, 0x0)  */
        volatile uint32_t RESERVED0:16;  /* DX_M1_SYSTEM.CMD_STATUS.RESERVED0 [31:16] (R, 0x0)  */
    };
} DX_M1_SYSTEM_CMD_STATUS_t;
typedef volatile union _DX_M1_SYSTEM_FEATURE_BASE_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.FEATURE_BASE*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t FEATURE_OFFSET:32;  /* DX_M1_SYSTEM.FEATURE_BASE.FEATURE_OFFSET [31:0] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_FEATURE_BASE_t;
typedef volatile union _DX_M1_SYSTEM_WEIGHT_BASE_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.WEIGHT_BASE*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t WEIGHT_OFFSET:32;  /* DX_M1_SYSTEM.WEIGHT_BASE.WEIGHT_OFFSET [31:0] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_WEIGHT_BASE_t;
typedef volatile union _DX_M1_SYSTEM_SWREG0_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.SWREG0*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SWREG0:32;  /* DX_M1_SYSTEM.SWREG0.SWREG0 [31:0] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_SWREG0_t;
typedef volatile union _DX_M1_SYSTEM_SWREG1_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.SWREG1*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SWREG1:32;  /* DX_M1_SYSTEM.SWREG1.SWREG1 [31:0] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_SWREG1_t;
typedef volatile union _DX_M1_SYSTEM_SWREG2_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.SWREG2*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SWREG2:32;  /* DX_M1_SYSTEM.SWREG2.SWREG2 [31:0] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_SWREG2_t;
typedef volatile union _DX_M1_SYSTEM_SWREG3_t
{
    volatile uint32_t U;  /* Register-Access : DX_M1_SYSTEM.SWREG3*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SWREG3:32;  /* DX_M1_SYSTEM.SWREG3.SWREG3 [31:0] (RW, 0x0)  */
    };
} DX_M1_SYSTEM_SWREG3_t;

/* DX_M1_SYSTEM Module Definition */
typedef volatile struct _dxDX_M1_SYSTEM_t
{
    DX_M1_SYSTEM_ID_t ID;  /* SYSTEM 0x0 */
    DX_M1_SYSTEM_STATUS_t STATUS;  /* SYSTEM 0x4 */
    DX_M1_SYSTEM_MODE_t MODE;  /* SYSTEM 0x8 */
    DX_M1_SYSTEM_CMD_t CMD;  /* SYSTEM 0xc */
    DX_M1_SYSTEM_CMD_STATUS_t CMD_STATUS;  /* SYSTEM 0x10 */
    DX_M1_SYSTEM_FEATURE_BASE_t FEATURE_BASE;  /* SYSTEM 0x14 */
    DX_M1_SYSTEM_WEIGHT_BASE_t WEIGHT_BASE;  /* SYSTEM 0x18 */
    DX_M1_SYSTEM_SWREG0_t SWREG0;  /* SYSTEM 0x1c */
    DX_M1_SYSTEM_SWREG1_t SWREG1;  /* SYSTEM 0x20 */
    DX_M1_SYSTEM_SWREG2_t SWREG2;  /* SYSTEM 0x24 */
    DX_M1_SYSTEM_SWREG3_t SWREG3;  /* SYSTEM 0x28 */
} dxDX_M1_SYSTEM_t;

/* Register access API */
/* DX_M1_SYSTEM.ID (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_ID(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_ID)
#define WRITE_DX_M1_SYSTEM_ID(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_ID, val)
/* DX_M1_SYSTEM.ID.SYSTEM_ID (Category: SYSTEM) */
#define DX_M1_SYSTEM_ID_SYSTEM_ID_LEN        16
#define DX_M1_SYSTEM_ID_SYSTEM_ID_OFFSET     0
#define DX_M1_SYSTEM_ID_SYSTEM_ID_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DX_M1_SYSTEM_ID_SYSTEM_ID_MASK       0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_ID_SYSTEM_ID(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_ID, DX_M1_SYSTEM_ID_SYSTEM_ID_MASK)
#define READ_DX_M1_SYSTEM_ID_SYSTEM_ID(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_ID, DX_M1_SYSTEM_ID_SYSTEM_ID_MASK, DX_M1_SYSTEM_ID_SYSTEM_ID_OFFSET)
#define WRITE_DX_M1_SYSTEM_ID_SYSTEM_ID(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_ID, bits, DX_M1_SYSTEM_ID_SYSTEM_ID_MASK, DX_M1_SYSTEM_ID_SYSTEM_ID_OFFSET)

/* DX_M1_SYSTEM.ID.REVISION_ID (Category: SYSTEM) */
#define DX_M1_SYSTEM_ID_REVISION_ID_LEN        8
#define DX_M1_SYSTEM_ID_REVISION_ID_OFFSET     16
#define DX_M1_SYSTEM_ID_REVISION_ID_MASK_BITS  0x000000ff /* [7:0] 0b00000000000000000000000011111111 */
#define DX_M1_SYSTEM_ID_REVISION_ID_MASK       0x00ff0000 /* [23:16] 0b00000000111111110000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_ID_REVISION_ID(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_ID, DX_M1_SYSTEM_ID_REVISION_ID_MASK)
#define READ_DX_M1_SYSTEM_ID_REVISION_ID(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_ID, DX_M1_SYSTEM_ID_REVISION_ID_MASK, DX_M1_SYSTEM_ID_REVISION_ID_OFFSET)
#define WRITE_DX_M1_SYSTEM_ID_REVISION_ID(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_ID, bits, DX_M1_SYSTEM_ID_REVISION_ID_MASK, DX_M1_SYSTEM_ID_REVISION_ID_OFFSET)

/* DX_M1_SYSTEM.ID.DEVICE_ID (Category: SYSTEM) */
#define DX_M1_SYSTEM_ID_DEVICE_ID_LEN        8
#define DX_M1_SYSTEM_ID_DEVICE_ID_OFFSET     24
#define DX_M1_SYSTEM_ID_DEVICE_ID_MASK_BITS  0x000000ff /* [7:0] 0b00000000000000000000000011111111 */
#define DX_M1_SYSTEM_ID_DEVICE_ID_MASK       0xff000000 /* [31:24] 0b11111111000000000000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_ID_DEVICE_ID(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_ID, DX_M1_SYSTEM_ID_DEVICE_ID_MASK)
#define READ_DX_M1_SYSTEM_ID_DEVICE_ID(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_ID, DX_M1_SYSTEM_ID_DEVICE_ID_MASK, DX_M1_SYSTEM_ID_DEVICE_ID_OFFSET)
#define WRITE_DX_M1_SYSTEM_ID_DEVICE_ID(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_ID, bits, DX_M1_SYSTEM_ID_DEVICE_ID_MASK, DX_M1_SYSTEM_ID_DEVICE_ID_OFFSET)

/* DX_M1_SYSTEM.STATUS (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_STATUS(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_STATUS)
#define WRITE_DX_M1_SYSTEM_STATUS(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_STATUS, val)
/* DX_M1_SYSTEM.STATUS.IRQ_STEP (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_IRQ_STEP_LEN        1
#define DX_M1_SYSTEM_STATUS_IRQ_STEP_OFFSET     0
#define DX_M1_SYSTEM_STATUS_IRQ_STEP_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_STATUS_IRQ_STEP_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_IRQ_STEP(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_IRQ_STEP_MASK)
#define READ_DX_M1_SYSTEM_STATUS_IRQ_STEP(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_IRQ_STEP_MASK, DX_M1_SYSTEM_STATUS_IRQ_STEP_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_IRQ_STEP(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_IRQ_STEP_MASK, DX_M1_SYSTEM_STATUS_IRQ_STEP_OFFSET)

/* DX_M1_SYSTEM.STATUS.IRQ_INF (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_IRQ_INF_LEN        1
#define DX_M1_SYSTEM_STATUS_IRQ_INF_OFFSET     1
#define DX_M1_SYSTEM_STATUS_IRQ_INF_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_STATUS_IRQ_INF_MASK       0x00000002 /* [1:1] 0b00000000000000000000000000000010 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_IRQ_INF(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_IRQ_INF_MASK)
#define READ_DX_M1_SYSTEM_STATUS_IRQ_INF(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_IRQ_INF_MASK, DX_M1_SYSTEM_STATUS_IRQ_INF_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_IRQ_INF(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_IRQ_INF_MASK, DX_M1_SYSTEM_STATUS_IRQ_INF_OFFSET)

/* DX_M1_SYSTEM.STATUS.IRQ_INPUT_DONE (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_LEN        1
#define DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_OFFSET     2
#define DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_MASK       0x00000004 /* [2:2] 0b00000000000000000000000000000100 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_MASK)
#define READ_DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_MASK, DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_MASK, DX_M1_SYSTEM_STATUS_IRQ_INPUT_DONE_OFFSET)

/* DX_M1_SYSTEM.STATUS.BUSY (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_BUSY_LEN        1
#define DX_M1_SYSTEM_STATUS_BUSY_OFFSET     3
#define DX_M1_SYSTEM_STATUS_BUSY_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_STATUS_BUSY_MASK       0x00000008 /* [3:3] 0b00000000000000000000000000001000 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_BUSY(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_BUSY_MASK)
#define READ_DX_M1_SYSTEM_STATUS_BUSY(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_BUSY_MASK, DX_M1_SYSTEM_STATUS_BUSY_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_BUSY(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_BUSY_MASK, DX_M1_SYSTEM_STATUS_BUSY_OFFSET)

/* DX_M1_SYSTEM.STATUS.USER_DMA (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_USER_DMA_LEN        1
#define DX_M1_SYSTEM_STATUS_USER_DMA_OFFSET     4
#define DX_M1_SYSTEM_STATUS_USER_DMA_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_STATUS_USER_DMA_MASK       0x00000010 /* [4:4] 0b00000000000000000000000000010000 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_USER_DMA(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_USER_DMA_MASK)
#define READ_DX_M1_SYSTEM_STATUS_USER_DMA(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_USER_DMA_MASK, DX_M1_SYSTEM_STATUS_USER_DMA_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_USER_DMA(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_USER_DMA_MASK, DX_M1_SYSTEM_STATUS_USER_DMA_OFFSET)

/* DX_M1_SYSTEM.STATUS.RESERVED0 (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_RESERVED0_LEN        11
#define DX_M1_SYSTEM_STATUS_RESERVED0_OFFSET     5
#define DX_M1_SYSTEM_STATUS_RESERVED0_MASK_BITS  0x000007ff /* [10:0] 0b00000000000000000000011111111111 */
#define DX_M1_SYSTEM_STATUS_RESERVED0_MASK       0x0000ffe0 /* [15:5] 0b00000000000000001111111111100000 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_RESERVED0(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_RESERVED0_MASK)
#define READ_DX_M1_SYSTEM_STATUS_RESERVED0(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_RESERVED0_MASK, DX_M1_SYSTEM_STATUS_RESERVED0_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_RESERVED0(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_RESERVED0_MASK, DX_M1_SYSTEM_STATUS_RESERVED0_OFFSET)

/* DX_M1_SYSTEM.STATUS.ARGMAX_ID (Category: SYSTEM) */
#define DX_M1_SYSTEM_STATUS_ARGMAX_ID_LEN        16
#define DX_M1_SYSTEM_STATUS_ARGMAX_ID_OFFSET     16
#define DX_M1_SYSTEM_STATUS_ARGMAX_ID_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DX_M1_SYSTEM_STATUS_ARGMAX_ID_MASK       0xffff0000 /* [31:16] 0b11111111111111110000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_STATUS_ARGMAX_ID(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_ARGMAX_ID_MASK)
#define READ_DX_M1_SYSTEM_STATUS_ARGMAX_ID(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_STATUS, DX_M1_SYSTEM_STATUS_ARGMAX_ID_MASK, DX_M1_SYSTEM_STATUS_ARGMAX_ID_OFFSET)
#define WRITE_DX_M1_SYSTEM_STATUS_ARGMAX_ID(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_STATUS, bits, DX_M1_SYSTEM_STATUS_ARGMAX_ID_MASK, DX_M1_SYSTEM_STATUS_ARGMAX_ID_OFFSET)

/* DX_M1_SYSTEM.MODE (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_MODE(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_MODE)
#define WRITE_DX_M1_SYSTEM_MODE(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_MODE, val)
/* DX_M1_SYSTEM.MODE.LAST_CMD_NUM (Category: SYSTEM) */
#define DX_M1_SYSTEM_MODE_LAST_CMD_NUM_LEN        16
#define DX_M1_SYSTEM_MODE_LAST_CMD_NUM_OFFSET     0
#define DX_M1_SYSTEM_MODE_LAST_CMD_NUM_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DX_M1_SYSTEM_MODE_LAST_CMD_NUM_MASK       0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_MODE_LAST_CMD_NUM(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_LAST_CMD_NUM_MASK)
#define READ_DX_M1_SYSTEM_MODE_LAST_CMD_NUM(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_LAST_CMD_NUM_MASK, DX_M1_SYSTEM_MODE_LAST_CMD_NUM_OFFSET)
#define WRITE_DX_M1_SYSTEM_MODE_LAST_CMD_NUM(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_MODE, bits, DX_M1_SYSTEM_MODE_LAST_CMD_NUM_MASK, DX_M1_SYSTEM_MODE_LAST_CMD_NUM_OFFSET)

/* DX_M1_SYSTEM.MODE.RESERVED0 (Category: SYSTEM) */
#define DX_M1_SYSTEM_MODE_RESERVED0_LEN        12
#define DX_M1_SYSTEM_MODE_RESERVED0_OFFSET     16
#define DX_M1_SYSTEM_MODE_RESERVED0_MASK_BITS  0x00000fff /* [11:0] 0b00000000000000000000111111111111 */
#define DX_M1_SYSTEM_MODE_RESERVED0_MASK       0x0fff0000 /* [27:16] 0b00001111111111110000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_MODE_RESERVED0(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_RESERVED0_MASK)
#define READ_DX_M1_SYSTEM_MODE_RESERVED0(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_RESERVED0_MASK, DX_M1_SYSTEM_MODE_RESERVED0_OFFSET)
#define WRITE_DX_M1_SYSTEM_MODE_RESERVED0(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_MODE, bits, DX_M1_SYSTEM_MODE_RESERVED0_MASK, DX_M1_SYSTEM_MODE_RESERVED0_OFFSET)

/* DX_M1_SYSTEM.MODE.IRQ_INPUT_DONE_EN (Category: SYSTEM) */
#define DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_LEN        1
#define DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_OFFSET     28
#define DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_MASK       0x10000000 /* [28:28] 0b00010000000000000000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_MASK)
#define READ_DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_MASK, DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_OFFSET)
#define WRITE_DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_MODE, bits, DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_MASK, DX_M1_SYSTEM_MODE_IRQ_INPUT_DONE_EN_OFFSET)

/* DX_M1_SYSTEM.MODE.AUTORUN_EN (Category: SYSTEM) */
#define DX_M1_SYSTEM_MODE_AUTORUN_EN_LEN        1
#define DX_M1_SYSTEM_MODE_AUTORUN_EN_OFFSET     29
#define DX_M1_SYSTEM_MODE_AUTORUN_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_MODE_AUTORUN_EN_MASK       0x20000000 /* [29:29] 0b00100000000000000000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_MODE_AUTORUN_EN(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_AUTORUN_EN_MASK)
#define READ_DX_M1_SYSTEM_MODE_AUTORUN_EN(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_AUTORUN_EN_MASK, DX_M1_SYSTEM_MODE_AUTORUN_EN_OFFSET)
#define WRITE_DX_M1_SYSTEM_MODE_AUTORUN_EN(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_MODE, bits, DX_M1_SYSTEM_MODE_AUTORUN_EN_MASK, DX_M1_SYSTEM_MODE_AUTORUN_EN_OFFSET)

/* DX_M1_SYSTEM.MODE.IRQ_STEP_EN (Category: SYSTEM) */
#define DX_M1_SYSTEM_MODE_IRQ_STEP_EN_LEN        1
#define DX_M1_SYSTEM_MODE_IRQ_STEP_EN_OFFSET     30
#define DX_M1_SYSTEM_MODE_IRQ_STEP_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_MODE_IRQ_STEP_EN_MASK       0x40000000 /* [30:30] 0b01000000000000000000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_MODE_IRQ_STEP_EN(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_IRQ_STEP_EN_MASK)
#define READ_DX_M1_SYSTEM_MODE_IRQ_STEP_EN(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_IRQ_STEP_EN_MASK, DX_M1_SYSTEM_MODE_IRQ_STEP_EN_OFFSET)
#define WRITE_DX_M1_SYSTEM_MODE_IRQ_STEP_EN(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_MODE, bits, DX_M1_SYSTEM_MODE_IRQ_STEP_EN_MASK, DX_M1_SYSTEM_MODE_IRQ_STEP_EN_OFFSET)

/* DX_M1_SYSTEM.MODE.IRQ_INF_EN (Category: SYSTEM) */
#define DX_M1_SYSTEM_MODE_IRQ_INF_EN_LEN        1
#define DX_M1_SYSTEM_MODE_IRQ_INF_EN_OFFSET     31
#define DX_M1_SYSTEM_MODE_IRQ_INF_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_MODE_IRQ_INF_EN_MASK       0x80000000 /* [31:31] 0b10000000000000000000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_MODE_IRQ_INF_EN(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_IRQ_INF_EN_MASK)
#define READ_DX_M1_SYSTEM_MODE_IRQ_INF_EN(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_MODE, DX_M1_SYSTEM_MODE_IRQ_INF_EN_MASK, DX_M1_SYSTEM_MODE_IRQ_INF_EN_OFFSET)
#define WRITE_DX_M1_SYSTEM_MODE_IRQ_INF_EN(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_MODE, bits, DX_M1_SYSTEM_MODE_IRQ_INF_EN_MASK, DX_M1_SYSTEM_MODE_IRQ_INF_EN_OFFSET)

/* DX_M1_SYSTEM.CMD (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_CMD(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_CMD)
#define WRITE_DX_M1_SYSTEM_CMD(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_CMD, val)
/* DX_M1_SYSTEM.CMD.START (Category: SYSTEM) */
#define DX_M1_SYSTEM_CMD_START_LEN        1
#define DX_M1_SYSTEM_CMD_START_OFFSET     0
#define DX_M1_SYSTEM_CMD_START_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DX_M1_SYSTEM_CMD_START_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define READ_MASK_DX_M1_SYSTEM_CMD_START(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_CMD, DX_M1_SYSTEM_CMD_START_MASK)
#define READ_DX_M1_SYSTEM_CMD_START(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_CMD, DX_M1_SYSTEM_CMD_START_MASK, DX_M1_SYSTEM_CMD_START_OFFSET)
#define WRITE_DX_M1_SYSTEM_CMD_START(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_CMD, bits, DX_M1_SYSTEM_CMD_START_MASK, DX_M1_SYSTEM_CMD_START_OFFSET)

/* DX_M1_SYSTEM.CMD.RESERVED0 (Category: SYSTEM) */
#define DX_M1_SYSTEM_CMD_RESERVED0_LEN        31
#define DX_M1_SYSTEM_CMD_RESERVED0_OFFSET     1
#define DX_M1_SYSTEM_CMD_RESERVED0_MASK_BITS  0x7fffffff /* [30:0] 0b01111111111111111111111111111111 */
#define DX_M1_SYSTEM_CMD_RESERVED0_MASK       0xfffffffe /* [31:1] 0b11111111111111111111111111111110 */
#define READ_MASK_DX_M1_SYSTEM_CMD_RESERVED0(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_CMD, DX_M1_SYSTEM_CMD_RESERVED0_MASK)
#define READ_DX_M1_SYSTEM_CMD_RESERVED0(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_CMD, DX_M1_SYSTEM_CMD_RESERVED0_MASK, DX_M1_SYSTEM_CMD_RESERVED0_OFFSET)
#define WRITE_DX_M1_SYSTEM_CMD_RESERVED0(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_CMD, bits, DX_M1_SYSTEM_CMD_RESERVED0_MASK, DX_M1_SYSTEM_CMD_RESERVED0_OFFSET)

/* DX_M1_SYSTEM.CMD_STATUS (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_CMD_STATUS(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS)
#define WRITE_DX_M1_SYSTEM_CMD_STATUS(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, val)
/* DX_M1_SYSTEM.CMD_STATUS.CMD_STATUS (Category: SYSTEM) */
#define DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_LEN        16
#define DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_OFFSET     0
#define DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_MASK       0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_MASK)
#define READ_DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_MASK, DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_OFFSET)
#define WRITE_DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, bits, DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_MASK, DX_M1_SYSTEM_CMD_STATUS_CMD_STATUS_OFFSET)

/* DX_M1_SYSTEM.CMD_STATUS.RESERVED0 (Category: SYSTEM) */
#define DX_M1_SYSTEM_CMD_STATUS_RESERVED0_LEN        16
#define DX_M1_SYSTEM_CMD_STATUS_RESERVED0_OFFSET     16
#define DX_M1_SYSTEM_CMD_STATUS_RESERVED0_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DX_M1_SYSTEM_CMD_STATUS_RESERVED0_MASK       0xffff0000 /* [31:16] 0b11111111111111110000000000000000 */
#define READ_MASK_DX_M1_SYSTEM_CMD_STATUS_RESERVED0(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, DX_M1_SYSTEM_CMD_STATUS_RESERVED0_MASK)
#define READ_DX_M1_SYSTEM_CMD_STATUS_RESERVED0(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, DX_M1_SYSTEM_CMD_STATUS_RESERVED0_MASK, DX_M1_SYSTEM_CMD_STATUS_RESERVED0_OFFSET)
#define WRITE_DX_M1_SYSTEM_CMD_STATUS_RESERVED0(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_CMD_STATUS, bits, DX_M1_SYSTEM_CMD_STATUS_RESERVED0_MASK, DX_M1_SYSTEM_CMD_STATUS_RESERVED0_OFFSET)

/* DX_M1_SYSTEM.FEATURE_BASE (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_FEATURE_BASE(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_FEATURE_BASE)
#define WRITE_DX_M1_SYSTEM_FEATURE_BASE(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_FEATURE_BASE, val)
/* DX_M1_SYSTEM.FEATURE_BASE.FEATURE_OFFSET (Category: SYSTEM) */
#define DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_LEN        32
#define DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_OFFSET     0
#define DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_FEATURE_BASE, DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_MASK)
#define READ_DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_FEATURE_BASE, DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_MASK, DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_OFFSET)
#define WRITE_DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_FEATURE_BASE, bits, DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_MASK, DX_M1_SYSTEM_FEATURE_BASE_FEATURE_OFFSET_OFFSET)

/* DX_M1_SYSTEM.WEIGHT_BASE (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_WEIGHT_BASE(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_WEIGHT_BASE)
#define WRITE_DX_M1_SYSTEM_WEIGHT_BASE(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_WEIGHT_BASE, val)
/* DX_M1_SYSTEM.WEIGHT_BASE.WEIGHT_OFFSET (Category: SYSTEM) */
#define DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_LEN        32
#define DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_OFFSET     0
#define DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_WEIGHT_BASE, DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_MASK)
#define READ_DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_WEIGHT_BASE, DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_MASK, DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_OFFSET)
#define WRITE_DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_WEIGHT_BASE, bits, DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_MASK, DX_M1_SYSTEM_WEIGHT_BASE_WEIGHT_OFFSET_OFFSET)

/* DX_M1_SYSTEM.SWREG0 (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_SWREG0(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_SWREG0)
#define WRITE_DX_M1_SYSTEM_SWREG0(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_SWREG0, val)
/* DX_M1_SYSTEM.SWREG0.SWREG0 (Category: SYSTEM) */
#define DX_M1_SYSTEM_SWREG0_SWREG0_LEN        32
#define DX_M1_SYSTEM_SWREG0_SWREG0_OFFSET     0
#define DX_M1_SYSTEM_SWREG0_SWREG0_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DX_M1_SYSTEM_SWREG0_SWREG0_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_SWREG0_SWREG0(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_SWREG0, DX_M1_SYSTEM_SWREG0_SWREG0_MASK)
#define READ_DX_M1_SYSTEM_SWREG0_SWREG0(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_SWREG0, DX_M1_SYSTEM_SWREG0_SWREG0_MASK, DX_M1_SYSTEM_SWREG0_SWREG0_OFFSET)
#define WRITE_DX_M1_SYSTEM_SWREG0_SWREG0(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_SWREG0, bits, DX_M1_SYSTEM_SWREG0_SWREG0_MASK, DX_M1_SYSTEM_SWREG0_SWREG0_OFFSET)

/* DX_M1_SYSTEM.SWREG1 (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_SWREG1(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_SWREG1)
#define WRITE_DX_M1_SYSTEM_SWREG1(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_SWREG1, val)
/* DX_M1_SYSTEM.SWREG1.SWREG1 (Category: SYSTEM) */
#define DX_M1_SYSTEM_SWREG1_SWREG1_LEN        32
#define DX_M1_SYSTEM_SWREG1_SWREG1_OFFSET     0
#define DX_M1_SYSTEM_SWREG1_SWREG1_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DX_M1_SYSTEM_SWREG1_SWREG1_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_SWREG1_SWREG1(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_SWREG1, DX_M1_SYSTEM_SWREG1_SWREG1_MASK)
#define READ_DX_M1_SYSTEM_SWREG1_SWREG1(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_SWREG1, DX_M1_SYSTEM_SWREG1_SWREG1_MASK, DX_M1_SYSTEM_SWREG1_SWREG1_OFFSET)
#define WRITE_DX_M1_SYSTEM_SWREG1_SWREG1(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_SWREG1, bits, DX_M1_SYSTEM_SWREG1_SWREG1_MASK, DX_M1_SYSTEM_SWREG1_SWREG1_OFFSET)

/* DX_M1_SYSTEM.SWREG2 (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_SWREG2(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_SWREG2)
#define WRITE_DX_M1_SYSTEM_SWREG2(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_SWREG2, val)
/* DX_M1_SYSTEM.SWREG2.SWREG2 (Category: SYSTEM) */
#define DX_M1_SYSTEM_SWREG2_SWREG2_LEN        32
#define DX_M1_SYSTEM_SWREG2_SWREG2_OFFSET     0
#define DX_M1_SYSTEM_SWREG2_SWREG2_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DX_M1_SYSTEM_SWREG2_SWREG2_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_SWREG2_SWREG2(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_SWREG2, DX_M1_SYSTEM_SWREG2_SWREG2_MASK)
#define READ_DX_M1_SYSTEM_SWREG2_SWREG2(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_SWREG2, DX_M1_SYSTEM_SWREG2_SWREG2_MASK, DX_M1_SYSTEM_SWREG2_SWREG2_OFFSET)
#define WRITE_DX_M1_SYSTEM_SWREG2_SWREG2(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_SWREG2, bits, DX_M1_SYSTEM_SWREG2_SWREG2_MASK, DX_M1_SYSTEM_SWREG2_SWREG2_OFFSET)

/* DX_M1_SYSTEM.SWREG3 (Category: SYSTEM) */
#define READ_DX_M1_SYSTEM_SWREG3(base) dxrt::readl((void*)base, REG_DX_M1_SYSTEM_SWREG3)
#define WRITE_DX_M1_SYSTEM_SWREG3(base, val) dxrt::writel((void*)base, REG_DX_M1_SYSTEM_SWREG3, val)
/* DX_M1_SYSTEM.SWREG3.SWREG3 (Category: SYSTEM) */
#define DX_M1_SYSTEM_SWREG3_SWREG3_LEN        32
#define DX_M1_SYSTEM_SWREG3_SWREG3_OFFSET     0
#define DX_M1_SYSTEM_SWREG3_SWREG3_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DX_M1_SYSTEM_SWREG3_SWREG3_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define READ_MASK_DX_M1_SYSTEM_SWREG3_SWREG3(base) \
    dxrt::readl_mask((void*)base, REG_DX_M1_SYSTEM_SWREG3, DX_M1_SYSTEM_SWREG3_SWREG3_MASK)
#define READ_DX_M1_SYSTEM_SWREG3_SWREG3(base) \
    dxrt::readb((void*)base, REG_DX_M1_SYSTEM_SWREG3, DX_M1_SYSTEM_SWREG3_SWREG3_MASK, DX_M1_SYSTEM_SWREG3_SWREG3_OFFSET)
#define WRITE_DX_M1_SYSTEM_SWREG3_SWREG3(base, bits) \
    dxrt::writeb((void*)base, REG_DX_M1_SYSTEM_SWREG3, bits, DX_M1_SYSTEM_SWREG3_SWREG3_MASK, DX_M1_SYSTEM_SWREG3_SWREG3_OFFSET)


int Verify_Dx_m1_system_Registers(dxDX_M1_SYSTEM_t* base);

} /* namespace dxrt */
